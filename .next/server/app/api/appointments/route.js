/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/appointments/route";
exports.ids = ["app/api/appointments/route"];
exports.modules = {

/***/ "(rsc)/./app/api/appointments/route.ts":
/*!***************************************!*\
  !*** ./app/api/appointments/route.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"(rsc)/./node_modules/firebase/firestore/dist/index.mjs\");\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/firebase */ \"(rsc)/./lib/firebase.ts\");\n\n\n\nasync function GET(request) {\n    try {\n        const searchParams = request.nextUrl.searchParams;\n        const clinicId = searchParams.get('clinicId');\n        const doctorId = searchParams.get('doctorId');\n        const date = searchParams.get('date');\n        console.log('API Request params:', {\n            clinicId,\n            doctorId,\n            date\n        });\n        if (!clinicId || !doctorId || !date) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Missing required parameters',\n                params: {\n                    clinicId,\n                    doctorId,\n                    date\n                }\n            }, {\n                status: 400\n            });\n        }\n        // Fetch doctor's schedule from Firestore\n        const doctorRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_2__.db, 'clinics', clinicId, 'doctors', doctorId);\n        const doctorSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(doctorRef);\n        if (!doctorSnap.exists()) {\n            console.error('Doctor not found:', {\n                clinicId,\n                doctorId\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Doctor not found',\n                params: {\n                    clinicId,\n                    doctorId\n                }\n            }, {\n                status: 404\n            });\n        }\n        const doctorData = doctorSnap.data();\n        console.log('Doctor data:', doctorData);\n        const schedule = doctorData.schedule || {\n            workingHours: {\n                start: \"08:00\",\n                end: \"18:00\"\n            },\n            workingDays: [\n                \"monday\",\n                \"tuesday\",\n                \"wednesday\",\n                \"thursday\",\n                \"friday\"\n            ]\n        };\n        // Generate all possible slots\n        const allSlots = [];\n        const [startHour] = schedule.workingHours.start.split(':').map(Number);\n        const [endHour] = schedule.workingHours.end.split(':').map(Number);\n        for(let hour = startHour; hour < endHour; hour++){\n            allSlots.push(`${hour.toString().padStart(2, '0')}:00`);\n            allSlots.push(`${hour.toString().padStart(2, '0')}:30`);\n        }\n        console.log('Generated slots:', allSlots);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            availableSlots: allSlots,\n            schedule,\n            debug: {\n                doctorId,\n                clinicId,\n                date,\n                generatedSlots: allSlots.length\n            }\n        });\n    } catch (error) {\n        console.error('API Error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error',\n            details: error instanceof Error ? error.message : 'Unknown error'\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { clinicId, doctorId, date, time, action } = body;\n        if (!clinicId || !doctorId || !date || !time || !action) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Missing required parameters'\n            }, {\n                status: 400\n            });\n        }\n        if (action === 'block') {\n            // Generate a unique block ID\n            const blockId = `block_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;\n            // Create document reference\n            const blockRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_2__.db, \"temporaryBlocks\", blockId);\n            // Create the document first\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(blockRef, {\n                clinicId,\n                doctorId,\n                date: firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(new Date(date)),\n                time,\n                blockedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.now(),\n                expiresAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(new Date(Date.now() + 5 * 60 * 1000)),\n                status: 'blocked'\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                blockId\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Invalid action'\n        }, {\n            status: 400\n        });\n    } catch (error) {\n        console.error('Error processing appointment action:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error',\n            details: error instanceof Error ? error.message : 'Unknown error'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/appointments/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/firebase.ts":
/*!*************************!*\
  !*** ./lib/firebase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addClinic: () => (/* binding */ addClinic),\n/* harmony export */   addConsultation: () => (/* binding */ addConsultation),\n/* harmony export */   addDoctor: () => (/* binding */ addDoctor),\n/* harmony export */   addDoctorService: () => (/* binding */ addDoctorService),\n/* harmony export */   addDoctorServices: () => (/* binding */ addDoctorServices),\n/* harmony export */   addExam: () => (/* binding */ addExam),\n/* harmony export */   addExamAppointment: () => (/* binding */ addExamAppointment),\n/* harmony export */   addExamType: () => (/* binding */ addExamType),\n/* harmony export */   addNotificationType: () => (/* binding */ addNotificationType),\n/* harmony export */   addPatient: () => (/* binding */ addPatient),\n/* harmony export */   addUser: () => (/* binding */ addUser),\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   countUnreadNotifications: () => (/* binding */ countUnreadNotifications),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   deleteClinic: () => (/* binding */ deleteClinic),\n/* harmony export */   deleteDoctorService: () => (/* binding */ deleteDoctorService),\n/* harmony export */   deleteExamType: () => (/* binding */ deleteExamType),\n/* harmony export */   deleteNotificationType: () => (/* binding */ deleteNotificationType),\n/* harmony export */   deleteUser: () => (/* binding */ deleteUser),\n/* harmony export */   getAllPatients: () => (/* binding */ getAllPatients),\n/* harmony export */   getAppointments: () => (/* binding */ getAppointments),\n/* harmony export */   getAvailableTimeSlots: () => (/* binding */ getAvailableTimeSlots),\n/* harmony export */   getClinic: () => (/* binding */ getClinic),\n/* harmony export */   getClinicById: () => (/* binding */ getClinicById),\n/* harmony export */   getClinicSchedule: () => (/* binding */ getClinicSchedule),\n/* harmony export */   getClinics: () => (/* binding */ getClinics),\n/* harmony export */   getConsultations: () => (/* binding */ getConsultations),\n/* harmony export */   getConsultationsByClinic: () => (/* binding */ getConsultationsByClinic),\n/* harmony export */   getConsultationsByDoctor: () => (/* binding */ getConsultationsByDoctor),\n/* harmony export */   getConsultationsByUser: () => (/* binding */ getConsultationsByUser),\n/* harmony export */   getDashboardData: () => (/* binding */ getDashboardData),\n/* harmony export */   getDoctorById: () => (/* binding */ getDoctorById),\n/* harmony export */   getDoctorServices: () => (/* binding */ getDoctorServices),\n/* harmony export */   getDoctorServicesByDoctor: () => (/* binding */ getDoctorServicesByDoctor),\n/* harmony export */   getDoctors: () => (/* binding */ getDoctors),\n/* harmony export */   getDoctorsByClinic: () => (/* binding */ getDoctorsByClinic),\n/* harmony export */   getExamTypes: () => (/* binding */ getExamTypes),\n/* harmony export */   getExamTypesByClinic: () => (/* binding */ getExamTypesByClinic),\n/* harmony export */   getExams: () => (/* binding */ getExams),\n/* harmony export */   getExamsByClinic: () => (/* binding */ getExamsByClinic),\n/* harmony export */   getExamsByUser: () => (/* binding */ getExamsByUser),\n/* harmony export */   getNotificationTypes: () => (/* binding */ getNotificationTypes),\n/* harmony export */   getNotifications: () => (/* binding */ getNotifications),\n/* harmony export */   getPatientAppointments: () => (/* binding */ getPatientAppointments),\n/* harmony export */   getPatientsByClinic: () => (/* binding */ getPatientsByClinic),\n/* harmony export */   getUserDetails: () => (/* binding */ getUserDetails),\n/* harmony export */   getUserNotifications: () => (/* binding */ getUserNotifications),\n/* harmony export */   getUsers: () => (/* binding */ getUsers),\n/* harmony export */   login: () => (/* binding */ login),\n/* harmony export */   logout: () => (/* binding */ logout),\n/* harmony export */   markNotificationAsRead: () => (/* binding */ markNotificationAsRead),\n/* harmony export */   register: () => (/* binding */ register),\n/* harmony export */   removeDoctorService: () => (/* binding */ removeDoctorService),\n/* harmony export */   removeExamType: () => (/* binding */ removeExamType),\n/* harmony export */   saveActivity: () => (/* binding */ saveActivity),\n/* harmony export */   saveSchedule: () => (/* binding */ saveSchedule),\n/* harmony export */   sendEmail: () => (/* binding */ sendEmail),\n/* harmony export */   sendMassNotification: () => (/* binding */ sendMassNotification),\n/* harmony export */   updateClinic: () => (/* binding */ updateClinic),\n/* harmony export */   updateConsultationStatus: () => (/* binding */ updateConsultationStatus),\n/* harmony export */   updateDoctorService: () => (/* binding */ updateDoctorService),\n/* harmony export */   updateExamDate: () => (/* binding */ updateExamDate),\n/* harmony export */   updateExamStatus: () => (/* binding */ updateExamStatus),\n/* harmony export */   updateExamType: () => (/* binding */ updateExamType),\n/* harmony export */   updateUser: () => (/* binding */ updateUser),\n/* harmony export */   updateUserPassword: () => (/* binding */ updateUserPassword),\n/* harmony export */   updateUserProfile: () => (/* binding */ updateUserProfile),\n/* harmony export */   uploadFile: () => (/* binding */ uploadFile)\n/* harmony export */ });\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ \"(rsc)/./node_modules/firebase/app/dist/index.mjs\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"(rsc)/./node_modules/firebase/firestore/dist/index.mjs\");\n/* harmony import */ var firebase_storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/storage */ \"(rsc)/./node_modules/firebase/storage/dist/index.mjs\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/auth */ \"(rsc)/./node_modules/firebase/auth/dist/index.mjs\");\n/* harmony import */ var _barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=addMinutes,endOfDay,format,startOfDay!=!date-fns */ \"(rsc)/./node_modules/date-fns/format.js\");\n/* harmony import */ var _barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=addMinutes,endOfDay,format,startOfDay!=!date-fns */ \"(rsc)/./node_modules/date-fns/addMinutes.js\");\n/* harmony import */ var _barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=addMinutes,endOfDay,format,startOfDay!=!date-fns */ \"(rsc)/./node_modules/date-fns/startOfDay.js\");\n/* harmony import */ var _barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=addMinutes,endOfDay,format,startOfDay!=!date-fns */ \"(rsc)/./node_modules/date-fns/endOfDay.js\");\n/* harmony import */ var date_fns_locale__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns/locale */ \"(rsc)/./node_modules/date-fns/locale/pt-BR.js\");\n\n\n\n\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBz7utXMj14ex_HwIm5kM9X9RAhZjn0la0\",\n    authDomain: \"saude-na-mao-25a73.firebaseapp.com\",\n    projectId: \"saude-na-mao-25a73\",\n    storageBucket: \"saude-na-mao-25a73.firebasestorage.app\",\n    messagingSenderId: \"689829157339\",\n    appId: \"1:689829157339:web:358c9ae1d20cf6c44c6ffe\",\n    measurementId: \"G-DBQW458JVS\"\n};\n// Initialize Firebase\nlet app;\nif (!(0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApps)().length) {\n    app = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(firebaseConfig);\n} else {\n    app = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApps)()[0] // if already initialized, use that one\n    ;\n}\nconst db = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getFirestore)(app);\nconst storage = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_2__.getStorage)(app);\nconst auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.getAuth)(app);\nconst consultationsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"consultations\");\nconst examsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"exams\");\nconst clinicsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"clinics\");\nconst usersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"users\");\nconst appointmentsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"appointments\");\n// Update doctorsRef to be a function that returns the correct subcollection reference\nconst getDoctorsRef = (clinicId)=>(0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", clinicId), \"doctors\");\n// Add helper function to get users subcollection reference\nconst getClinicUsersRef = (clinicId)=>(0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", clinicId), \"users\");\n// Add this function near the top with other utility functions\nfunction generateStrongPassword(length = 12) {\n    const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const lowercase = 'abcdefghijklmnopqrstuvwxyz';\n    const numbers = '0123456789';\n    const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';\n    const allChars = uppercase + lowercase + numbers + symbols;\n    let password = '';\n    // Ensure at least one of each type\n    password += uppercase[Math.floor(Math.random() * uppercase.length)];\n    password += lowercase[Math.floor(Math.random() * lowercase.length)];\n    password += numbers[Math.floor(Math.random() * numbers.length)];\n    password += symbols[Math.floor(Math.random() * symbols.length)];\n    // Fill the rest\n    for(let i = password.length; i < length; i++){\n        password += allChars[Math.floor(Math.random() * allChars.length)];\n    }\n    // Shuffle the password\n    return password.split('').sort(()=>Math.random() - 0.5).join('');\n}\nfunction generateUniqueId(length = 20) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    const randomValues = new Uint32Array(length);\n    crypto.getRandomValues(randomValues);\n    for(let i = 0; i < length; i++){\n        result += chars.charAt(randomValues[i] % chars.length);\n    }\n    return result;\n}\nfunction generateTimeSlots(start, end) {\n    try {\n        const slots = [];\n        const [startHour, startMinute] = start.split(':').map(Number);\n        const [endHour, endMinute] = end.split(':').map(Number);\n        const startDate = new Date();\n        startDate.setHours(startHour, startMinute, 0, 0);\n        const endDate = new Date();\n        endDate.setHours(endHour, endMinute, 0, 0);\n        let currentSlot = startDate;\n        while(currentSlot < endDate){\n            slots.push((0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__.format)(currentSlot, 'HH:mm'));\n            currentSlot = (0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_5__.addMinutes)(currentSlot, 30);\n        }\n        return slots;\n    } catch (error) {\n        console.error(\"Error generating time slots:\", error);\n        return [];\n    }\n}\nfunction generateDailyTimeSlots(start, end) {\n    const slots = [];\n    const [startHour, startMinute] = start.split(':').map(Number);\n    const [endHour, endMinute] = end.split(':').map(Number);\n    const startDate = new Date();\n    startDate.setHours(startHour, startMinute, 0, 0);\n    const endDate = new Date();\n    endDate.setHours(endHour, endMinute, 0, 0);\n    let currentSlot = startDate;\n    while(currentSlot < endDate){\n        slots.push({\n            time: (0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__.format)(currentSlot, 'HH:mm'),\n            isAvailable: true\n        });\n        currentSlot = (0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_5__.addMinutes)(currentSlot, 30);\n    }\n    return slots;\n}\nasync function getClinicWorkingHours(clinicId) {\n    try {\n        const clinicRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", clinicId);\n        const clinicDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(clinicRef);\n        if (!clinicDoc.exists()) {\n            throw new Error(\"Clinic not found\");\n        }\n        const clinicData = clinicDoc.data();\n        return {\n            workingHours: clinicData.workingHours || {\n                start: \"08:00\",\n                end: \"18:00\"\n            },\n            workingDays: clinicData.workingDays || [\n                \"segunda\",\n                \"terca\",\n                \"quarta\",\n                \"quinta\",\n                \"sexta\"\n            ]\n        };\n    } catch (error) {\n        console.error(\"Error getting clinic working hours:\", error);\n        throw error;\n    }\n}\nasync function getAvailableTimeSlots(clinicId, selectedDate, type, doctorId) {\n    try {\n        const clinicRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", clinicId);\n        const clinicDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(clinicRef);\n        if (!clinicDoc.exists()) {\n            throw new Error(\"Clinic not found\");\n        }\n        const clinicData = clinicDoc.data();\n        const schedule = clinicData.schedule || {\n            workingDays: [\n                \"segunda\",\n                \"terca\",\n                \"quarta\",\n                \"quinta\",\n                \"sexta\"\n            ],\n            workingHours: {\n                start: \"08:00\",\n                end: \"18:00\"\n            },\n            defaultTimeSlots: generateDailyTimeSlots(\"08:00\", \"18:00\")\n        };\n        // Check if selected date is a working day\n        const weekDay = (0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__.format)(selectedDate, 'EEEE', {\n            locale: date_fns_locale__WEBPACK_IMPORTED_MODULE_6__.ptBR\n        }).toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n        if (!schedule.workingDays.includes(weekDay)) {\n            console.log(`${weekDay} is not a working day`);\n            return [];\n        }\n        // Use a single query with date range\n        const startTime = (0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_7__.startOfDay)(selectedDate);\n        const endTime = (0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_8__.endOfDay)(selectedDate);\n        // Base query with required index\n        let appointmentsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(appointmentsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"date\", \">=\", startTime));\n        // Add doctor filter if provided\n        if (doctorId) {\n            // Note: This requires a composite index on (clinicId, doctorId, date)\n            appointmentsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(appointmentsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"doctorId\", \"==\", doctorId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"date\", \">=\", startTime), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"date\", \"<=\", endTime));\n        }\n        const appointments = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(appointmentsQuery);\n        // Filter appointments within the day client-side\n        const bookedSlots = new Set(appointments.docs.filter((doc)=>{\n            const appointmentDate = doc.data().date.toDate();\n            return appointmentDate >= startTime && appointmentDate <= endTime;\n        }).map((doc)=>(0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__.format)(doc.data().date.toDate(), 'HH:mm')));\n        const defaultSlots = schedule.defaultTimeSlots || generateDailyTimeSlots(schedule.workingHours.start, schedule.workingHours.end);\n        return defaultSlots.filter((slot)=>!bookedSlots.has(slot.time)).map((slot)=>slot.time);\n    } catch (error) {\n        console.error(\"Error getting available slots:\", error);\n        return [];\n    }\n}\n// Auth functions\nconst register = async (data)=>{\n    const { name, sus, password, type, clinicId } = data;\n    if (!clinicId) throw new Error(\"clinicId is required for registration\");\n    // Generate strong password if none provided\n    const strongPassword = password || generateStrongPassword(16);\n    const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.createUserWithEmailAndPassword)(auth, sus, strongPassword);\n    const user = userCredential.user;\n    await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.updateProfile)(user, {\n        displayName: name\n    });\n    // Save user in both global users and clinic's users subcollection\n    await Promise.all([\n        (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"users\", user.uid), {\n            name: name,\n            email: sus,\n            type: type,\n            clinicId: clinicId\n        }),\n        (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(getClinicUsersRef(clinicId), user.uid), {\n            name: name,\n            email: sus,\n            type: type,\n            uid: user.uid,\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)(),\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        })\n    ]);\n    return {\n        ...user,\n        temporaryPassword: password ? undefined : strongPassword\n    };\n};\n// First, create the admin user in root users collection\nconst createAdminUser = async ()=>{\n    const adminData = {\n        name: \"Mateus Henrique Vieira\",\n        email: \"santanamateus8979@gmail.com\",\n        type: \"admin\",\n        clinicId: \"zijo9UzfBpnXMQ4Hfr6b\",\n        createdAt: new Date(\"2025-03-07T11:51:28.199Z\").toISOString(),\n        updatedAt: new Date(\"2025-04-07T21:36:20-03:00\").toISOString(),\n        id: \"NZgsqEIDjXSIBfMEUauAARtQI4F2\"\n    };\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"users\", adminData.id), adminData);\n};\n// Call this once to create the admin user\n// createAdminUser();\nconst login = async (email, password)=>{\n    try {\n        const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.signInWithEmailAndPassword)(auth, email, password);\n        const rootUserDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"users\", userCredential.user.uid));\n        if (rootUserDoc.exists()) {\n            const userData = rootUserDoc.data();\n            return {\n                id: userCredential.user.uid,\n                ...userData,\n                clinicName: userData.clinicId ? (await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", userData.clinicId))).data()?.name : undefined,\n                isAdmin: email === \"santanamateus8979@gmail.com\"\n            };\n        }\n        throw new Error(\"Usuário não encontrado\");\n    } catch (error) {\n        console.error(\"Login error:\", error);\n        throw error;\n    }\n};\nconst logout = async ()=>{\n    try {\n        await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.signOut)(auth);\n        localStorage.clear(); // Clear all local storage\n        sessionStorage.clear(); // Clear all session storage\n        return true;\n    } catch (error) {\n        console.error(\"Logout error:\", error);\n        throw error;\n    }\n};\n// Users Collection\nasync function getUsers() {\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(usersRef));\n    return snapshot.docs.map((doc)=>({\n            id: doc.id,\n            ...doc.data()\n        }));\n}\nasync function addUser(userData) {\n    const { name, email, password, type, clinicId } = userData;\n    const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.createUserWithEmailAndPassword)(auth, email, password);\n    const user = userCredential.user;\n    await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.updateProfile)(user, {\n        displayName: name\n    });\n    return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"users\", user.uid), {\n        name: name,\n        email: email,\n        type: type,\n        clinicId: clinicId\n    });\n}\nasync function updateUser(userId, userData, newClinicId) {\n    const globalUserRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"users\", userId);\n    const globalUserDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(globalUserRef);\n    if (!globalUserDoc.exists()) {\n        throw new Error(\"Usuário não encontrado\");\n    }\n    const currentUserData = globalUserDoc.data();\n    const oldClinicId = currentUserData.clinicId;\n    // If clinic is changing, handle the transfer\n    if (oldClinicId !== newClinicId) {\n        const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(db);\n        // Remove from old clinic\n        if (oldClinicId) {\n            const oldClinicUserRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(getClinicUsersRef(oldClinicId), userId);\n            batch.delete(oldClinicUserRef);\n        }\n        // Add to new clinic\n        const newClinicUserRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(getClinicUsersRef(newClinicId), userId);\n        batch.set(newClinicUserRef, {\n            ...currentUserData,\n            ...userData,\n            clinicId: newClinicId,\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        });\n        // Update global user record\n        batch.update(globalUserRef, {\n            ...userData,\n            clinicId: newClinicId,\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        });\n        // If user is a doctor, move doctor document to new clinic\n        if (currentUserData.type === \"doctor\" && currentUserData.doctorId) {\n            const oldDoctorRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(getDoctorsRef(oldClinicId), currentUserData.doctorId);\n            const oldDoctorDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(oldDoctorRef);\n            if (oldDoctorDoc.exists()) {\n                const doctorData = oldDoctorDoc.data();\n                // Create doctor in new clinic\n                const newDoctorRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(getDoctorsRef(newClinicId), currentUserData.doctorId);\n                batch.set(newDoctorRef, {\n                    ...doctorData,\n                    clinicId: newClinicId,\n                    updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n                });\n                // Delete from old clinic\n                batch.delete(oldDoctorRef);\n            }\n        }\n        // Execute all operations\n        await batch.commit();\n        return true;\n    } else {\n        // If clinic isn't changing, just update the user data\n        const clinicUserRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(getClinicUsersRef(newClinicId), userId);\n        await Promise.all([\n            (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(globalUserRef, {\n                ...userData,\n                updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n            }),\n            (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(clinicUserRef, {\n                ...userData,\n                updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n            })\n        ]);\n        return true;\n    }\n}\nasync function updateUserProfile(userId, data, clinicId) {\n    if (!clinicId) throw new Error(\"clinicId is required\");\n    const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(getClinicUsersRef(clinicId), userId);\n    const userDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(userRef);\n    if (!userDoc.exists()) {\n        throw new Error(\"Usuário não encontrado no posto de saúde\");\n    }\n    return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userRef, {\n        ...data,\n        updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n    });\n}\nasync function updateUserPassword(currentPassword, newPassword) {\n    const user = auth.currentUser;\n    if (!user) {\n        throw new Error(\"No user is currently logged in.\");\n    }\n    // This is a placeholder. In a real application, you would need to re-authenticate the user\n    // before allowing them to change their password. This usually involves prompting them for their\n    // current password and verifying it against the stored credentials.\n    return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.updatePassword)(user, newPassword);\n}\n// Adicionar a função deleteUser após a função updateUser\nasync function deleteUser(userId, clinicId) {\n    if (!clinicId) throw new Error(\"clinicId is required\");\n    const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(getClinicUsersRef(clinicId), userId);\n    const userDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(userRef);\n    if (!userDoc.exists()) {\n        throw new Error(\"Usuário não encontrado no posto de saúde\");\n    }\n    const userData = userDoc.data();\n    if (userData?.doctorId) {\n        throw new Error(\"Não é possível excluir este usuário pois ele está associado a um médico.\");\n    }\n    // Verificar se o usuário tem consultas ou exames associados\n    const [consultationsSnapshot, examsSnapshot] = await Promise.all([\n        (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(consultationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"userId\", \"==\", userId))),\n        (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(examsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"userId\", \"==\", userId)))\n    ]);\n    if (!consultationsSnapshot.empty || !examsSnapshot.empty) {\n        throw new Error(\"Não é possível excluir este usuário pois existem consultas ou exames associados a ele.\");\n    }\n    // Se não houver registros associados, excluir o usuário\n    return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.deleteDoc)(userRef);\n}\n// Funções para buscar dados específicos de um usuário\nasync function getUserDetails(userId, clinicId) {\n    // First try to get from global users collection\n    const globalUserRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"users\", userId);\n    const globalUserDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(globalUserRef);\n    if (globalUserDoc.exists()) {\n        return {\n            id: globalUserDoc.id,\n            clinicId: globalUserDoc.data().clinicId,\n            ...globalUserDoc.data()\n        };\n    }\n    // If not found globally and clinicId is provided, try clinic's users collection\n    if (clinicId) {\n        const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(getClinicUsersRef(clinicId), userId);\n        const userDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(userRef);\n        if (userDoc.exists()) {\n            return {\n                id: userDoc.id,\n                clinicId,\n                ...userDoc.data()\n            };\n        }\n    }\n    throw new Error(\"Usuário não encontrado\");\n}\nasync function getConsultationsByUser(userId) {\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(consultationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"userId\", \"==\", userId));\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    return snapshot.docs.map((doc)=>{\n        const data = doc.data();\n        const date = data.date instanceof firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp ? data.date.toDate() : new Date(data.date);\n        return {\n            id: doc.id,\n            ...data,\n            date: date\n        };\n    });\n}\nasync function getExamsByUser(userId) {\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(examsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"userId\", \"==\", userId));\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    return snapshot.docs.map((doc)=>{\n        const data = doc.data();\n        const date = data.date instanceof firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp ? data.date.toDate() : new Date(data.date);\n        return {\n            id: doc.id,\n            ...data,\n            date: date\n        };\n    });\n}\n// Clinics Collection\nasync function getClinics() {\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(clinicsRef));\n    return snapshot.docs.map((doc)=>({\n            id: doc.id,\n            ...doc.data()\n        }));\n}\n// Certifique-se de que a função getClinic está correta\nasync function getClinic(clinicId) {\n    try {\n        if (!clinicId) {\n            console.error(\"getClinic chamado sem ID\");\n            return null;\n        }\n        const clinicRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", clinicId);\n        const clinicSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(clinicRef);\n        if (clinicSnap.exists()) {\n            return {\n                id: clinicSnap.id,\n                ...clinicSnap.data()\n            };\n        }\n        console.warn(\"Clínica não encontrada:\", clinicId);\n        return null;\n    } catch (error) {\n        console.error(\"Erro ao buscar clínica:\", error);\n        throw error;\n    }\n}\n// Adicionar ou atualizar a função addClinic para lidar com os dados do posto de saúde\nasync function addClinic(data) {\n    try {\n        const clinicsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"clinics\");\n        const clinicRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(clinicsRef);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(clinicRef, {\n            ...data,\n            id: clinicRef.id,\n            createdAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.now(),\n            updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.now()\n        });\n        // Create initial subCollections\n        const appointmentsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(clinicRef, 'appointments');\n        const scheduleRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(clinicRef, 'funcionamento/schedule');\n        // Set up initial schedule document\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(scheduleRef, {\n            workingDays: data.workingDays,\n            workingHours: data.workingHours,\n            is24Hours: data.is24Hours || false\n        });\n        return clinicRef.id;\n    } catch (error) {\n        console.error(\"Error adding clinic:\", error);\n        throw error;\n    }\n}\nasync function updateClinic(clinicId, clinicData) {\n    const clinicRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", clinicId);\n    // Preparar os dados para atualização\n    const updateData = {\n        ...clinicData\n    };\n    // Converter horários para Timestamp se fornecidos\n    if (updateData.openingHour) {\n        updateData.openingHour = firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(new Date(`2000-01-01T${updateData.openingHour}:00`));\n    }\n    if (updateData.closingHour) {\n        updateData.closingHour = firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(new Date(`2000-01-01T${updateData.closingHour}:00`));\n    }\n    return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(clinicRef, updateData);\n}\nasync function deleteClinic(clinicId) {\n    try {\n        const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(db);\n        const clinicRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", clinicId);\n        // Get all associated records\n        const [doctorsSnapshot, consultationsSnapshot, examsSnapshot] = await Promise.all([\n            (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(getDoctorsRef(clinicId)),\n            (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(consultationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId))),\n            (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(examsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId)))\n        ]);\n        // Delete all doctors in this clinic\n        doctorsSnapshot.docs.forEach((doc)=>{\n            batch.delete(doc.ref);\n        });\n        // Delete all consultations\n        consultationsSnapshot.docs.forEach((doc)=>{\n            batch.delete(doc.ref);\n        });\n        // Delete all exams\n        examsSnapshot.docs.forEach((doc)=>{\n            batch.delete(doc.ref);\n        });\n        // Delete the clinic itself\n        batch.delete(clinicRef);\n        // Execute all deletions in a single atomic operation\n        await batch.commit();\n        return true;\n    } catch (error) {\n        console.error(\"Error deleting clinic:\", error);\n        throw error;\n    }\n}\n// Doctors Collection\nasync function getDoctors(clinicId) {\n    try {\n        if (!clinicId || clinicId === 'all') {\n            // Fetch all clinics first\n            const clinicsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(clinicsRef);\n            // Get all doctors from each clinic\n            const doctorsPromises = clinicsSnapshot.docs.map(async (clinicDoc)=>{\n                const doctorsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(getDoctorsRef(clinicDoc.id));\n                return doctorsSnapshot.docs.map((doc)=>({\n                        id: doc.id,\n                        clinicId: clinicDoc.id,\n                        ...doc.data()\n                    }));\n            });\n            // Wait for all promises to resolve and flatten the array\n            const allDoctors = await Promise.all(doctorsPromises);\n            return allDoctors.flat();\n        }\n        // If clinicId is provided, fetch doctors from that specific clinic\n        const doctorsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(getDoctorsRef(clinicId));\n        return doctorsSnapshot.docs.map((doc)=>({\n                id: doc.id,\n                clinicId,\n                ...doc.data()\n            }));\n    } catch (error) {\n        console.error(\"Error fetching doctors:\", error);\n        throw error;\n    }\n}\nasync function addDoctor(doctorData) {\n    try {\n        if (!doctorData.clinicId) {\n            throw new Error(\"clinicId is required to add a doctor\");\n        }\n        // First verify the clinic exists and get its data\n        const clinicRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(clinicsRef, doctorData.clinicId);\n        const clinicDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(clinicRef);\n        if (!clinicDoc.exists()) {\n            throw new Error(\"Clinic not found\");\n        }\n        // Generate a unique random ID\n        const docId = generateUniqueId();\n        // Generate a strong password if none provided\n        const strongPassword = generateStrongPassword(16);\n        const password = doctorData.password || strongPassword;\n        // Create auth user with strong password\n        const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.createUserWithEmailAndPassword)(auth, doctorData.email, password);\n        await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_3__.updateProfile)(userCredential.user, {\n            displayName: `${doctorData.firstName} ${doctorData.lastName}`\n        });\n        const doctorsRef = getDoctorsRef(doctorData.clinicId);\n        const is24Hours = doctorData.workingHours?.start === \"00:00\" && doctorData.workingHours?.end === \"23:59\";\n        const cleanedData = removeUndefinedFields({\n            ...doctorData,\n            uid: userCredential.user.uid,\n            is24Hours,\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)(),\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        });\n        // Create the doctor document with the random ID\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(doctorsRef, docId), cleanedData);\n        // Create the corresponding user document\n        const userDoc = {\n            name: `${doctorData.firstName} ${doctorData.lastName}`,\n            email: doctorData.email,\n            type: \"doctor\",\n            clinicId: doctorData.clinicId,\n            doctorId: docId,\n            uid: userCredential.user.uid,\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)(),\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        };\n        // Save in both global users and clinic's users collections\n        await Promise.all([\n            (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"users\", userCredential.user.uid), userDoc),\n            (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(getClinicUsersRef(doctorData.clinicId), userCredential.user.uid), userDoc)\n        ]);\n        return {\n            id: docId,\n            ...cleanedData,\n            temporaryPassword: doctorData.password ? undefined : password\n        };\n    } catch (error) {\n        console.error(\"Error adding doctor:\", error);\n        throw error;\n    }\n}\nasync function getDoctorServices(clinicId, doctorId) {\n    try {\n        // Validar se clinicId e doctorId foram fornecidos\n        if (!clinicId) {\n            throw new Error(\"Clinic ID é obrigatório.\");\n        }\n        if (!doctorId) {\n            throw new Error(\"Doctor ID é obrigatório.\");\n        }\n        // Criar a referência correta para o documento do médico\n        const doctorRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", clinicId, \"doctors\", doctorId);\n        const doctorSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(doctorRef);\n        if (!doctorSnap.exists()) {\n            throw new Error(`Médico não encontrado no posto de saúde: ${clinicId}`);\n        }\n        const doctorData = doctorSnap.data();\n        return doctorData?.services || [];\n    } catch (error) {\n        console.error(\"Erro ao buscar serviços do médico:\", error);\n        throw error;\n    }\n}\nasync function addDoctorServices(clinicId, doctorId, services) {\n    try {\n        if (!clinicId || !doctorId) {\n            throw new Error(\"Clinic ID e Doctor ID são obrigatórios.\");\n        }\n        // Criar a referência correta para o documento do médico\n        const doctorRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", clinicId, \"doctors\", doctorId);\n        // Verificar se o documento do médico existe\n        const doctorSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(doctorRef);\n        if (!doctorSnap.exists()) {\n            throw new Error(`Médico não encontrado no posto de saúde: ${clinicId}`);\n        }\n        // Atualizar os serviços do médico\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(doctorRef, {\n            services\n        }, {\n            merge: true\n        });\n        console.log(\"Serviços atualizados com sucesso para o médico:\", doctorId);\n    } catch (error) {\n        console.error(\"Erro ao adicionar serviços para o médico:\", error);\n        throw error;\n    }\n}\nasync function removeDoctorService(clinicId, doctorId, service) {\n    try {\n        if (!clinicId || !doctorId) {\n            throw new Error(\"Clinic ID e Doctor ID são obrigatórios.\");\n        }\n        // Criar a referência correta para o documento do médico\n        const doctorRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", clinicId, \"doctors\", doctorId);\n        // Remover o serviço do médico\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(doctorRef, {\n            services: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.arrayRemove)(service)\n        });\n        console.log(\"Serviço removido com sucesso do médico:\", doctorId);\n    } catch (error) {\n        console.error(\"Erro ao remover serviço do médico:\", error);\n        throw error;\n    }\n}\n// Consultations Collection\nasync function getConsultations(clinicId, doctorId) {\n    let q;\n    if (doctorId && clinicId) {\n        // Filtrar por clínica e médico, sem ordenação\n        q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(consultationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"doctorId\", \"==\", doctorId));\n    } else if (doctorId) {\n        // Filtrar apenas por médico\n        q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(consultationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"doctorId\", \"==\", doctorId));\n    } else if (clinicId) {\n        // Filtrar apenas por clínica\n        q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(consultationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId));\n    } else {\n        // Sem filtros\n        q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(consultationsRef);\n    }\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    return snapshot.docs.map((doc)=>{\n        const data = doc.data();\n        const date = data.date instanceof firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp ? data.date.toDate() : new Date(data.date);\n        return {\n            id: doc.id,\n            consultationId: data.id,\n            ...data,\n            date: date,\n            formattedDate: (0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__.format)(date, \"dd/MM/yyyy HH:mm\")\n        };\n    }).sort((a, b)=>b.date.getTime() - a.date.getTime()) // Sort in memory\n    ;\n}\n// Função para buscar todas as consultas de um médico específico\nasync function getConsultationsByDoctor(doctorId, clinicId) {\n    let q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(consultationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"doctorId\", \"==\", doctorId));\n    if (clinicId) {\n        q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(q, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId));\n    }\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    return snapshot.docs.map((doc)=>{\n        const data = doc.data();\n        const date = data.date instanceof firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp ? data.date.toDate() : new Date(data.date);\n        return {\n            id: doc.id,\n            ...data,\n            date: date\n        };\n    });\n}\n// Adicione esta função helper\nfunction cleanFirestoreData(data) {\n    const clean = {};\n    Object.keys(data).forEach((key)=>{\n        if (data[key] !== undefined && data[key] !== null) {\n            clean[key] = data[key];\n        }\n    });\n    return clean;\n}\n// Atualize a função addConsultation\nasync function addConsultation(consultationData) {\n    try {\n        const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(db);\n        // Create consultation document\n        const consultationRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(consultationsRef);\n        const dateTime = new Date(`${consultationData.date}T${consultationData.time}`);\n        // Create appointment record with cleaned data\n        const appointmentRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(appointmentsRef);\n        const appointmentData = cleanFirestoreData({\n            type: 'consultation',\n            consultationId: consultationRef.id,\n            clinicId: consultationData.clinicId,\n            doctorId: consultationData.doctorId || null,\n            patientName: consultationData.patientName,\n            date: dateTime,\n            duration: 30,\n            status: 'Agendado',\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        });\n        const cleanedConsultationData = cleanFirestoreData({\n            ...consultationData,\n            date: dateTime,\n            appointmentId: appointmentRef.id,\n            status: 'Agendado',\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        });\n        batch.set(consultationRef, cleanedConsultationData);\n        batch.set(appointmentRef, appointmentData);\n        await batch.commit();\n        return {\n            consultationId: consultationRef.id,\n            appointmentId: appointmentRef.id\n        };\n    } catch (error) {\n        console.error(\"Error adding consultation:\", error);\n        throw error;\n    }\n}\nasync function updateConsultationStatus(consultationId, newStatus) {\n    const consultationRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(consultationsRef, consultationId);\n    return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(consultationRef, {\n        status: newStatus,\n        updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n    });\n}\n// Exams Collection\nasync function getExams(clinicId, doctorId) {\n    let q;\n    if (doctorId && clinicId) {\n        // Filtrar por clínica e médico, sem ordenação\n        q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(examsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"doctorId\", \"==\", doctorId));\n    } else if (doctorId) {\n        // Filtrar apenas por médico\n        q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(examsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"doctorId\", \"==\", doctorId));\n    } else if (clinicId) {\n        // Filtrar apenas por clínica\n        q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(examsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId));\n    } else {\n        // Sem filtros\n        q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(examsRef);\n    }\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    return snapshot.docs.map((doc)=>{\n        const data = doc.data();\n        const date = data.date instanceof firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp ? data.date.toDate() : new Date(data.date);\n        return {\n            id: doc.id,\n            examId: data.id,\n            ...data,\n            date: date,\n            formattedDate: (0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__.format)(date, \"dd/MM/yyyy HH:mm\")\n        };\n    }).sort((a, b)=>b.date.getTime() - a.date.getTime()) // Sort in memory\n    ;\n}\nasync function addExam(examData) {\n    try {\n        const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(db);\n        if (!examData.date || !examData.time) {\n            throw new Error(\"Date and time are required\");\n        }\n        // Create proper date object\n        const [hours, minutes] = examData.time.split(':').map(Number);\n        const examDate = new Date(examData.date);\n        examDate.setHours(hours, minutes, 0, 0);\n        // Clean data before saving\n        const cleanedExamData = cleanFirestoreData({\n            ...examData,\n            doctorId: null,\n            date: examDate,\n            status: 'scheduled',\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        });\n        // Create exam document\n        const examRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(examsRef);\n        // Create appointment with cleaned data\n        const appointmentRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(appointmentsRef);\n        const appointmentData = cleanFirestoreData({\n            type: 'exam',\n            examId: examRef.id,\n            clinicId: examData.clinicId,\n            doctorId: null,\n            patientName: examData.patientName,\n            date: examDate,\n            duration: 30,\n            status: 'scheduled',\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        });\n        // Set both documents\n        batch.set(examRef, {\n            ...cleanedExamData,\n            appointmentId: appointmentRef.id\n        });\n        batch.set(appointmentRef, appointmentData);\n        await batch.commit();\n        return {\n            examId: examRef.id,\n            appointmentId: appointmentRef.id,\n            date: examDate\n        };\n    } catch (error) {\n        console.error(\"Error adding exam:\", error);\n        throw error;\n    }\n}\nasync function updateExamStatus(examId, newStatus) {\n    const examRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"exams\", examId);\n    return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(examRef, {\n        status: newStatus\n    });\n}\n// Exam Types Collection\nasync function getExamTypes(clinicId) {\n    try {\n        // Verificar se a clínica existe\n        const clinicDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", clinicId));\n        if (!clinicDoc.exists()) {\n            console.error(\"Clínica não encontrada:\", clinicId);\n            return [];\n        }\n        // Obter tipos de exame da clínica\n        const clinicData = clinicDoc.data();\n        const examTypes = clinicData.examTypes || [\n            \"Sangue\",\n            \"Raio X\",\n            \"Ultrassom\",\n            \"Ressonância\",\n            \"Tomografia\",\n            \"Eletrocardiograma\",\n            \"Endoscopia\"\n        ];\n        return examTypes;\n    } catch (error) {\n        console.error(\"Erro ao buscar tipos de exame:\", error);\n        return [\n            \"Sangue\",\n            \"Raio X\",\n            \"Ultrassom\",\n            \"Ressonância\",\n            \"Tomografia\",\n            \"Eletrocardiograma\",\n            \"Endoscopia\"\n        ];\n    }\n}\n// Função para adicionar tipo de exame\nasync function addExamType(clinicId, examTypeData) {\n    try {\n        // Verificar se a clínica existe\n        const clinicRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", clinicId);\n        const clinicSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(clinicRef);\n        if (!clinicSnap.exists()) {\n            throw new Error(\"Clínica não encontrada\");\n        }\n        // Criar uma referência para a coleção de tipos de exame\n        const examTypesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"examTypes\");\n        // Adicionar metadados\n        const examTypeWithMetadata = {\n            ...examTypeData,\n            clinicId,\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)(),\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        };\n        // Adicionar o tipo de exame\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)(examTypesRef, examTypeWithMetadata);\n        // Atualizar a clínica com o ID do tipo de exame\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(clinicRef, {\n            examTypeIds: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.arrayUnion)(docRef.id)\n        });\n        return {\n            id: docRef.id,\n            ...examTypeWithMetadata\n        };\n    } catch (error) {\n        console.error(\"Erro ao adicionar tipo de exame:\", error);\n        throw error;\n    }\n}\n// Função para obter tipos de exame de uma clínica\nasync function getExamTypesByClinic(clinicId) {\n    try {\n        const examTypesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"examTypes\");\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(examTypesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.orderBy)(\"createdAt\", \"desc\"));\n        const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n        return snapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n    } catch (error) {\n        console.error(\"Erro ao buscar tipos de exame:\", error);\n        throw error;\n    }\n}\n// Função para atualizar tipo de exame\nasync function updateExamType(examTypeId, examTypeData) {\n    try {\n        const examTypeRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"examTypes\", examTypeId);\n        // Adicionar metadados\n        const updateData = {\n            ...examTypeData,\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        };\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(examTypeRef, updateData);\n        return {\n            id: examTypeId,\n            ...updateData\n        };\n    } catch (error) {\n        console.error(\"Erro ao atualizar tipo de exame:\", error);\n        throw error;\n    }\n}\n// Função para excluir tipo de exame\nasync function deleteExamType(examTypeId, clinicId) {\n    try {\n        // Verificar se o tipo de exame está sendo usado em algum exame\n        const examsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"exams\");\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(examsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"examTypeId\", \"==\", examTypeId));\n        const examsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n        if (!examsSnapshot.empty) {\n            throw new Error(\"Não é possível excluir este tipo de exame pois ele está sendo usado em exames.\");\n        }\n        // Excluir o tipo de exame\n        const examTypeRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"examTypes\", examTypeId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.deleteDoc)(examTypeRef);\n        // Atualizar a clínica removendo o ID do tipo de exame\n        const clinicRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", clinicId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(clinicRef, {\n            examTypeIds: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.arrayRemove)(examTypeId)\n        });\n        return true;\n    } catch (error) {\n        console.error(\"Erro ao excluir tipo de exame:\", error);\n        throw error;\n    }\n}\nasync function removeExamType(clinicId, examType) {\n    const clinicRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", clinicId);\n    return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(clinicRef, {\n        examTypes: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.arrayRemove)(examType)\n    });\n}\n// Função para adicionar serviço médico\nasync function addDoctorService(doctorId, serviceData) {\n    try {\n        // Verificar se o médico existe\n        const doctorRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"doctors\", doctorId);\n        const doctorSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(doctorRef);\n        if (!doctorSnap.exists()) {\n            throw new Error(\"Médico não encontrado\");\n        }\n        // Criar uma referência para a coleção de serviços médicos\n        const servicesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"medicalServices\");\n        // Adicionar metadados\n        const serviceWithMetadata = {\n            ...serviceData,\n            doctorId,\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)(),\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        };\n        // Adicionar o serviço médico\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)(servicesRef, serviceWithMetadata);\n        // Atualizar o médico com o ID do serviço\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(doctorRef, {\n            serviceIds: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.arrayUnion)(docRef.id)\n        });\n        return {\n            id: docRef.id,\n            ...serviceWithMetadata\n        };\n    } catch (error) {\n        console.error(\"Erro ao adicionar serviço médico:\", error);\n        throw error;\n    }\n}\n// Função para obter serviços médicos de um médico\nasync function getDoctorServicesByDoctor(doctorId) {\n    try {\n        const servicesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"medicalServices\");\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(servicesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"doctorId\", \"==\", doctorId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.orderBy)(\"createdAt\", \"desc\"));\n        const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n        return snapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n    } catch (error) {\n        console.error(\"Erro ao buscar serviços médicos:\", error);\n        throw error;\n    }\n}\n// Função para atualizar serviço médico\nasync function updateDoctorService(serviceId, serviceData) {\n    try {\n        const serviceRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"medicalServices\", serviceId);\n        // Adicionar metadados\n        const updateData = {\n            ...serviceData,\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        };\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(serviceRef, updateData);\n        return {\n            id: serviceId,\n            ...updateData\n        };\n    } catch (error) {\n        console.error(\"Erro ao atualizar serviço médico:\", error);\n        throw error;\n    }\n}\n// Função para excluir serviço médico\nasync function deleteDoctorService(serviceId, doctorId) {\n    try {\n        // Verificar se o serviço está sendo usado em alguma consulta\n        const consultationsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"consultations\");\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(consultationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"serviceId\", \"==\", serviceId));\n        const consultationsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n        if (!consultationsSnapshot.empty) {\n            throw new Error(\"Não é possível excluir este serviço pois ele está sendo usado em consultas.\");\n        }\n        // Excluir o serviço médico\n        const serviceRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"medicalServices\", serviceId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.deleteDoc)(serviceRef);\n        // Atualizar o médico removendo o ID do serviço\n        const doctorRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"doctors\", doctorId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(doctorRef, {\n            serviceIds: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.arrayRemove)(serviceId)\n        });\n        return true;\n    } catch (error) {\n        console.error(\"Erro ao excluir serviço médico:\", error);\n        throw error;\n    }\n}\n// Dashboard Data\nasync function getDashboardData(clinicId) {\n    const [consultationsSnapshot, examsSnapshot, doctorsSnapshot] = await Promise.all([\n        (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(consultationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId))),\n        (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(examsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId))),\n        (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(getDoctorsRef(clinicId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.orderBy)(\"createdAt\", \"desc\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.limit)(5)))\n    ]);\n    const consultations = consultationsSnapshot.docs.map((doc)=>doc.data());\n    const exams = examsSnapshot.docs.map((doc)=>doc.data());\n    const doctors = doctorsSnapshot.docs.map((doc)=>({\n            id: doc.id,\n            ...doc.data()\n        }));\n    // Contagem de status das consultas\n    const consultationStatuses = consultations.reduce((acc, consultation)=>{\n        acc[consultation.status] = (acc[consultation.status] || 0) + 1;\n        return acc;\n    }, {});\n    // Contagem de status dos exames\n    const examStatuses = exams.reduce((acc, exam)=>{\n        acc[exam.status] = (acc[exam.status] || 0) + 1;\n        return acc;\n    }, {});\n    // Agendamentos para hoje\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const todayConsultations = consultations.filter((consultation)=>{\n        const consultationDate = new Date(consultation.date.seconds * 1000);\n        consultationDate.setHours(0, 0, 0, 0);\n        return consultationDate.getTime() === today.getTime();\n    });\n    const todayExams = exams.filter((exam)=>{\n        const examDate = new Date(exam.date.seconds * 1000);\n        examDate.setHours(0, 0, 0, 0);\n        return examDate.getTime() === today.getTime();\n    });\n    return {\n        totalDoctors: doctorsSnapshot.size,\n        totalConsultations: consultationsSnapshot.size,\n        totalExams: examsSnapshot.size,\n        completedConsultations: consultationStatuses.Concluída || 0,\n        completedExams: examStatuses.Concluído || 0,\n        consultationStatuses,\n        examStatuses,\n        todayConsultations,\n        todayExams,\n        recentDoctors: doctors\n    };\n}\n// File Upload Helper\nasync function uploadFile(file, path) {\n    const storageRef = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_2__.ref)(storage, path);\n    await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_2__.uploadBytes)(storageRef, file);\n    return (0,firebase_storage__WEBPACK_IMPORTED_MODULE_2__.getDownloadURL)(storageRef);\n}\n// Adicione esta função ao arquivo lib/firebase.ts\n// Patients Collection\nasync function addPatient(patientData) {\n    try {\n        const usersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"users\");\n        // Adicionar metadados\n        const patientWithMetadata = {\n            ...patientData,\n            type: \"patient\",\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)(),\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        };\n        // Adicionar o paciente\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)(usersRef, patientWithMetadata);\n        return {\n            id: docRef.id,\n            ...patientWithMetadata\n        };\n    } catch (error) {\n        console.error(\"Erro ao adicionar paciente:\", error);\n        throw error;\n    }\n}\n/**\n * Busca todos os usuários do tipo \"patient\" de um posto de saúde específico\n * @param clinicId ID do posto de saúde\n * @returns Array de pacientes\n */ async function getPatientsByClinic(clinicId) {\n    try {\n        const usersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"users\");\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(usersRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"type\", \"==\", \"patient\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n        const patients = querySnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n        return patients;\n    } catch (error) {\n        console.error(\"Erro ao buscar pacientes:\", error);\n        throw error;\n    }\n}\n/**\n * Busca todos os usuários do tipo \"patient\"\n * @returns Array de pacientes\n */ async function getAllPatients() {\n    try {\n        const usersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"users\");\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(usersRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"type\", \"==\", \"patient\"));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n        const patients = querySnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n        return patients;\n    } catch (error) {\n        console.error(\"Erro ao buscar pacientes:\", error);\n        throw error;\n    }\n}\n/**\n * Busca as consultas e exames de um paciente específico\n * @param patientId ID do paciente\n * @returns Objeto com consultas e exames do paciente\n */ async function getPatientAppointments(patientId) {\n    try {\n        // Buscar consultas\n        const consultationsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"consultations\");\n        const consultationsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(consultationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"patientId\", \"==\", patientId));\n        // Buscar exames\n        const examsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"exams\");\n        const examsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(examsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"patientId\", \"==\", patientId));\n        // Executar as consultas em paralelo\n        const [consultationsSnapshot, examsSnapshot] = await Promise.all([\n            (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(consultationsQuery),\n            (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(examsQuery)\n        ]);\n        // Processar resultados\n        const consultations = consultationsSnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data(),\n                date: doc.data().date?.toDate() || new Date()\n            }));\n        const exams = examsSnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data(),\n                date: doc.data().date?.toDate() || new Date()\n            }));\n        return {\n            consultations,\n            exams\n        };\n    } catch (error) {\n        console.error(\"Erro ao buscar agendamentos do paciente:\", error);\n        throw error;\n    }\n}\n// Funções para buscar dados específicos de um posto\nasync function getDoctorsByClinic(clinicId) {\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(getDoctorsRef(clinicId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.orderBy)(\"createdAt\", \"desc\"));\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    return snapshot.docs.map((doc)=>({\n            id: doc.id,\n            ...doc.data()\n        }));\n}\nasync function getConsultationsByClinic(clinicId, startDate, endDate) {\n    let q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(consultationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId));\n    if (startDate) {\n        const startTimestamp = firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(startDate);\n        q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(q, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"date\", \">=\", startTimestamp));\n    }\n    if (endDate) {\n        const endOfDay = new Date(endDate);\n        endOfDay.setHours(23, 59, 59, 999);\n        const endTimestamp = firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(endOfDay);\n        q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(q, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"date\", \"<=\", endTimestamp));\n    }\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    return snapshot.docs.map((doc)=>{\n        const data = doc.data();\n        const date = data.date instanceof firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp ? data.date.toDate() : new Date(data.date);\n        return {\n            id: doc.id,\n            ...data,\n            date: date\n        };\n    });\n}\nasync function getExamsByClinic(clinicId, startDate, endDate) {\n    let q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(examsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId));\n    if (startDate) {\n        const startTimestamp = firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(startDate);\n        q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(q, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"date\", \">=\", startTimestamp));\n    }\n    if (endDate) {\n        const endOfDay = new Date(endDate);\n        endOfDay.setHours(23, 59, 59, 999);\n        const endTimestamp = firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(endOfDay);\n        q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(q, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"date\", \"<=\", endTimestamp));\n    }\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    return snapshot.docs.map((doc)=>{\n        const data = doc.data();\n        const date = data.date instanceof firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp ? data.date.toDate() : new Date(data.date);\n        return {\n            id: doc.id,\n            ...data,\n            date: date\n        };\n    });\n}\n// Atualize a função sendMassNotification\n// Função para enviar notificação em massa\nasync function sendMassNotification(notificationData) {\n    try {\n        // Validar dados de entrada\n        if (!notificationData.title || !notificationData.message) {\n            throw new Error(\"Título e mensagem são obrigatórios\");\n        }\n        // Buscar os destinatários\n        let recipientQuery;\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(\"Usuário não autenticado\");\n        }\n        // Obter informações do usuário atual\n        const userDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"users\", currentUser.uid));\n        if (!userDoc.exists()) {\n            throw new Error(\"Dados do usuário não encontrados\");\n        }\n        const userData = userDoc.data();\n        const senderClinicId = userData?.clinicId;\n        if (notificationData.sendToAll) {\n            // Se for para todos, buscar todos os pacientes\n            recipientQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"users\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"type\", \"==\", \"patient\"));\n        } else if (notificationData.clinicId) {\n            // Se for para um posto específico, buscar pacientes desse posto\n            recipientQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"users\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"type\", \"==\", \"patient\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", notificationData.clinicId));\n        } else if (senderClinicId) {\n            // Se não especificou clinicId mas o usuário tem um posto, usar o posto do usuário\n            recipientQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"users\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"type\", \"==\", \"patient\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", senderClinicId));\n        } else {\n            // Se não tiver clinicId e não for para todos, não enviar\n            throw new Error(\"É necessário especificar um posto de saúde ou selecionar 'Enviar para todos'\");\n        }\n        const recipientsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(recipientQuery);\n        const recipients = recipientsSnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n        if (recipients.length === 0) {\n            throw new Error(\"Nenhum destinatário encontrado para os critérios selecionados\");\n        }\n        // Criar um documento na coleção de notificações\n        const notificationRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"notifications\"), {\n            ...notificationData,\n            createdAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.now(),\n            status: \"sent\",\n            recipientCount: recipients.length,\n            sentBy: currentUser.uid,\n            senderName: currentUser.displayName || \"Sistema\",\n            senderClinicId: senderClinicId || null\n        });\n        // Criar notificações individuais para cada destinatário\n        const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(db);\n        // Preparar o envio de emails\n        const emailPromises = [];\n        for (const recipient of recipients){\n            if (!recipient.email) {\n                console.warn(`Recipient with ID ${recipient.id} does not have an email address.`);\n                continue; // Skip recipients without an email\n            }\n            // Adicionar notificação individual\n            const userNotificationRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"userNotifications\"));\n            batch.set(userNotificationRef, {\n                userId: recipient.id,\n                notificationId: notificationRef.id,\n                title: notificationData.title,\n                message: notificationData.message,\n                type: notificationData.type,\n                createdAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.now(),\n                read: false\n            });\n            // Se o destinatário tiver email, agendar envio de email\n            emailPromises.push(sendEmail(recipient.email, `Notificação: ${notificationData.title}`, `${notificationData.message}\n\nEsta é uma mensagem automática do sistema de saúde.`));\n        }\n        // Executar o batch de notificações\n        await batch.commit();\n        // Aguardar o agendamento de todos os emails\n        await Promise.all(emailPromises);\n        console.log(`Notification sent: ${notificationRef.id} to ${recipients.length} recipients`);\n        return notificationRef;\n    } catch (error) {\n        console.error(\"Error sending notification:\", error);\n        throw error;\n    }\n}\n// Adicione esta função para enviar email\nasync function sendEmail(to, subject, body) {\n    try {\n        // Criar um documento na coleção de emails para processamento posterior\n        // (Um Cloud Function seria responsável por monitorar esta coleção e enviar os emails)\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"emails\"), {\n            to,\n            subject,\n            body,\n            createdAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.now(),\n            status: \"pending\"\n        });\n        return true;\n    } catch (error) {\n        console.error(\"Erro ao agendar envio de email:\", error);\n        return false;\n    }\n}\n// Função para obter todas as notificações\nasync function getNotifications() {\n    const notificationsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"notifications\");\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(notificationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.orderBy)(\"createdAt\", \"desc\"));\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    return snapshot.docs.map((doc)=>({\n            id: doc.id,\n            ...doc.data(),\n            createdAt: doc.data().createdAt instanceof firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp ? doc.data().createdAt.toDate() : new Date(doc.data().createdAt)\n        }));\n}\n// Função para obter os tipos de notificação\nasync function getNotificationTypes() {\n    const typesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"notificationTypes\");\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(typesRef);\n    return snapshot.docs.map((doc)=>({\n            id: doc.id,\n            ...doc.data()\n        }));\n}\n// Função para adicionar um novo tipo de notificação\nasync function addNotificationType(data) {\n    return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"notificationTypes\"), {\n        ...data,\n        createdAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.now()\n    });\n}\n// Função para excluir um tipo de notificação\nasync function deleteNotificationType(typeId) {\n    const typeRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"notificationTypes\", typeId);\n    return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.deleteDoc)(typeRef);\n}\n// Função para buscar notificações do usuário\nasync function getUserNotifications(userId) {\n    try {\n        // Verificar se userId é válido\n        if (!userId) {\n            console.warn(\"getUserNotifications chamada com userId indefinido\");\n            return [];\n        }\n        const userNotificationsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"userNotifications\");\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(userNotificationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"userId\", \"==\", userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.orderBy)(\"createdAt\", \"desc\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.limit)(20));\n        const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n        return snapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data(),\n                createdAt: doc.data().createdAt instanceof firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp ? doc.data().createdAt.toDate() : new Date(doc.data().createdAt)\n            }));\n    } catch (error) {\n        console.error(\"Erro ao buscar notificações do usuário:\", error);\n        return [];\n    }\n}\n// Função para marcar uma notificação como lida - corrigida para validar o ID\nasync function markNotificationAsRead(notificationId) {\n    try {\n        if (!notificationId) {\n            throw new Error(\"ID de notificação inválido\");\n        }\n        const notificationRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"userNotifications\", notificationId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(notificationRef, {\n            read: true\n        });\n        return true;\n    } catch (error) {\n        console.error(\"Erro ao marcar notificação como lida:\", error);\n        throw error;\n    }\n}\n// Função para contar notificações não lidas - corrigida para lidar com userId undefined\nasync function countUnreadNotifications(userId) {\n    try {\n        // Verificar se userId é válido\n        if (!userId) {\n            console.warn(\"countUnreadNotifications chamada com userId indefinido\");\n            return 0;\n        }\n        const userNotificationsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"userNotifications\");\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(userNotificationsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"userId\", \"==\", userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"read\", \"==\", false));\n        const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n        return snapshot.size;\n    } catch (error) {\n        console.error(\"Erro ao contar notificações não lidas:\", error);\n        return 0;\n    }\n}\nasync function getClinicById(clinicId) {\n    try {\n        const clinicRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", clinicId);\n        const clinicSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(clinicRef);\n        if (clinicSnap.exists()) {\n            return {\n                id: clinicSnap.id,\n                ...clinicSnap.data()\n            };\n        } else {\n            console.warn(\"No such document!\");\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Error getting document:\", error);\n        throw error;\n    }\n}\nasync function getDoctorById(doctorId, clinicId) {\n    try {\n        const doctorRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(getDoctorsRef(clinicId), doctorId);\n        const doctorSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(doctorRef);\n        if (doctorSnap.exists()) {\n            return {\n                id: doctorSnap.id,\n                clinicId,\n                ...doctorSnap.data()\n            };\n        } else {\n            console.warn(\"No such document!\");\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Error getting document:\", error);\n        throw error;\n    }\n}\nasync function getAppointments(clinicId, doctorId, startDate, endDate) {\n    try {\n        let q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(appointmentsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId));\n        if (doctorId) {\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(q, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"doctorId\", \"==\", doctorId));\n        }\n        if (startDate) {\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(q, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"date\", \">=\", startDate));\n        }\n        if (endDate) {\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(q, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"date\", \"<=\", endDate));\n        }\n        const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n        return snapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data(),\n                date: doc.data().date.toDate()\n            }));\n    } catch (error) {\n        console.error(\"Error getting appointments:\", error);\n        throw error;\n    }\n}\nasync function saveActivity(user, activityData) {\n    try {\n        if (!user || !user.clinicId) {\n            throw new Error(\"Usuário ou posto de saúde não configurado corretamente.\");\n        }\n        const clinicActivitiesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"clinics\", user.clinicId), \"activities\");\n        // Caso o usuário seja admin ou receptionist\n        if (user.type === \"admin\" || user.type === \"receptionist\") {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)(clinicActivitiesRef, {\n                ...activityData,\n                createdBy: user.uid,\n                createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n            });\n            console.log(\"Atividade salva no posto de saúde.\");\n        } else if (user.type === \"doctor\" || user.type === \"nurse\") {\n            const userActivitiesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"users\", user.uid), \"activities\");\n            // Salvar no posto de saúde\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)(clinicActivitiesRef, {\n                ...activityData,\n                createdBy: user.uid,\n                createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n            });\n            // Salvar no perfil do usuário\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)(userActivitiesRef, {\n                ...activityData,\n                createdBy: user.uid,\n                createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n            });\n            console.log(\"Atividade salva no posto de saúde e no perfil do usuário.\");\n        } else {\n            throw new Error(\"Tipo de usuário não suportado para salvar atividades.\");\n        }\n    } catch (error) {\n        console.error(\"Erro ao salvar atividade:\", error);\n        throw error;\n    }\n}\nfunction removeUndefinedFields(data) {\n    return Object.fromEntries(Object.entries(data).filter(([_, value])=>value !== undefined));\n}\nconst schedulesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, 'funcionamento');\nasync function saveSchedule(clinicId, schedule) {\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(schedulesRef, clinicId), {\n        clinicId,\n        ...schedule,\n        updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n    });\n}\nasync function getClinicSchedule(clinicId) {\n    const scheduleDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(schedulesRef, clinicId));\n    return scheduleDoc.exists() ? scheduleDoc.data() : null;\n}\nasync function updateExamDate(examId, newDate) {\n    try {\n        const examRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, 'exams', examId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(examRef, {\n            date: firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(newDate),\n            formattedDate: (0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__.format)(newDate, \"dd/MM/yyyy HH:mm\", {\n                locale: date_fns_locale__WEBPACK_IMPORTED_MODULE_6__.ptBR\n            })\n        });\n    } catch (error) {\n        console.error('Error updating exam date:', error);\n        throw error;\n    }\n}\nasync function addExamAppointment(clinicId, examData) {\n    try {\n        // Create reference to clinic's appointments subcollection\n        const appointmentsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, `clinics/${clinicId}/appointments`);\n        const appointmentDoc = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(appointmentsRef);\n        // Add exam data to appointments subcollection\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(appointmentDoc, {\n            ...examData,\n            id: appointmentDoc.id,\n            createdAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.now(),\n            updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.now(),\n            type: 'exam',\n            status: 'Agendado'\n        });\n        return appointmentDoc.id;\n    } catch (error) {\n        console.error('Error adding exam appointment:', error);\n        throw error;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVU5USx1REFBR0EsQ0FBQzhDLElBQUksU0FBU3lOO1FBQ2pDLE1BQU10USw2REFBU0EsQ0FBQzZRLFNBQVM7WUFDdkIzSSxNQUFNaEkseURBQVNBLENBQUNpTixRQUFRLENBQUNvTDtZQUN6QnpKLGVBQWV6Tiw2R0FBTUEsQ0FBQ2tYLFNBQVMsb0JBQW9CO2dCQUFFcFIsUUFBUTFGLGlEQUFJQTtZQUFDO1FBQ3BFO0lBQ0YsRUFBRSxPQUFPcUUsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsNkJBQTZCQTtRQUMzQyxNQUFNQTtJQUNSO0FBQ0Y7QUFFTyxlQUFlMFMsbUJBQW1CbFYsUUFBZ0IsRUFBRWtOLFFBQWE7SUFDdEUsSUFBSTtRQUNGLDBEQUEwRDtRQUMxRCxNQUFNcE4sa0JBQWtCMUQsOERBQVVBLENBQUNtRCxJQUFJLENBQUMsUUFBUSxFQUFFUyxTQUFTLGFBQWEsQ0FBQztRQUN6RSxNQUFNbVYsaUJBQWlCMVksdURBQUdBLENBQUNxRDtRQUUzQiw4Q0FBOEM7UUFDOUMsTUFBTWhELDBEQUFNQSxDQUFDcVksZ0JBQWdCO1lBQzNCLEdBQUdqSSxRQUFRO1lBQ1gvRyxJQUFJZ1AsZUFBZWhQLEVBQUU7WUFDckJQLFdBQVdoSix5REFBU0EsQ0FBQzJNLEdBQUc7WUFDeEIxRCxXQUFXakoseURBQVNBLENBQUMyTSxHQUFHO1lBQ3hCL0YsTUFBTTtZQUNOa0osUUFBUTtRQUNWO1FBRUEsT0FBT3lJLGVBQWVoUCxFQUFFO0lBQzFCLEVBQUUsT0FBTzNELE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLGtDQUFrQ0E7UUFDaEQsTUFBTUE7SUFDUjtBQUNGO0FBRWEiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcemVyb1xcRG93bmxvYWRzXFxoZWFsdGhjYXJlLWRhc2hib2FyZFxcbGliXFxmaXJlYmFzZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbml0aWFsaXplQXBwLCBnZXRBcHBzIH0gZnJvbSBcImZpcmViYXNlL2FwcFwiXG5pbXBvcnQge1xuICBnZXRGaXJlc3RvcmUsXG4gIGNvbGxlY3Rpb24sXG4gIHF1ZXJ5LFxuICB3aGVyZSxcbiAgb3JkZXJCeSxcbiAgZ2V0RG9jcyxcbiAgZG9jLFxuICB1cGRhdGVEb2MsXG4gIGFkZERvYyxcbiAgVGltZXN0YW1wLFxuICBnZXREb2MsXG4gIHNldERvYyxcbiAgbGltaXQsXG4gIGFycmF5VW5pb24sXG4gIGFycmF5UmVtb3ZlLFxuICBkZWxldGVEb2MsXG4gIHdyaXRlQmF0Y2gsXG4gIHNlcnZlclRpbWVzdGFtcCxcbn0gZnJvbSBcImZpcmViYXNlL2ZpcmVzdG9yZVwiXG5pbXBvcnQgeyBnZXRTdG9yYWdlLCByZWYsIHVwbG9hZEJ5dGVzLCBnZXREb3dubG9hZFVSTCB9IGZyb20gXCJmaXJlYmFzZS9zdG9yYWdlXCJcbmltcG9ydCB7XG4gIGdldEF1dGgsXG4gIGNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCxcbiAgc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQsXG4gIHVwZGF0ZVByb2ZpbGUsXG4gIHVwZGF0ZVBhc3N3b3JkLFxuICBzaWduT3V0LFxufSBmcm9tIFwiZmlyZWJhc2UvYXV0aFwiXG5pbXBvcnQgeyBmb3JtYXQsIGFkZE1pbnV0ZXMsIHN0YXJ0T2ZEYXksIGVuZE9mRGF5IH0gZnJvbSBcImRhdGUtZm5zXCJcbmltcG9ydCB7IGdldE5leHRFeGFtSWQgfSBmcm9tIFwiLi91dGlsc1wiXG5pbXBvcnQgeyBwdEJSIH0gZnJvbSBcImRhdGUtZm5zL2xvY2FsZVwiXG5pbXBvcnQgeyBnZXRGdW5jdGlvbnMsIGh0dHBzQ2FsbGFibGUgfSBmcm9tIFwiZmlyZWJhc2UvZnVuY3Rpb25zXCI7IC8vIEFkZCB0aGlzIGltcG9ydCBmb3IgSVAgcmV0cmlldmFsXG5pbXBvcnQgeyBsb2dVc2VyQWN0aXZpdHkgfSBmcm9tIFwiLi91c2VyLWFjdGl2aXR5XCI7XG5pbXBvcnQgdHlwZSB7IENsaW5pY0RhdGEgfSBmcm9tIFwiQC90eXBlcy9jbGluaWNcIlxuXG5jb25zdCBmaXJlYmFzZUNvbmZpZyA9IHtcbiAgYXBpS2V5OiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19GSVJFQkFTRV9BUElfS0VZLFxuICBhdXRoRG9tYWluOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19GSVJFQkFTRV9BVVRIX0RPTUFJTixcbiAgcHJvamVjdElkOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19GSVJFQkFTRV9QUk9KRUNUX0lELFxuICBzdG9yYWdlQnVja2V0OiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19GSVJFQkFTRV9TVE9SQUdFX0JVQ0tFVCxcbiAgbWVzc2FnaW5nU2VuZGVySWQ6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0ZJUkVCQVNFX01FU1NBR0lOR19TRU5ERVJfSUQsXG4gIGFwcElkOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19GSVJFQkFTRV9BUFBfSUQsXG4gIG1lYXN1cmVtZW50SWQ6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0ZJUkVCQVNFX01FQVNVUkVNRU5UX0lELFxufVxuXG4vLyBJbml0aWFsaXplIEZpcmViYXNlXG5sZXQgYXBwXG5pZiAoIWdldEFwcHMoKS5sZW5ndGgpIHtcbiAgYXBwID0gaW5pdGlhbGl6ZUFwcChmaXJlYmFzZUNvbmZpZylcbn0gZWxzZSB7XG4gIGFwcCA9IGdldEFwcHMoKVswXSAvLyBpZiBhbHJlYWR5IGluaXRpYWxpemVkLCB1c2UgdGhhdCBvbmVcbn1cblxuY29uc3QgZGIgPSBnZXRGaXJlc3RvcmUoYXBwKVxuY29uc3Qgc3RvcmFnZSA9IGdldFN0b3JhZ2UoYXBwKVxuZXhwb3J0IGNvbnN0IGF1dGggPSBnZXRBdXRoKGFwcClcblxuY29uc3QgY29uc3VsdGF0aW9uc1JlZiA9IGNvbGxlY3Rpb24oZGIsIFwiY29uc3VsdGF0aW9uc1wiKVxuY29uc3QgZXhhbXNSZWYgPSBjb2xsZWN0aW9uKGRiLCBcImV4YW1zXCIpXG5jb25zdCBjbGluaWNzUmVmID0gY29sbGVjdGlvbihkYiwgXCJjbGluaWNzXCIpXG5jb25zdCB1c2Vyc1JlZiA9IGNvbGxlY3Rpb24oZGIsIFwidXNlcnNcIilcbmNvbnN0IGFwcG9pbnRtZW50c1JlZiA9IGNvbGxlY3Rpb24oZGIsIFwiYXBwb2ludG1lbnRzXCIpXG5cbi8vIFVwZGF0ZSBkb2N0b3JzUmVmIHRvIGJlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjb3JyZWN0IHN1YmNvbGxlY3Rpb24gcmVmZXJlbmNlXG5jb25zdCBnZXREb2N0b3JzUmVmID0gKGNsaW5pY0lkOiBzdHJpbmcpID0+IGNvbGxlY3Rpb24oZG9jKGRiLCBcImNsaW5pY3NcIiwgY2xpbmljSWQpLCBcImRvY3RvcnNcIik7XG5cbi8vIEFkZCBoZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHVzZXJzIHN1YmNvbGxlY3Rpb24gcmVmZXJlbmNlXG5jb25zdCBnZXRDbGluaWNVc2Vyc1JlZiA9IChjbGluaWNJZDogc3RyaW5nKSA9PiBjb2xsZWN0aW9uKGRvYyhkYiwgXCJjbGluaWNzXCIsIGNsaW5pY0lkKSwgXCJ1c2Vyc1wiKTtcblxuLy8gQWRkIHRoaXMgZnVuY3Rpb24gbmVhciB0aGUgdG9wIHdpdGggb3RoZXIgdXRpbGl0eSBmdW5jdGlvbnNcbmZ1bmN0aW9uIGdlbmVyYXRlU3Ryb25nUGFzc3dvcmQobGVuZ3RoID0gMTIpIHtcbiAgY29uc3QgdXBwZXJjYXNlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJztcbiAgY29uc3QgbG93ZXJjYXNlID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JztcbiAgY29uc3QgbnVtYmVycyA9ICcwMTIzNDU2Nzg5JztcbiAgY29uc3Qgc3ltYm9scyA9ICchQCMkJV4mKigpXystPVtde318OzosLjw+Pyc7XG4gIFxuICBjb25zdCBhbGxDaGFycyA9IHVwcGVyY2FzZSArIGxvd2VyY2FzZSArIG51bWJlcnMgKyBzeW1ib2xzO1xuICBsZXQgcGFzc3dvcmQgPSAnJztcbiAgXG4gIC8vIEVuc3VyZSBhdCBsZWFzdCBvbmUgb2YgZWFjaCB0eXBlXG4gIHBhc3N3b3JkICs9IHVwcGVyY2FzZVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB1cHBlcmNhc2UubGVuZ3RoKV07XG4gIHBhc3N3b3JkICs9IGxvd2VyY2FzZVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBsb3dlcmNhc2UubGVuZ3RoKV07XG4gIHBhc3N3b3JkICs9IG51bWJlcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbnVtYmVycy5sZW5ndGgpXTtcbiAgcGFzc3dvcmQgKz0gc3ltYm9sc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzeW1ib2xzLmxlbmd0aCldO1xuICBcbiAgLy8gRmlsbCB0aGUgcmVzdFxuICBmb3IgKGxldCBpID0gcGFzc3dvcmQubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBwYXNzd29yZCArPSBhbGxDaGFyc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhbGxDaGFycy5sZW5ndGgpXTtcbiAgfVxuICBcbiAgLy8gU2h1ZmZsZSB0aGUgcGFzc3dvcmRcbiAgcmV0dXJuIHBhc3N3b3JkLnNwbGl0KCcnKS5zb3J0KCgpID0+IE1hdGgucmFuZG9tKCkgLSAwLjUpLmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVVuaXF1ZUlkKGxlbmd0aDogbnVtYmVyID0gMjApOiBzdHJpbmcge1xuICBjb25zdCBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSc7XG4gIGxldCByZXN1bHQgPSAnJztcbiAgY29uc3QgcmFuZG9tVmFsdWVzID0gbmV3IFVpbnQzMkFycmF5KGxlbmd0aCk7XG4gIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMocmFuZG9tVmFsdWVzKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdCArPSBjaGFycy5jaGFyQXQocmFuZG9tVmFsdWVzW2ldICUgY2hhcnMubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVRpbWVTbG90cyhzdGFydDogc3RyaW5nLCBlbmQ6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzbG90cyA9IFtdO1xuICAgIGNvbnN0IFtzdGFydEhvdXIsIHN0YXJ0TWludXRlXSA9IHN0YXJ0LnNwbGl0KCc6JykubWFwKE51bWJlcik7XG4gICAgY29uc3QgW2VuZEhvdXIsIGVuZE1pbnV0ZV0gPSBlbmQuc3BsaXQoJzonKS5tYXAoTnVtYmVyKTtcblxuICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgc3RhcnREYXRlLnNldEhvdXJzKHN0YXJ0SG91ciwgc3RhcnRNaW51dGUsIDAsIDApO1xuXG4gICAgY29uc3QgZW5kRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgZW5kRGF0ZS5zZXRIb3VycyhlbmRIb3VyLCBlbmRNaW51dGUsIDAsIDApO1xuXG4gICAgbGV0IGN1cnJlbnRTbG90ID0gc3RhcnREYXRlO1xuICAgIHdoaWxlIChjdXJyZW50U2xvdCA8IGVuZERhdGUpIHtcbiAgICAgIHNsb3RzLnB1c2goZm9ybWF0KGN1cnJlbnRTbG90LCAnSEg6bW0nKSk7XG4gICAgICBjdXJyZW50U2xvdCA9IGFkZE1pbnV0ZXMoY3VycmVudFNsb3QsIDMwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2xvdHM7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdlbmVyYXRpbmcgdGltZSBzbG90czpcIiwgZXJyb3IpO1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgVGltZVNsb3Qge1xuICB0aW1lOiBzdHJpbmc7XG4gIGlzQXZhaWxhYmxlOiBib29sZWFuO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZURhaWx5VGltZVNsb3RzKHN0YXJ0OiBzdHJpbmcsIGVuZDogc3RyaW5nKTogVGltZVNsb3RbXSB7XG4gIGNvbnN0IHNsb3RzOiBUaW1lU2xvdFtdID0gW107XG4gIGNvbnN0IFtzdGFydEhvdXIsIHN0YXJ0TWludXRlXSA9IHN0YXJ0LnNwbGl0KCc6JykubWFwKE51bWJlcik7XG4gIGNvbnN0IFtlbmRIb3VyLCBlbmRNaW51dGVdID0gZW5kLnNwbGl0KCc6JykubWFwKE51bWJlcik7XG5cbiAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUoKTtcbiAgc3RhcnREYXRlLnNldEhvdXJzKHN0YXJ0SG91ciwgc3RhcnRNaW51dGUsIDAsIDApO1xuXG4gIGNvbnN0IGVuZERhdGUgPSBuZXcgRGF0ZSgpO1xuICBlbmREYXRlLnNldEhvdXJzKGVuZEhvdXIsIGVuZE1pbnV0ZSwgMCwgMCk7XG5cbiAgbGV0IGN1cnJlbnRTbG90ID0gc3RhcnREYXRlO1xuICB3aGlsZSAoY3VycmVudFNsb3QgPCBlbmREYXRlKSB7XG4gICAgc2xvdHMucHVzaCh7XG4gICAgICB0aW1lOiBmb3JtYXQoY3VycmVudFNsb3QsICdISDptbScpLFxuICAgICAgaXNBdmFpbGFibGU6IHRydWVcbiAgICB9KTtcbiAgICBjdXJyZW50U2xvdCA9IGFkZE1pbnV0ZXMoY3VycmVudFNsb3QsIDMwKTtcbiAgfVxuXG4gIHJldHVybiBzbG90cztcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0Q2xpbmljV29ya2luZ0hvdXJzKGNsaW5pY0lkOiBzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBjbGluaWNSZWYgPSBkb2MoZGIsIFwiY2xpbmljc1wiLCBjbGluaWNJZCk7XG4gICAgY29uc3QgY2xpbmljRG9jID0gYXdhaXQgZ2V0RG9jKGNsaW5pY1JlZik7XG4gICAgXG4gICAgaWYgKCFjbGluaWNEb2MuZXhpc3RzKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNsaW5pYyBub3QgZm91bmRcIik7XG4gICAgfVxuXG4gICAgY29uc3QgY2xpbmljRGF0YSA9IGNsaW5pY0RvYy5kYXRhKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdvcmtpbmdIb3VyczogY2xpbmljRGF0YS53b3JraW5nSG91cnMgfHwgeyBzdGFydDogXCIwODowMFwiLCBlbmQ6IFwiMTg6MDBcIiB9LFxuICAgICAgd29ya2luZ0RheXM6IGNsaW5pY0RhdGEud29ya2luZ0RheXMgfHwgW1xuICAgICAgICBcInNlZ3VuZGFcIixcbiAgICAgICAgXCJ0ZXJjYVwiLFxuICAgICAgICBcInF1YXJ0YVwiLFxuICAgICAgICBcInF1aW50YVwiLFxuICAgICAgICBcInNleHRhXCJcbiAgICAgIF1cbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBnZXR0aW5nIGNsaW5pYyB3b3JraW5nIGhvdXJzOlwiLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEF2YWlsYWJsZVRpbWVTbG90cyhcbiAgY2xpbmljSWQ6IHN0cmluZywgXG4gIHNlbGVjdGVkRGF0ZTogRGF0ZSwgXG4gIHR5cGU6IHN0cmluZywgXG4gIGRvY3RvcklkPzogc3RyaW5nXG4pIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBjbGluaWNSZWYgPSBkb2MoZGIsIFwiY2xpbmljc1wiLCBjbGluaWNJZCk7XG4gICAgY29uc3QgY2xpbmljRG9jID0gYXdhaXQgZ2V0RG9jKGNsaW5pY1JlZik7XG5cbiAgICBpZiAoIWNsaW5pY0RvYy5leGlzdHMoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2xpbmljIG5vdCBmb3VuZFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBjbGluaWNEYXRhID0gY2xpbmljRG9jLmRhdGEoKTtcbiAgICBjb25zdCBzY2hlZHVsZSA9IGNsaW5pY0RhdGEuc2NoZWR1bGUgfHwge1xuICAgICAgd29ya2luZ0RheXM6IFtcInNlZ3VuZGFcIiwgXCJ0ZXJjYVwiLCBcInF1YXJ0YVwiLCBcInF1aW50YVwiLCBcInNleHRhXCJdLFxuICAgICAgd29ya2luZ0hvdXJzOiB7IHN0YXJ0OiBcIjA4OjAwXCIsIGVuZDogXCIxODowMFwiIH0sXG4gICAgICBkZWZhdWx0VGltZVNsb3RzOiBnZW5lcmF0ZURhaWx5VGltZVNsb3RzKFwiMDg6MDBcIiwgXCIxODowMFwiKVxuICAgIH07XG4gICAgXG4gICAgLy8gQ2hlY2sgaWYgc2VsZWN0ZWQgZGF0ZSBpcyBhIHdvcmtpbmcgZGF5XG4gICAgY29uc3Qgd2Vla0RheSA9IGZvcm1hdChzZWxlY3RlZERhdGUsICdFRUVFJywgeyBsb2NhbGU6IHB0QlIgfSlcbiAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAubm9ybWFsaXplKFwiTkZEXCIpXG4gICAgICAucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgXCJcIik7XG5cbiAgICBpZiAoIXNjaGVkdWxlLndvcmtpbmdEYXlzLmluY2x1ZGVzKHdlZWtEYXkpKSB7XG4gICAgICBjb25zb2xlLmxvZyhgJHt3ZWVrRGF5fSBpcyBub3QgYSB3b3JraW5nIGRheWApO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8vIFVzZSBhIHNpbmdsZSBxdWVyeSB3aXRoIGRhdGUgcmFuZ2VcbiAgICBjb25zdCBzdGFydFRpbWUgPSBzdGFydE9mRGF5KHNlbGVjdGVkRGF0ZSk7XG4gICAgY29uc3QgZW5kVGltZSA9IGVuZE9mRGF5KHNlbGVjdGVkRGF0ZSk7XG5cbiAgICAvLyBCYXNlIHF1ZXJ5IHdpdGggcmVxdWlyZWQgaW5kZXhcbiAgICBsZXQgYXBwb2ludG1lbnRzUXVlcnkgPSBxdWVyeShcbiAgICAgIGFwcG9pbnRtZW50c1JlZixcbiAgICAgIHdoZXJlKFwiY2xpbmljSWRcIiwgXCI9PVwiLCBjbGluaWNJZCksXG4gICAgICB3aGVyZShcImRhdGVcIiwgXCI+PVwiLCBzdGFydFRpbWUpXG4gICAgKTtcblxuICAgIC8vIEFkZCBkb2N0b3IgZmlsdGVyIGlmIHByb3ZpZGVkXG4gICAgaWYgKGRvY3RvcklkKSB7XG4gICAgICAvLyBOb3RlOiBUaGlzIHJlcXVpcmVzIGEgY29tcG9zaXRlIGluZGV4IG9uIChjbGluaWNJZCwgZG9jdG9ySWQsIGRhdGUpXG4gICAgICBhcHBvaW50bWVudHNRdWVyeSA9IHF1ZXJ5KFxuICAgICAgICBhcHBvaW50bWVudHNSZWYsXG4gICAgICAgIHdoZXJlKFwiY2xpbmljSWRcIiwgXCI9PVwiLCBjbGluaWNJZCksXG4gICAgICAgIHdoZXJlKFwiZG9jdG9ySWRcIiwgXCI9PVwiLCBkb2N0b3JJZCksXG4gICAgICAgIHdoZXJlKFwiZGF0ZVwiLCBcIj49XCIsIHN0YXJ0VGltZSksXG4gICAgICAgIHdoZXJlKFwiZGF0ZVwiLCBcIjw9XCIsIGVuZFRpbWUpXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGFwcG9pbnRtZW50cyA9IGF3YWl0IGdldERvY3MoYXBwb2ludG1lbnRzUXVlcnkpO1xuICAgIFxuICAgIC8vIEZpbHRlciBhcHBvaW50bWVudHMgd2l0aGluIHRoZSBkYXkgY2xpZW50LXNpZGVcbiAgICBjb25zdCBib29rZWRTbG90cyA9IG5ldyBTZXQoXG4gICAgICBhcHBvaW50bWVudHMuZG9jc1xuICAgICAgICAuZmlsdGVyKGRvYyA9PiB7XG4gICAgICAgICAgY29uc3QgYXBwb2ludG1lbnREYXRlID0gZG9jLmRhdGEoKS5kYXRlLnRvRGF0ZSgpO1xuICAgICAgICAgIHJldHVybiBhcHBvaW50bWVudERhdGUgPj0gc3RhcnRUaW1lICYmIGFwcG9pbnRtZW50RGF0ZSA8PSBlbmRUaW1lO1xuICAgICAgICB9KVxuICAgICAgICAubWFwKGRvYyA9PiBmb3JtYXQoZG9jLmRhdGEoKS5kYXRlLnRvRGF0ZSgpLCAnSEg6bW0nKSlcbiAgICApO1xuXG4gICAgY29uc3QgZGVmYXVsdFNsb3RzID0gc2NoZWR1bGUuZGVmYXVsdFRpbWVTbG90cyB8fCBnZW5lcmF0ZURhaWx5VGltZVNsb3RzKFxuICAgICAgc2NoZWR1bGUud29ya2luZ0hvdXJzLnN0YXJ0LFxuICAgICAgc2NoZWR1bGUud29ya2luZ0hvdXJzLmVuZFxuICAgICk7XG5cbiAgICByZXR1cm4gZGVmYXVsdFNsb3RzXG4gICAgICAuZmlsdGVyKChzbG90OiBUaW1lU2xvdCkgPT4gIWJvb2tlZFNsb3RzLmhhcyhzbG90LnRpbWUpKVxuICAgICAgLm1hcCgoc2xvdDogVGltZVNsb3QpID0+IHNsb3QudGltZSk7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2V0dGluZyBhdmFpbGFibGUgc2xvdHM6XCIsIGVycm9yKTtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cblxuLy8gQXV0aCBmdW5jdGlvbnNcbmV4cG9ydCBjb25zdCByZWdpc3RlciA9IGFzeW5jIChkYXRhOiBhbnkpID0+IHtcbiAgY29uc3QgeyBuYW1lLCBzdXMsIHBhc3N3b3JkLCB0eXBlLCBjbGluaWNJZCB9ID0gZGF0YTtcbiAgaWYgKCFjbGluaWNJZCkgdGhyb3cgbmV3IEVycm9yKFwiY2xpbmljSWQgaXMgcmVxdWlyZWQgZm9yIHJlZ2lzdHJhdGlvblwiKTtcblxuICAvLyBHZW5lcmF0ZSBzdHJvbmcgcGFzc3dvcmQgaWYgbm9uZSBwcm92aWRlZFxuICBjb25zdCBzdHJvbmdQYXNzd29yZCA9IHBhc3N3b3JkIHx8IGdlbmVyYXRlU3Ryb25nUGFzc3dvcmQoMTYpO1xuXG4gIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkKGF1dGgsIHN1cywgc3Ryb25nUGFzc3dvcmQpO1xuICBjb25zdCB1c2VyID0gdXNlckNyZWRlbnRpYWwudXNlcjtcblxuICBhd2FpdCB1cGRhdGVQcm9maWxlKHVzZXIsIHsgZGlzcGxheU5hbWU6IG5hbWUgfSk7XG5cbiAgLy8gU2F2ZSB1c2VyIGluIGJvdGggZ2xvYmFsIHVzZXJzIGFuZCBjbGluaWMncyB1c2VycyBzdWJjb2xsZWN0aW9uXG4gIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICBzZXREb2MoZG9jKGRiLCBcInVzZXJzXCIsIHVzZXIudWlkKSwge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGVtYWlsOiBzdXMsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgY2xpbmljSWQ6IGNsaW5pY0lkLFxuICAgIH0pLFxuICAgIHNldERvYyhkb2MoZ2V0Q2xpbmljVXNlcnNSZWYoY2xpbmljSWQpLCB1c2VyLnVpZCksIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBlbWFpbDogc3VzLFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIHVpZDogdXNlci51aWQsXG4gICAgICBjcmVhdGVkQXQ6IHNlcnZlclRpbWVzdGFtcCgpLFxuICAgICAgdXBkYXRlZEF0OiBzZXJ2ZXJUaW1lc3RhbXAoKSxcbiAgICB9KVxuICBdKTtcblxuICByZXR1cm4geyBcbiAgICAuLi51c2VyLCBcbiAgICB0ZW1wb3JhcnlQYXNzd29yZDogcGFzc3dvcmQgPyB1bmRlZmluZWQgOiBzdHJvbmdQYXNzd29yZCBcbiAgfTtcbn1cblxuLy8gRmlyc3QsIGNyZWF0ZSB0aGUgYWRtaW4gdXNlciBpbiByb290IHVzZXJzIGNvbGxlY3Rpb25cbmNvbnN0IGNyZWF0ZUFkbWluVXNlciA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgYWRtaW5EYXRhID0ge1xuICAgIG5hbWU6IFwiTWF0ZXVzIEhlbnJpcXVlIFZpZWlyYVwiLFxuICAgIGVtYWlsOiBcInNhbnRhbmFtYXRldXM4OTc5QGdtYWlsLmNvbVwiLFxuICAgIHR5cGU6IFwiYWRtaW5cIixcbiAgICBjbGluaWNJZDogXCJ6aWpvOVV6ZkJwblhNUTRIZnI2YlwiLFxuICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoXCIyMDI1LTAzLTA3VDExOjUxOjI4LjE5OVpcIikudG9JU09TdHJpbmcoKSxcbiAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKFwiMjAyNS0wNC0wN1QyMTozNjoyMC0wMzowMFwiKS50b0lTT1N0cmluZygpLFxuICAgIGlkOiBcIk5aZ3NxRUlEalhTSUJmTUVVYXVBQVJ0UUk0RjJcIlxuICB9O1xuXG4gIGF3YWl0IHNldERvYyhkb2MoZGIsIFwidXNlcnNcIiwgYWRtaW5EYXRhLmlkKSwgYWRtaW5EYXRhKTtcbn07XG5cbi8vIENhbGwgdGhpcyBvbmNlIHRvIGNyZWF0ZSB0aGUgYWRtaW4gdXNlclxuLy8gY3JlYXRlQWRtaW5Vc2VyKCk7XG5cbmV4cG9ydCBjb25zdCBsb2dpbiA9IGFzeW5jIChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1c2VyQ3JlZGVudGlhbCA9IGF3YWl0IHNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkKGF1dGgsIGVtYWlsLCBwYXNzd29yZCk7XG4gICAgY29uc3Qgcm9vdFVzZXJEb2MgPSBhd2FpdCBnZXREb2MoZG9jKGRiLCBcInVzZXJzXCIsIHVzZXJDcmVkZW50aWFsLnVzZXIudWlkKSk7XG5cbiAgICBpZiAocm9vdFVzZXJEb2MuZXhpc3RzKCkpIHtcbiAgICAgIGNvbnN0IHVzZXJEYXRhID0gcm9vdFVzZXJEb2MuZGF0YSgpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IHVzZXJDcmVkZW50aWFsLnVzZXIudWlkLCAvLyBFbnN1cmUgdGhlIElEIGlzIGluY2x1ZGVkXG4gICAgICAgIC4uLnVzZXJEYXRhLFxuICAgICAgICBjbGluaWNOYW1lOiB1c2VyRGF0YS5jbGluaWNJZFxuICAgICAgICAgID8gKGF3YWl0IGdldERvYyhkb2MoZGIsIFwiY2xpbmljc1wiLCB1c2VyRGF0YS5jbGluaWNJZCkpKS5kYXRhKCk/Lm5hbWVcbiAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNBZG1pbjogZW1haWwgPT09IFwic2FudGFuYW1hdGV1czg5NzlAZ21haWwuY29tXCIsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihcIlVzdcOhcmlvIG7Do28gZW5jb250cmFkb1wiKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiTG9naW4gZXJyb3I6XCIsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGxvZ291dCA9IGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBhd2FpdCBzaWduT3V0KGF1dGgpO1xuICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpOyAvLyBDbGVhciBhbGwgbG9jYWwgc3RvcmFnZVxuICAgIHNlc3Npb25TdG9yYWdlLmNsZWFyKCk7IC8vIENsZWFyIGFsbCBzZXNzaW9uIHN0b3JhZ2VcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiTG9nb3V0IGVycm9yOlwiLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbi8vIFVzZXJzIENvbGxlY3Rpb25cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VycygpIHtcbiAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBnZXREb2NzKHF1ZXJ5KHVzZXJzUmVmKSlcbiAgcmV0dXJuIHNuYXBzaG90LmRvY3MubWFwKChkb2MpID0+ICh7XG4gICAgaWQ6IGRvYy5pZCxcbiAgICAuLi5kb2MuZGF0YSgpLFxuICB9KSlcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZFVzZXIodXNlckRhdGE6IGFueSkge1xuICBjb25zdCB7IG5hbWUsIGVtYWlsLCBwYXNzd29yZCwgdHlwZSwgY2xpbmljSWQgfSA9IHVzZXJEYXRhXG4gIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkKGF1dGgsIGVtYWlsLCBwYXNzd29yZClcbiAgY29uc3QgdXNlciA9IHVzZXJDcmVkZW50aWFsLnVzZXJcblxuICBhd2FpdCB1cGRhdGVQcm9maWxlKHVzZXIsIHsgZGlzcGxheU5hbWU6IG5hbWUgfSlcblxuICByZXR1cm4gc2V0RG9jKGRvYyhkYiwgXCJ1c2Vyc1wiLCB1c2VyLnVpZCksIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIGVtYWlsOiBlbWFpbCxcbiAgICB0eXBlOiB0eXBlLFxuICAgIGNsaW5pY0lkOiBjbGluaWNJZCxcbiAgfSlcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVVzZXIodXNlcklkOiBzdHJpbmcsIHVzZXJEYXRhOiBhbnksIG5ld0NsaW5pY0lkOiBzdHJpbmcpIHtcbiAgY29uc3QgZ2xvYmFsVXNlclJlZiA9IGRvYyhkYiwgXCJ1c2Vyc1wiLCB1c2VySWQpO1xuICBjb25zdCBnbG9iYWxVc2VyRG9jID0gYXdhaXQgZ2V0RG9jKGdsb2JhbFVzZXJSZWYpO1xuICBcbiAgaWYgKCFnbG9iYWxVc2VyRG9jLmV4aXN0cygpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVXN1w6FyaW8gbsOjbyBlbmNvbnRyYWRvXCIpO1xuICB9XG5cbiAgY29uc3QgY3VycmVudFVzZXJEYXRhID0gZ2xvYmFsVXNlckRvYy5kYXRhKCk7XG4gIGNvbnN0IG9sZENsaW5pY0lkID0gY3VycmVudFVzZXJEYXRhLmNsaW5pY0lkO1xuXG4gIC8vIElmIGNsaW5pYyBpcyBjaGFuZ2luZywgaGFuZGxlIHRoZSB0cmFuc2ZlclxuICBpZiAob2xkQ2xpbmljSWQgIT09IG5ld0NsaW5pY0lkKSB7XG4gICAgY29uc3QgYmF0Y2ggPSB3cml0ZUJhdGNoKGRiKTtcblxuICAgIC8vIFJlbW92ZSBmcm9tIG9sZCBjbGluaWNcbiAgICBpZiAob2xkQ2xpbmljSWQpIHtcbiAgICAgIGNvbnN0IG9sZENsaW5pY1VzZXJSZWYgPSBkb2MoZ2V0Q2xpbmljVXNlcnNSZWYob2xkQ2xpbmljSWQpLCB1c2VySWQpO1xuICAgICAgYmF0Y2guZGVsZXRlKG9sZENsaW5pY1VzZXJSZWYpO1xuICAgIH1cblxuICAgIC8vIEFkZCB0byBuZXcgY2xpbmljXG4gICAgY29uc3QgbmV3Q2xpbmljVXNlclJlZiA9IGRvYyhnZXRDbGluaWNVc2Vyc1JlZihuZXdDbGluaWNJZCksIHVzZXJJZCk7XG4gICAgYmF0Y2guc2V0KG5ld0NsaW5pY1VzZXJSZWYsIHtcbiAgICAgIC4uLmN1cnJlbnRVc2VyRGF0YSxcbiAgICAgIC4uLnVzZXJEYXRhLFxuICAgICAgY2xpbmljSWQ6IG5ld0NsaW5pY0lkLFxuICAgICAgdXBkYXRlZEF0OiBzZXJ2ZXJUaW1lc3RhbXAoKVxuICAgIH0pO1xuXG4gICAgLy8gVXBkYXRlIGdsb2JhbCB1c2VyIHJlY29yZFxuICAgIGJhdGNoLnVwZGF0ZShnbG9iYWxVc2VyUmVmLCB7XG4gICAgICAuLi51c2VyRGF0YSxcbiAgICAgIGNsaW5pY0lkOiBuZXdDbGluaWNJZCxcbiAgICAgIHVwZGF0ZWRBdDogc2VydmVyVGltZXN0YW1wKClcbiAgICB9KTtcblxuICAgIC8vIElmIHVzZXIgaXMgYSBkb2N0b3IsIG1vdmUgZG9jdG9yIGRvY3VtZW50IHRvIG5ldyBjbGluaWNcbiAgICBpZiAoY3VycmVudFVzZXJEYXRhLnR5cGUgPT09IFwiZG9jdG9yXCIgJiYgY3VycmVudFVzZXJEYXRhLmRvY3RvcklkKSB7XG4gICAgICBjb25zdCBvbGREb2N0b3JSZWYgPSBkb2MoZ2V0RG9jdG9yc1JlZihvbGRDbGluaWNJZCksIGN1cnJlbnRVc2VyRGF0YS5kb2N0b3JJZCk7XG4gICAgICBjb25zdCBvbGREb2N0b3JEb2MgPSBhd2FpdCBnZXREb2Mob2xkRG9jdG9yUmVmKTtcblxuICAgICAgaWYgKG9sZERvY3RvckRvYy5leGlzdHMoKSkge1xuICAgICAgICBjb25zdCBkb2N0b3JEYXRhID0gb2xkRG9jdG9yRG9jLmRhdGEoKTtcbiAgICAgICAgLy8gQ3JlYXRlIGRvY3RvciBpbiBuZXcgY2xpbmljXG4gICAgICAgIGNvbnN0IG5ld0RvY3RvclJlZiA9IGRvYyhnZXREb2N0b3JzUmVmKG5ld0NsaW5pY0lkKSwgY3VycmVudFVzZXJEYXRhLmRvY3RvcklkKTtcbiAgICAgICAgYmF0Y2guc2V0KG5ld0RvY3RvclJlZiwge1xuICAgICAgICAgIC4uLmRvY3RvckRhdGEsXG4gICAgICAgICAgY2xpbmljSWQ6IG5ld0NsaW5pY0lkLFxuICAgICAgICAgIHVwZGF0ZWRBdDogc2VydmVyVGltZXN0YW1wKClcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIERlbGV0ZSBmcm9tIG9sZCBjbGluaWNcbiAgICAgICAgYmF0Y2guZGVsZXRlKG9sZERvY3RvclJlZik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRXhlY3V0ZSBhbGwgb3BlcmF0aW9uc1xuICAgIGF3YWl0IGJhdGNoLmNvbW1pdCgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIGNsaW5pYyBpc24ndCBjaGFuZ2luZywganVzdCB1cGRhdGUgdGhlIHVzZXIgZGF0YVxuICAgIGNvbnN0IGNsaW5pY1VzZXJSZWYgPSBkb2MoZ2V0Q2xpbmljVXNlcnNSZWYobmV3Q2xpbmljSWQpLCB1c2VySWQpO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIHVwZGF0ZURvYyhnbG9iYWxVc2VyUmVmLCB7XG4gICAgICAgIC4uLnVzZXJEYXRhLFxuICAgICAgICB1cGRhdGVkQXQ6IHNlcnZlclRpbWVzdGFtcCgpXG4gICAgICB9KSxcbiAgICAgIHVwZGF0ZURvYyhjbGluaWNVc2VyUmVmLCB7XG4gICAgICAgIC4uLnVzZXJEYXRhLFxuICAgICAgICB1cGRhdGVkQXQ6IHNlcnZlclRpbWVzdGFtcCgpXG4gICAgICB9KVxuICAgIF0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVVc2VyUHJvZmlsZSh1c2VySWQ6IHN0cmluZywgZGF0YTogYW55LCBjbGluaWNJZDogc3RyaW5nKSB7XG4gIGlmICghY2xpbmljSWQpIHRocm93IG5ldyBFcnJvcihcImNsaW5pY0lkIGlzIHJlcXVpcmVkXCIpO1xuICBcbiAgY29uc3QgdXNlclJlZiA9IGRvYyhnZXRDbGluaWNVc2Vyc1JlZihjbGluaWNJZCksIHVzZXJJZCk7XG4gIGNvbnN0IHVzZXJEb2MgPSBhd2FpdCBnZXREb2ModXNlclJlZik7XG4gIFxuICBpZiAoIXVzZXJEb2MuZXhpc3RzKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVc3XDoXJpbyBuw6NvIGVuY29udHJhZG8gbm8gcG9zdG8gZGUgc2HDumRlXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVwZGF0ZURvYyh1c2VyUmVmLCB7XG4gICAgLi4uZGF0YSxcbiAgICB1cGRhdGVkQXQ6IHNlcnZlclRpbWVzdGFtcCgpXG4gIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlVXNlclBhc3N3b3JkKGN1cnJlbnRQYXNzd29yZDogc3RyaW5nLCBuZXdQYXNzd29yZDogc3RyaW5nKSB7XG4gIGNvbnN0IHVzZXIgPSBhdXRoLmN1cnJlbnRVc2VyXG4gIGlmICghdXNlcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHVzZXIgaXMgY3VycmVudGx5IGxvZ2dlZCBpbi5cIilcbiAgfVxuXG4gIC8vIFRoaXMgaXMgYSBwbGFjZWhvbGRlci4gSW4gYSByZWFsIGFwcGxpY2F0aW9uLCB5b3Ugd291bGQgbmVlZCB0byByZS1hdXRoZW50aWNhdGUgdGhlIHVzZXJcbiAgLy8gYmVmb3JlIGFsbG93aW5nIHRoZW0gdG8gY2hhbmdlIHRoZWlyIHBhc3N3b3JkLiBUaGlzIHVzdWFsbHkgaW52b2x2ZXMgcHJvbXB0aW5nIHRoZW0gZm9yIHRoZWlyXG4gIC8vIGN1cnJlbnQgcGFzc3dvcmQgYW5kIHZlcmlmeWluZyBpdCBhZ2FpbnN0IHRoZSBzdG9yZWQgY3JlZGVudGlhbHMuXG5cbiAgcmV0dXJuIHVwZGF0ZVBhc3N3b3JkKHVzZXIsIG5ld1Bhc3N3b3JkKVxufVxuXG4vLyBBZGljaW9uYXIgYSBmdW7Dp8OjbyBkZWxldGVVc2VyIGFww7NzIGEgZnVuw6fDo28gdXBkYXRlVXNlclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZVVzZXIodXNlcklkOiBzdHJpbmcsIGNsaW5pY0lkOiBzdHJpbmcpIHtcbiAgaWYgKCFjbGluaWNJZCkgdGhyb3cgbmV3IEVycm9yKFwiY2xpbmljSWQgaXMgcmVxdWlyZWRcIik7XG5cbiAgY29uc3QgdXNlclJlZiA9IGRvYyhnZXRDbGluaWNVc2Vyc1JlZihjbGluaWNJZCksIHVzZXJJZCk7XG4gIGNvbnN0IHVzZXJEb2MgPSBhd2FpdCBnZXREb2ModXNlclJlZik7XG5cbiAgaWYgKCF1c2VyRG9jLmV4aXN0cygpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVXN1w6FyaW8gbsOjbyBlbmNvbnRyYWRvIG5vIHBvc3RvIGRlIHNhw7pkZVwiKTtcbiAgfVxuXG4gIGNvbnN0IHVzZXJEYXRhID0gdXNlckRvYy5kYXRhKCk7XG5cbiAgaWYgKHVzZXJEYXRhPy5kb2N0b3JJZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk7Do28gw6kgcG9zc8OtdmVsIGV4Y2x1aXIgZXN0ZSB1c3XDoXJpbyBwb2lzIGVsZSBlc3TDoSBhc3NvY2lhZG8gYSB1bSBtw6lkaWNvLlwiKTtcbiAgfVxuXG4gIC8vIFZlcmlmaWNhciBzZSBvIHVzdcOhcmlvIHRlbSBjb25zdWx0YXMgb3UgZXhhbWVzIGFzc29jaWFkb3NcbiAgY29uc3QgW2NvbnN1bHRhdGlvbnNTbmFwc2hvdCwgZXhhbXNTbmFwc2hvdF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgZ2V0RG9jcyhxdWVyeShjb25zdWx0YXRpb25zUmVmLCB3aGVyZShcInVzZXJJZFwiLCBcIj09XCIsIHVzZXJJZCkpKSxcbiAgICBnZXREb2NzKHF1ZXJ5KGV4YW1zUmVmLCB3aGVyZShcInVzZXJJZFwiLCBcIj09XCIsIHVzZXJJZCkpKSxcbiAgXSlcblxuICBpZiAoIWNvbnN1bHRhdGlvbnNTbmFwc2hvdC5lbXB0eSB8fCAhZXhhbXNTbmFwc2hvdC5lbXB0eSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk7Do28gw6kgcG9zc8OtdmVsIGV4Y2x1aXIgZXN0ZSB1c3XDoXJpbyBwb2lzIGV4aXN0ZW0gY29uc3VsdGFzIG91IGV4YW1lcyBhc3NvY2lhZG9zIGEgZWxlLlwiKVxuICB9XG5cbiAgLy8gU2UgbsOjbyBob3V2ZXIgcmVnaXN0cm9zIGFzc29jaWFkb3MsIGV4Y2x1aXIgbyB1c3XDoXJpb1xuICByZXR1cm4gZGVsZXRlRG9jKHVzZXJSZWYpXG59XG5cbi8vIEZ1bsOnw7VlcyBwYXJhIGJ1c2NhciBkYWRvcyBlc3BlY8OtZmljb3MgZGUgdW0gdXN1w6FyaW9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VyRGV0YWlscyh1c2VySWQ6IHN0cmluZywgY2xpbmljSWQ/OiBzdHJpbmcpIHtcbiAgLy8gRmlyc3QgdHJ5IHRvIGdldCBmcm9tIGdsb2JhbCB1c2VycyBjb2xsZWN0aW9uXG4gIGNvbnN0IGdsb2JhbFVzZXJSZWYgPSBkb2MoZGIsIFwidXNlcnNcIiwgdXNlcklkKTtcbiAgY29uc3QgZ2xvYmFsVXNlckRvYyA9IGF3YWl0IGdldERvYyhnbG9iYWxVc2VyUmVmKTtcblxuICBpZiAoZ2xvYmFsVXNlckRvYy5leGlzdHMoKSkge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogZ2xvYmFsVXNlckRvYy5pZCxcbiAgICAgIGNsaW5pY0lkOiBnbG9iYWxVc2VyRG9jLmRhdGEoKS5jbGluaWNJZCxcbiAgICAgIC4uLmdsb2JhbFVzZXJEb2MuZGF0YSgpXG4gICAgfTtcbiAgfVxuXG4gIC8vIElmIG5vdCBmb3VuZCBnbG9iYWxseSBhbmQgY2xpbmljSWQgaXMgcHJvdmlkZWQsIHRyeSBjbGluaWMncyB1c2VycyBjb2xsZWN0aW9uXG4gIGlmIChjbGluaWNJZCkge1xuICAgIGNvbnN0IHVzZXJSZWYgPSBkb2MoZ2V0Q2xpbmljVXNlcnNSZWYoY2xpbmljSWQpLCB1c2VySWQpO1xuICAgIGNvbnN0IHVzZXJEb2MgPSBhd2FpdCBnZXREb2ModXNlclJlZik7XG5cbiAgICBpZiAodXNlckRvYy5leGlzdHMoKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IHVzZXJEb2MuaWQsXG4gICAgICAgIGNsaW5pY0lkLFxuICAgICAgICAuLi51c2VyRG9jLmRhdGEoKVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoXCJVc3XDoXJpbyBuw6NvIGVuY29udHJhZG9cIik7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDb25zdWx0YXRpb25zQnlVc2VyKHVzZXJJZDogc3RyaW5nKSB7XG4gIGNvbnN0IHEgPSBxdWVyeShjb25zdWx0YXRpb25zUmVmLCB3aGVyZShcInVzZXJJZFwiLCBcIj09XCIsIHVzZXJJZCkpXG4gIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhxKVxuXG4gIHJldHVybiBzbmFwc2hvdC5kb2NzLm1hcCgoZG9jKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IGRvYy5kYXRhKClcbiAgICBjb25zdCBkYXRlID0gZGF0YS5kYXRlIGluc3RhbmNlb2YgVGltZXN0YW1wID8gZGF0YS5kYXRlLnRvRGF0ZSgpIDogbmV3IERhdGUoZGF0YS5kYXRlKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBkb2MuaWQsXG4gICAgICAuLi5kYXRhLFxuICAgICAgZGF0ZTogZGF0ZSxcbiAgICB9XG4gIH0pXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRFeGFtc0J5VXNlcih1c2VySWQ6IHN0cmluZykge1xuICBjb25zdCBxID0gcXVlcnkoZXhhbXNSZWYsIHdoZXJlKFwidXNlcklkXCIsIFwiPT1cIiwgdXNlcklkKSlcbiAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBnZXREb2NzKHEpXG5cbiAgcmV0dXJuIHNuYXBzaG90LmRvY3MubWFwKChkb2MpID0+IHtcbiAgICBjb25zdCBkYXRhID0gZG9jLmRhdGEoKVxuICAgIGNvbnN0IGRhdGUgPSBkYXRhLmRhdGUgaW5zdGFuY2VvZiBUaW1lc3RhbXAgPyBkYXRhLmRhdGUudG9EYXRlKCkgOiBuZXcgRGF0ZShkYXRhLmRhdGUpXG5cbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IGRvYy5pZCxcbiAgICAgIC4uLmRhdGEsXG4gICAgICBkYXRlOiBkYXRlLFxuICAgIH1cbiAgfSlcbn1cblxuLy8gQ2xpbmljcyBDb2xsZWN0aW9uXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q2xpbmljcygpOiBQcm9taXNlPENsaW5pY1tdPiB7XG4gIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhxdWVyeShjbGluaWNzUmVmKSlcbiAgcmV0dXJuIHNuYXBzaG90LmRvY3MubWFwKChkb2MpID0+ICh7XG4gICAgaWQ6IGRvYy5pZCxcbiAgICAuLi5kb2MuZGF0YSgpLFxuICB9KSkgYXMgQ2xpbmljW11cbn1cblxuLy8gQ2VydGlmaXF1ZS1zZSBkZSBxdWUgYSBmdW7Dp8OjbyBnZXRDbGluaWMgZXN0w6EgY29ycmV0YVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENsaW5pYyhjbGluaWNJZDogc3RyaW5nKSB7XG4gIHRyeSB7XG4gICAgaWYgKCFjbGluaWNJZCkge1xuICAgICAgY29uc29sZS5lcnJvcihcImdldENsaW5pYyBjaGFtYWRvIHNlbSBJRFwiKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBjbGluaWNSZWYgPSBkb2MoZGIsIFwiY2xpbmljc1wiLCBjbGluaWNJZClcbiAgICBjb25zdCBjbGluaWNTbmFwID0gYXdhaXQgZ2V0RG9jKGNsaW5pY1JlZilcblxuICAgIGlmIChjbGluaWNTbmFwLmV4aXN0cygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogY2xpbmljU25hcC5pZCxcbiAgICAgICAgLi4uY2xpbmljU25hcC5kYXRhKCksXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc29sZS53YXJuKFwiQ2zDrW5pY2EgbsOjbyBlbmNvbnRyYWRhOlwiLCBjbGluaWNJZClcbiAgICByZXR1cm4gbnVsbFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvIGFvIGJ1c2NhciBjbMOtbmljYTpcIiwgZXJyb3IpXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuXG4vLyBBZGljaW9uYXIgb3UgYXR1YWxpemFyIGEgZnVuw6fDo28gYWRkQ2xpbmljIHBhcmEgbGlkYXIgY29tIG9zIGRhZG9zIGRvIHBvc3RvIGRlIHNhw7pkZVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZENsaW5pYyhkYXRhOiBDbGluaWNEYXRhKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgY2xpbmljc1JlZiA9IGNvbGxlY3Rpb24oZGIsIFwiY2xpbmljc1wiKTtcbiAgICBjb25zdCBjbGluaWNSZWYgPSBkb2MoY2xpbmljc1JlZik7XG4gICAgXG4gICAgYXdhaXQgc2V0RG9jKGNsaW5pY1JlZiwge1xuICAgICAgLi4uZGF0YSxcbiAgICAgIGlkOiBjbGluaWNSZWYuaWQsXG4gICAgICBjcmVhdGVkQXQ6IFRpbWVzdGFtcC5ub3coKSxcbiAgICAgIHVwZGF0ZWRBdDogVGltZXN0YW1wLm5vdygpXG4gICAgfSk7XG5cbiAgICAvLyBDcmVhdGUgaW5pdGlhbCBzdWJDb2xsZWN0aW9uc1xuICAgIGNvbnN0IGFwcG9pbnRtZW50c1JlZiA9IGNvbGxlY3Rpb24oY2xpbmljUmVmLCAnYXBwb2ludG1lbnRzJyk7XG4gICAgY29uc3Qgc2NoZWR1bGVSZWYgPSBkb2MoY2xpbmljUmVmLCAnZnVuY2lvbmFtZW50by9zY2hlZHVsZScpO1xuICAgIFxuICAgIC8vIFNldCB1cCBpbml0aWFsIHNjaGVkdWxlIGRvY3VtZW50XG4gICAgYXdhaXQgc2V0RG9jKHNjaGVkdWxlUmVmLCB7XG4gICAgICB3b3JraW5nRGF5czogZGF0YS53b3JraW5nRGF5cyxcbiAgICAgIHdvcmtpbmdIb3VyczogZGF0YS53b3JraW5nSG91cnMsXG4gICAgICBpczI0SG91cnM6IGRhdGEuaXMyNEhvdXJzIHx8IGZhbHNlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gY2xpbmljUmVmLmlkO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhZGRpbmcgY2xpbmljOlwiLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUNsaW5pYyhjbGluaWNJZDogc3RyaW5nLCBjbGluaWNEYXRhOiBhbnkpIHtcbiAgY29uc3QgY2xpbmljUmVmID0gZG9jKGRiLCBcImNsaW5pY3NcIiwgY2xpbmljSWQpXG5cbiAgLy8gUHJlcGFyYXIgb3MgZGFkb3MgcGFyYSBhdHVhbGl6YcOnw6NvXG4gIGNvbnN0IHVwZGF0ZURhdGEgPSB7IC4uLmNsaW5pY0RhdGEgfVxuXG4gIC8vIENvbnZlcnRlciBob3LDoXJpb3MgcGFyYSBUaW1lc3RhbXAgc2UgZm9ybmVjaWRvc1xuICBpZiAodXBkYXRlRGF0YS5vcGVuaW5nSG91cikge1xuICAgIHVwZGF0ZURhdGEub3BlbmluZ0hvdXIgPSBUaW1lc3RhbXAuZnJvbURhdGUobmV3IERhdGUoYDIwMDAtMDEtMDFUJHt1cGRhdGVEYXRhLm9wZW5pbmdIb3VyfTowMGApKVxuICB9XG5cbiAgaWYgKHVwZGF0ZURhdGEuY2xvc2luZ0hvdXIpIHtcbiAgICB1cGRhdGVEYXRhLmNsb3NpbmdIb3VyID0gVGltZXN0YW1wLmZyb21EYXRlKG5ldyBEYXRlKGAyMDAwLTAxLTAxVCR7dXBkYXRlRGF0YS5jbG9zaW5nSG91cn06MDBgKSlcbiAgfVxuXG4gIHJldHVybiB1cGRhdGVEb2MoY2xpbmljUmVmLCB1cGRhdGVEYXRhKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlQ2xpbmljKGNsaW5pY0lkOiBzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBiYXRjaCA9IHdyaXRlQmF0Y2goZGIpO1xuICAgIGNvbnN0IGNsaW5pY1JlZiA9IGRvYyhkYiwgXCJjbGluaWNzXCIsIGNsaW5pY0lkKTtcblxuICAgIC8vIEdldCBhbGwgYXNzb2NpYXRlZCByZWNvcmRzXG4gICAgY29uc3QgW2RvY3RvcnNTbmFwc2hvdCwgY29uc3VsdGF0aW9uc1NuYXBzaG90LCBleGFtc1NuYXBzaG90XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIGdldERvY3MoZ2V0RG9jdG9yc1JlZihjbGluaWNJZCkpLFxuICAgICAgZ2V0RG9jcyhxdWVyeShjb25zdWx0YXRpb25zUmVmLCB3aGVyZShcImNsaW5pY0lkXCIsIFwiPT1cIiwgY2xpbmljSWQpKSksXG4gICAgICBnZXREb2NzKHF1ZXJ5KGV4YW1zUmVmLCB3aGVyZShcImNsaW5pY0lkXCIsIFwiPT1cIiwgY2xpbmljSWQpKSksXG4gICAgXSk7XG5cbiAgICAvLyBEZWxldGUgYWxsIGRvY3RvcnMgaW4gdGhpcyBjbGluaWNcbiAgICBkb2N0b3JzU25hcHNob3QuZG9jcy5mb3JFYWNoKGRvYyA9PiB7XG4gICAgICBiYXRjaC5kZWxldGUoZG9jLnJlZik7XG4gICAgfSk7XG5cbiAgICAvLyBEZWxldGUgYWxsIGNvbnN1bHRhdGlvbnNcbiAgICBjb25zdWx0YXRpb25zU25hcHNob3QuZG9jcy5mb3JFYWNoKGRvYyA9PiB7XG4gICAgICBiYXRjaC5kZWxldGUoZG9jLnJlZik7XG4gICAgfSk7XG5cbiAgICAvLyBEZWxldGUgYWxsIGV4YW1zXG4gICAgZXhhbXNTbmFwc2hvdC5kb2NzLmZvckVhY2goZG9jID0+IHtcbiAgICAgIGJhdGNoLmRlbGV0ZShkb2MucmVmKTtcbiAgICB9KTtcblxuICAgIC8vIERlbGV0ZSB0aGUgY2xpbmljIGl0c2VsZlxuICAgIGJhdGNoLmRlbGV0ZShjbGluaWNSZWYpO1xuXG4gICAgLy8gRXhlY3V0ZSBhbGwgZGVsZXRpb25zIGluIGEgc2luZ2xlIGF0b21pYyBvcGVyYXRpb25cbiAgICBhd2FpdCBiYXRjaC5jb21taXQoKTtcbiAgICBcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZGVsZXRpbmcgY2xpbmljOlwiLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuLy8gRG9jdG9ycyBDb2xsZWN0aW9uXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RG9jdG9ycyhjbGluaWNJZD86IHN0cmluZykge1xuICB0cnkge1xuICAgIGlmICghY2xpbmljSWQgfHwgY2xpbmljSWQgPT09ICdhbGwnKSB7XG4gICAgICAvLyBGZXRjaCBhbGwgY2xpbmljcyBmaXJzdFxuICAgICAgY29uc3QgY2xpbmljc1NuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhjbGluaWNzUmVmKTtcbiAgICAgIFxuICAgICAgLy8gR2V0IGFsbCBkb2N0b3JzIGZyb20gZWFjaCBjbGluaWNcbiAgICAgIGNvbnN0IGRvY3RvcnNQcm9taXNlcyA9IGNsaW5pY3NTbmFwc2hvdC5kb2NzLm1hcChhc3luYyAoY2xpbmljRG9jKSA9PiB7XG4gICAgICAgIGNvbnN0IGRvY3RvcnNTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MoZ2V0RG9jdG9yc1JlZihjbGluaWNEb2MuaWQpKTtcbiAgICAgICAgcmV0dXJuIGRvY3RvcnNTbmFwc2hvdC5kb2NzLm1hcChkb2MgPT4gKHtcbiAgICAgICAgICBpZDogZG9jLmlkLFxuICAgICAgICAgIGNsaW5pY0lkOiBjbGluaWNEb2MuaWQsXG4gICAgICAgICAgLi4uZG9jLmRhdGEoKVxuICAgICAgICB9KSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gV2FpdCBmb3IgYWxsIHByb21pc2VzIHRvIHJlc29sdmUgYW5kIGZsYXR0ZW4gdGhlIGFycmF5XG4gICAgICBjb25zdCBhbGxEb2N0b3JzID0gYXdhaXQgUHJvbWlzZS5hbGwoZG9jdG9yc1Byb21pc2VzKTtcbiAgICAgIHJldHVybiBhbGxEb2N0b3JzLmZsYXQoKTtcbiAgICB9XG5cbiAgICAvLyBJZiBjbGluaWNJZCBpcyBwcm92aWRlZCwgZmV0Y2ggZG9jdG9ycyBmcm9tIHRoYXQgc3BlY2lmaWMgY2xpbmljXG4gICAgY29uc3QgZG9jdG9yc1NuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhnZXREb2N0b3JzUmVmKGNsaW5pY0lkKSk7XG4gICAgcmV0dXJuIGRvY3RvcnNTbmFwc2hvdC5kb2NzLm1hcChkb2MgPT4gKHtcbiAgICAgIGlkOiBkb2MuaWQsXG4gICAgICBjbGluaWNJZCxcbiAgICAgIC4uLmRvYy5kYXRhKClcbiAgICB9KSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIGRvY3RvcnM6XCIsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkRG9jdG9yKGRvY3RvckRhdGE6IERvY3RvckRhdGEpIHtcbiAgdHJ5IHtcbiAgICBpZiAoIWRvY3RvckRhdGEuY2xpbmljSWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImNsaW5pY0lkIGlzIHJlcXVpcmVkIHRvIGFkZCBhIGRvY3RvclwiKTtcbiAgICB9XG5cbiAgICAvLyBGaXJzdCB2ZXJpZnkgdGhlIGNsaW5pYyBleGlzdHMgYW5kIGdldCBpdHMgZGF0YVxuICAgIGNvbnN0IGNsaW5pY1JlZiA9IGRvYyhjbGluaWNzUmVmLCBkb2N0b3JEYXRhLmNsaW5pY0lkKTtcbiAgICBjb25zdCBjbGluaWNEb2MgPSBhd2FpdCBnZXREb2MoY2xpbmljUmVmKTtcbiAgICBcbiAgICBpZiAoIWNsaW5pY0RvYy5leGlzdHMoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2xpbmljIG5vdCBmb3VuZFwiKTtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSByYW5kb20gSURcbiAgICBjb25zdCBkb2NJZCA9IGdlbmVyYXRlVW5pcXVlSWQoKTtcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSBhIHN0cm9uZyBwYXNzd29yZCBpZiBub25lIHByb3ZpZGVkXG4gICAgY29uc3Qgc3Ryb25nUGFzc3dvcmQgPSBnZW5lcmF0ZVN0cm9uZ1Bhc3N3b3JkKDE2KTtcbiAgICBjb25zdCBwYXNzd29yZCA9IGRvY3RvckRhdGEucGFzc3dvcmQgfHwgc3Ryb25nUGFzc3dvcmQ7XG4gICAgXG4gICAgLy8gQ3JlYXRlIGF1dGggdXNlciB3aXRoIHN0cm9uZyBwYXNzd29yZFxuICAgIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkKGF1dGgsIGRvY3RvckRhdGEuZW1haWwsIHBhc3N3b3JkKTtcbiAgICBhd2FpdCB1cGRhdGVQcm9maWxlKHVzZXJDcmVkZW50aWFsLnVzZXIsIHsgXG4gICAgICBkaXNwbGF5TmFtZTogYCR7ZG9jdG9yRGF0YS5maXJzdE5hbWV9ICR7ZG9jdG9yRGF0YS5sYXN0TmFtZX1gIFxuICAgIH0pO1xuXG4gICAgY29uc3QgZG9jdG9yc1JlZiA9IGdldERvY3RvcnNSZWYoZG9jdG9yRGF0YS5jbGluaWNJZCk7XG4gICAgY29uc3QgaXMyNEhvdXJzID0gZG9jdG9yRGF0YS53b3JraW5nSG91cnM/LnN0YXJ0ID09PSBcIjAwOjAwXCIgJiYgXG4gICAgICAgICAgICAgICAgICAgICBkb2N0b3JEYXRhLndvcmtpbmdIb3Vycz8uZW5kID09PSBcIjIzOjU5XCI7XG5cbiAgICBjb25zdCBjbGVhbmVkRGF0YSA9IHJlbW92ZVVuZGVmaW5lZEZpZWxkcyh7XG4gICAgICAuLi5kb2N0b3JEYXRhLFxuICAgICAgdWlkOiB1c2VyQ3JlZGVudGlhbC51c2VyLnVpZCxcbiAgICAgIGlzMjRIb3VycyxcbiAgICAgIGNyZWF0ZWRBdDogc2VydmVyVGltZXN0YW1wKCksXG4gICAgICB1cGRhdGVkQXQ6IHNlcnZlclRpbWVzdGFtcCgpLFxuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIHRoZSBkb2N0b3IgZG9jdW1lbnQgd2l0aCB0aGUgcmFuZG9tIElEXG4gICAgYXdhaXQgc2V0RG9jKGRvYyhkb2N0b3JzUmVmLCBkb2NJZCksIGNsZWFuZWREYXRhKTtcblxuICAgIC8vIENyZWF0ZSB0aGUgY29ycmVzcG9uZGluZyB1c2VyIGRvY3VtZW50XG4gICAgY29uc3QgdXNlckRvYyA9IHtcbiAgICAgIG5hbWU6IGAke2RvY3RvckRhdGEuZmlyc3ROYW1lfSAke2RvY3RvckRhdGEubGFzdE5hbWV9YCxcbiAgICAgIGVtYWlsOiBkb2N0b3JEYXRhLmVtYWlsLFxuICAgICAgdHlwZTogXCJkb2N0b3JcIixcbiAgICAgIGNsaW5pY0lkOiBkb2N0b3JEYXRhLmNsaW5pY0lkLFxuICAgICAgZG9jdG9ySWQ6IGRvY0lkLFxuICAgICAgdWlkOiB1c2VyQ3JlZGVudGlhbC51c2VyLnVpZCxcbiAgICAgIGNyZWF0ZWRBdDogc2VydmVyVGltZXN0YW1wKCksXG4gICAgICB1cGRhdGVkQXQ6IHNlcnZlclRpbWVzdGFtcCgpLFxuICAgIH07XG5cbiAgICAvLyBTYXZlIGluIGJvdGggZ2xvYmFsIHVzZXJzIGFuZCBjbGluaWMncyB1c2VycyBjb2xsZWN0aW9uc1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIHNldERvYyhkb2MoZGIsIFwidXNlcnNcIiwgdXNlckNyZWRlbnRpYWwudXNlci51aWQpLCB1c2VyRG9jKSxcbiAgICAgIHNldERvYyhkb2MoZ2V0Q2xpbmljVXNlcnNSZWYoZG9jdG9yRGF0YS5jbGluaWNJZCksIHVzZXJDcmVkZW50aWFsLnVzZXIudWlkKSwgdXNlckRvYylcbiAgICBdKTtcblxuICAgIHJldHVybiB7IFxuICAgICAgaWQ6IGRvY0lkLCBcbiAgICAgIC4uLmNsZWFuZWREYXRhLFxuICAgICAgdGVtcG9yYXJ5UGFzc3dvcmQ6IGRvY3RvckRhdGEucGFzc3dvcmQgPyB1bmRlZmluZWQgOiBwYXNzd29yZFxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFkZGluZyBkb2N0b3I6XCIsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RG9jdG9yU2VydmljZXMoY2xpbmljSWQ6IHN0cmluZyB8IHVuZGVmaW5lZCwgZG9jdG9ySWQ6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICB0cnkge1xuICAgIC8vIFZhbGlkYXIgc2UgY2xpbmljSWQgZSBkb2N0b3JJZCBmb3JhbSBmb3JuZWNpZG9zXG4gICAgaWYgKCFjbGluaWNJZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2xpbmljIElEIMOpIG9icmlnYXTDs3Jpby5cIik7XG4gICAgfVxuICAgIGlmICghZG9jdG9ySWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkRvY3RvciBJRCDDqSBvYnJpZ2F0w7NyaW8uXCIpO1xuICAgIH1cblxuICAgIC8vIENyaWFyIGEgcmVmZXLDqm5jaWEgY29ycmV0YSBwYXJhIG8gZG9jdW1lbnRvIGRvIG3DqWRpY29cbiAgICBjb25zdCBkb2N0b3JSZWYgPSBkb2MoZGIsIFwiY2xpbmljc1wiLCBjbGluaWNJZCwgXCJkb2N0b3JzXCIsIGRvY3RvcklkKTtcbiAgICBjb25zdCBkb2N0b3JTbmFwID0gYXdhaXQgZ2V0RG9jKGRvY3RvclJlZik7XG5cbiAgICBpZiAoIWRvY3RvclNuYXAuZXhpc3RzKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTcOpZGljbyBuw6NvIGVuY29udHJhZG8gbm8gcG9zdG8gZGUgc2HDumRlOiAke2NsaW5pY0lkfWApO1xuICAgIH1cblxuICAgIGNvbnN0IGRvY3RvckRhdGEgPSBkb2N0b3JTbmFwLmRhdGEoKTtcbiAgICByZXR1cm4gZG9jdG9yRGF0YT8uc2VydmljZXMgfHwgW107XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm8gYW8gYnVzY2FyIHNlcnZpw6dvcyBkbyBtw6lkaWNvOlwiLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZERvY3RvclNlcnZpY2VzKGNsaW5pY0lkOiBzdHJpbmcsIGRvY3RvcklkOiBzdHJpbmcsIHNlcnZpY2VzOiBzdHJpbmdbXSkge1xuICB0cnkge1xuICAgIGlmICghY2xpbmljSWQgfHwgIWRvY3RvcklkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDbGluaWMgSUQgZSBEb2N0b3IgSUQgc8OjbyBvYnJpZ2F0w7NyaW9zLlwiKTtcbiAgICB9XG5cbiAgICAvLyBDcmlhciBhIHJlZmVyw6puY2lhIGNvcnJldGEgcGFyYSBvIGRvY3VtZW50byBkbyBtw6lkaWNvXG4gICAgY29uc3QgZG9jdG9yUmVmID0gZG9jKGRiLCBcImNsaW5pY3NcIiwgY2xpbmljSWQsIFwiZG9jdG9yc1wiLCBkb2N0b3JJZCk7XG5cbiAgICAvLyBWZXJpZmljYXIgc2UgbyBkb2N1bWVudG8gZG8gbcOpZGljbyBleGlzdGVcbiAgICBjb25zdCBkb2N0b3JTbmFwID0gYXdhaXQgZ2V0RG9jKGRvY3RvclJlZik7XG4gICAgaWYgKCFkb2N0b3JTbmFwLmV4aXN0cygpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE3DqWRpY28gbsOjbyBlbmNvbnRyYWRvIG5vIHBvc3RvIGRlIHNhw7pkZTogJHtjbGluaWNJZH1gKTtcbiAgICB9XG5cbiAgICAvLyBBdHVhbGl6YXIgb3Mgc2VydmnDp29zIGRvIG3DqWRpY29cbiAgICBhd2FpdCBzZXREb2MoZG9jdG9yUmVmLCB7IHNlcnZpY2VzIH0sIHsgbWVyZ2U6IHRydWUgfSk7XG5cbiAgICBjb25zb2xlLmxvZyhcIlNlcnZpw6dvcyBhdHVhbGl6YWRvcyBjb20gc3VjZXNzbyBwYXJhIG8gbcOpZGljbzpcIiwgZG9jdG9ySWQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvIGFvIGFkaWNpb25hciBzZXJ2acOnb3MgcGFyYSBvIG3DqWRpY286XCIsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVtb3ZlRG9jdG9yU2VydmljZShjbGluaWNJZDogc3RyaW5nLCBkb2N0b3JJZDogc3RyaW5nLCBzZXJ2aWNlOiBzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICBpZiAoIWNsaW5pY0lkIHx8ICFkb2N0b3JJZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2xpbmljIElEIGUgRG9jdG9yIElEIHPDo28gb2JyaWdhdMOzcmlvcy5cIik7XG4gICAgfVxuXG4gICAgLy8gQ3JpYXIgYSByZWZlcsOqbmNpYSBjb3JyZXRhIHBhcmEgbyBkb2N1bWVudG8gZG8gbcOpZGljb1xuICAgIGNvbnN0IGRvY3RvclJlZiA9IGRvYyhkYiwgXCJjbGluaWNzXCIsIGNsaW5pY0lkLCBcImRvY3RvcnNcIiwgZG9jdG9ySWQpO1xuXG4gICAgLy8gUmVtb3ZlciBvIHNlcnZpw6dvIGRvIG3DqWRpY29cbiAgICBhd2FpdCB1cGRhdGVEb2MoZG9jdG9yUmVmLCB7XG4gICAgICBzZXJ2aWNlczogYXJyYXlSZW1vdmUoc2VydmljZSksXG4gICAgfSk7XG5cbiAgICBjb25zb2xlLmxvZyhcIlNlcnZpw6dvIHJlbW92aWRvIGNvbSBzdWNlc3NvIGRvIG3DqWRpY286XCIsIGRvY3RvcklkKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJybyBhbyByZW1vdmVyIHNlcnZpw6dvIGRvIG3DqWRpY286XCIsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG4vLyBDb25zdWx0YXRpb25zIENvbGxlY3Rpb25cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDb25zdWx0YXRpb25zKGNsaW5pY0lkPzogc3RyaW5nLCBkb2N0b3JJZD86IHN0cmluZykge1xuICBsZXQgcVxuXG4gIGlmIChkb2N0b3JJZCAmJiBjbGluaWNJZCkge1xuICAgIC8vIEZpbHRyYXIgcG9yIGNsw61uaWNhIGUgbcOpZGljbywgc2VtIG9yZGVuYcOnw6NvXG4gICAgcSA9IHF1ZXJ5KGNvbnN1bHRhdGlvbnNSZWYsIHdoZXJlKFwiY2xpbmljSWRcIiwgXCI9PVwiLCBjbGluaWNJZCksIHdoZXJlKFwiZG9jdG9ySWRcIiwgXCI9PVwiLCBkb2N0b3JJZCkpXG4gIH0gZWxzZSBpZiAoZG9jdG9ySWQpIHtcbiAgICAvLyBGaWx0cmFyIGFwZW5hcyBwb3IgbcOpZGljb1xuICAgIHEgPSBxdWVyeShjb25zdWx0YXRpb25zUmVmLCB3aGVyZShcImRvY3RvcklkXCIsIFwiPT1cIiwgZG9jdG9ySWQpKVxuICB9IGVsc2UgaWYgKGNsaW5pY0lkKSB7XG4gICAgLy8gRmlsdHJhciBhcGVuYXMgcG9yIGNsw61uaWNhXG4gICAgcSA9IHF1ZXJ5KGNvbnN1bHRhdGlvbnNSZWYsIHdoZXJlKFwiY2xpbmljSWRcIiwgXCI9PVwiLCBjbGluaWNJZCkpXG4gIH0gZWxzZSB7XG4gICAgLy8gU2VtIGZpbHRyb3NcbiAgICBxID0gcXVlcnkoY29uc3VsdGF0aW9uc1JlZilcbiAgfVxuXG4gIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhxKVxuICByZXR1cm4gc25hcHNob3QuZG9jc1xuICAgIC5tYXAoKGRvYykgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGRvYy5kYXRhKClcbiAgICAgIGNvbnN0IGRhdGUgPSBkYXRhLmRhdGUgaW5zdGFuY2VvZiBUaW1lc3RhbXAgPyBkYXRhLmRhdGUudG9EYXRlKCkgOiBuZXcgRGF0ZShkYXRhLmRhdGUpXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBkb2MuaWQsXG4gICAgICAgIGNvbnN1bHRhdGlvbklkOiBkYXRhLmlkLFxuICAgICAgICAuLi5kYXRhLFxuICAgICAgICBkYXRlOiBkYXRlLFxuICAgICAgICBmb3JtYXR0ZWREYXRlOiBmb3JtYXQoZGF0ZSwgXCJkZC9NTS95eXl5IEhIOm1tXCIpLFxuICAgICAgfVxuICAgIH0pXG4gICAgLnNvcnQoKGEsIGIpID0+IGIuZGF0ZS5nZXRUaW1lKCkgLSBhLmRhdGUuZ2V0VGltZSgpKSAvLyBTb3J0IGluIG1lbW9yeVxufVxuXG4vLyBGdW7Dp8OjbyBwYXJhIGJ1c2NhciB0b2RhcyBhcyBjb25zdWx0YXMgZGUgdW0gbcOpZGljbyBlc3BlY8OtZmljb1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENvbnN1bHRhdGlvbnNCeURvY3Rvcihkb2N0b3JJZDogc3RyaW5nLCBjbGluaWNJZD86IHN0cmluZykge1xuICBsZXQgcSA9IHF1ZXJ5KGNvbnN1bHRhdGlvbnNSZWYsIHdoZXJlKFwiZG9jdG9ySWRcIiwgXCI9PVwiLCBkb2N0b3JJZCkpO1xuICBcbiAgaWYgKGNsaW5pY0lkKSB7XG4gICAgcSA9IHF1ZXJ5KHEsIHdoZXJlKFwiY2xpbmljSWRcIiwgXCI9PVwiLCBjbGluaWNJZCkpO1xuICB9XG4gIFxuICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSk7XG5cbiAgcmV0dXJuIHNuYXBzaG90LmRvY3MubWFwKChkb2MpID0+IHtcbiAgICBjb25zdCBkYXRhID0gZG9jLmRhdGEoKTtcbiAgICBjb25zdCBkYXRlID0gZGF0YS5kYXRlIGluc3RhbmNlb2YgVGltZXN0YW1wID8gZGF0YS5kYXRlLnRvRGF0ZSgpIDogbmV3IERhdGUoZGF0YS5kYXRlKTtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IGRvYy5pZCxcbiAgICAgIC4uLmRhdGEsXG4gICAgICBkYXRlOiBkYXRlLFxuICAgIH07XG4gIH0pO1xufVxuXG4vLyBBZGljaW9uZSBlc3RhIGZ1bsOnw6NvIGhlbHBlclxuZnVuY3Rpb24gY2xlYW5GaXJlc3RvcmVEYXRhKGRhdGE6IGFueSkge1xuICBjb25zdCBjbGVhbjogYW55ID0ge307XG4gIFxuICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkICYmIGRhdGFba2V5XSAhPT0gbnVsbCkge1xuICAgICAgY2xlYW5ba2V5XSA9IGRhdGFba2V5XTtcbiAgICB9XG4gIH0pO1xuICBcbiAgcmV0dXJuIGNsZWFuO1xufVxuXG4vLyBBdHVhbGl6ZSBhIGZ1bsOnw6NvIGFkZENvbnN1bHRhdGlvblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZENvbnN1bHRhdGlvbihjb25zdWx0YXRpb25EYXRhOiBhbnkpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBiYXRjaCA9IHdyaXRlQmF0Y2goZGIpO1xuICAgIFxuICAgIC8vIENyZWF0ZSBjb25zdWx0YXRpb24gZG9jdW1lbnRcbiAgICBjb25zdCBjb25zdWx0YXRpb25SZWYgPSBkb2MoY29uc3VsdGF0aW9uc1JlZik7XG4gICAgY29uc3QgZGF0ZVRpbWUgPSBuZXcgRGF0ZShgJHtjb25zdWx0YXRpb25EYXRhLmRhdGV9VCR7Y29uc3VsdGF0aW9uRGF0YS50aW1lfWApO1xuICAgIFxuICAgIC8vIENyZWF0ZSBhcHBvaW50bWVudCByZWNvcmQgd2l0aCBjbGVhbmVkIGRhdGFcbiAgICBjb25zdCBhcHBvaW50bWVudFJlZiA9IGRvYyhhcHBvaW50bWVudHNSZWYpO1xuICAgIGNvbnN0IGFwcG9pbnRtZW50RGF0YSA9IGNsZWFuRmlyZXN0b3JlRGF0YSh7XG4gICAgICB0eXBlOiAnY29uc3VsdGF0aW9uJyxcbiAgICAgIGNvbnN1bHRhdGlvbklkOiBjb25zdWx0YXRpb25SZWYuaWQsXG4gICAgICBjbGluaWNJZDogY29uc3VsdGF0aW9uRGF0YS5jbGluaWNJZCxcbiAgICAgIGRvY3RvcklkOiBjb25zdWx0YXRpb25EYXRhLmRvY3RvcklkIHx8IG51bGwsXG4gICAgICBwYXRpZW50TmFtZTogY29uc3VsdGF0aW9uRGF0YS5wYXRpZW50TmFtZSxcbiAgICAgIGRhdGU6IGRhdGVUaW1lLFxuICAgICAgZHVyYXRpb246IDMwLFxuICAgICAgc3RhdHVzOiAnQWdlbmRhZG8nLCAvLyBEZWZpbmUgc3RhdHVzIGluaWNpYWwgY29tbyBBZ2VuZGFkb1xuICAgICAgY3JlYXRlZEF0OiBzZXJ2ZXJUaW1lc3RhbXAoKVxuICAgIH0pO1xuXG4gICAgY29uc3QgY2xlYW5lZENvbnN1bHRhdGlvbkRhdGEgPSBjbGVhbkZpcmVzdG9yZURhdGEoe1xuICAgICAgLi4uY29uc3VsdGF0aW9uRGF0YSxcbiAgICAgIGRhdGU6IGRhdGVUaW1lLFxuICAgICAgYXBwb2ludG1lbnRJZDogYXBwb2ludG1lbnRSZWYuaWQsXG4gICAgICBzdGF0dXM6ICdBZ2VuZGFkbycsIC8vIERlZmluZSBzdGF0dXMgaW5pY2lhbCBjb21vIEFnZW5kYWRvXG4gICAgICBjcmVhdGVkQXQ6IHNlcnZlclRpbWVzdGFtcCgpXG4gICAgfSk7XG5cbiAgICBiYXRjaC5zZXQoY29uc3VsdGF0aW9uUmVmLCBjbGVhbmVkQ29uc3VsdGF0aW9uRGF0YSk7XG4gICAgYmF0Y2guc2V0KGFwcG9pbnRtZW50UmVmLCBhcHBvaW50bWVudERhdGEpO1xuXG4gICAgYXdhaXQgYmF0Y2guY29tbWl0KCk7XG4gICAgcmV0dXJuIHsgY29uc3VsdGF0aW9uSWQ6IGNvbnN1bHRhdGlvblJlZi5pZCwgYXBwb2ludG1lbnRJZDogYXBwb2ludG1lbnRSZWYuaWQgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWRkaW5nIGNvbnN1bHRhdGlvbjpcIiwgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVDb25zdWx0YXRpb25TdGF0dXMoY29uc3VsdGF0aW9uSWQ6IHN0cmluZywgbmV3U3RhdHVzOiBzdHJpbmcpIHtcbiAgY29uc3QgY29uc3VsdGF0aW9uUmVmID0gZG9jKGNvbnN1bHRhdGlvbnNSZWYsIGNvbnN1bHRhdGlvbklkKTtcbiAgcmV0dXJuIHVwZGF0ZURvYyhjb25zdWx0YXRpb25SZWYsIHsgXG4gICAgc3RhdHVzOiBuZXdTdGF0dXMsXG4gICAgdXBkYXRlZEF0OiBzZXJ2ZXJUaW1lc3RhbXAoKVxuICB9KTtcbn1cblxuLy8gRXhhbXMgQ29sbGVjdGlvblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEV4YW1zKGNsaW5pY0lkPzogc3RyaW5nLCBkb2N0b3JJZD86IHN0cmluZykge1xuICBsZXQgcVxuXG4gIGlmIChkb2N0b3JJZCAmJiBjbGluaWNJZCkge1xuICAgIC8vIEZpbHRyYXIgcG9yIGNsw61uaWNhIGUgbcOpZGljbywgc2VtIG9yZGVuYcOnw6NvXG4gICAgcSA9IHF1ZXJ5KGV4YW1zUmVmLCB3aGVyZShcImNsaW5pY0lkXCIsIFwiPT1cIiwgY2xpbmljSWQpLCB3aGVyZShcImRvY3RvcklkXCIsIFwiPT1cIiwgZG9jdG9ySWQpKVxuICB9IGVsc2UgaWYgKGRvY3RvcklkKSB7XG4gICAgLy8gRmlsdHJhciBhcGVuYXMgcG9yIG3DqWRpY29cbiAgICBxID0gcXVlcnkoZXhhbXNSZWYsIHdoZXJlKFwiZG9jdG9ySWRcIiwgXCI9PVwiLCBkb2N0b3JJZCkpXG4gIH0gZWxzZSBpZiAoY2xpbmljSWQpIHtcbiAgICAvLyBGaWx0cmFyIGFwZW5hcyBwb3IgY2zDrW5pY2FcbiAgICBxID0gcXVlcnkoZXhhbXNSZWYsIHdoZXJlKFwiY2xpbmljSWRcIiwgXCI9PVwiLCBjbGluaWNJZCkpXG4gIH0gZWxzZSB7XG4gICAgLy8gU2VtIGZpbHRyb3NcbiAgICBxID0gcXVlcnkoZXhhbXNSZWYpXG4gIH1cblxuICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSlcbiAgcmV0dXJuIHNuYXBzaG90LmRvY3NcbiAgICAubWFwKChkb2MpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBkb2MuZGF0YSgpXG4gICAgICBjb25zdCBkYXRlID0gZGF0YS5kYXRlIGluc3RhbmNlb2YgVGltZXN0YW1wID8gZGF0YS5kYXRlLnRvRGF0ZSgpIDogbmV3IERhdGUoZGF0YS5kYXRlKVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogZG9jLmlkLFxuICAgICAgICBleGFtSWQ6IGRhdGEuaWQsXG4gICAgICAgIC4uLmRhdGEsXG4gICAgICAgIGRhdGU6IGRhdGUsXG4gICAgICAgIGZvcm1hdHRlZERhdGU6IGZvcm1hdChkYXRlLCBcImRkL01NL3l5eXkgSEg6bW1cIiksXG4gICAgICB9XG4gICAgfSlcbiAgICAuc29ydCgoYSwgYikgPT4gYi5kYXRlLmdldFRpbWUoKSAtIGEuZGF0ZS5nZXRUaW1lKCkpIC8vIFNvcnQgaW4gbWVtb3J5XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRFeGFtKGV4YW1EYXRhOiBhbnkpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBiYXRjaCA9IHdyaXRlQmF0Y2goZGIpO1xuICAgIFxuICAgIGlmICghZXhhbURhdGEuZGF0ZSB8fCAhZXhhbURhdGEudGltZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGF0ZSBhbmQgdGltZSBhcmUgcmVxdWlyZWRcIik7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIHByb3BlciBkYXRlIG9iamVjdFxuICAgIGNvbnN0IFtob3VycywgbWludXRlc10gPSBleGFtRGF0YS50aW1lLnNwbGl0KCc6JykubWFwKE51bWJlcik7XG4gICAgY29uc3QgZXhhbURhdGUgPSBuZXcgRGF0ZShleGFtRGF0YS5kYXRlKTtcbiAgICBleGFtRGF0ZS5zZXRIb3Vycyhob3VycywgbWludXRlcywgMCwgMCk7XG5cbiAgICAvLyBDbGVhbiBkYXRhIGJlZm9yZSBzYXZpbmdcbiAgICBjb25zdCBjbGVhbmVkRXhhbURhdGEgPSBjbGVhbkZpcmVzdG9yZURhdGEoe1xuICAgICAgLi4uZXhhbURhdGEsXG4gICAgICBkb2N0b3JJZDogbnVsbCwgLy8gRGVmaW5lIGV4cGxpY2l0YW1lbnRlIGNvbW8gbnVsbCBzZSBuw6NvIGV4aXN0aXJcbiAgICAgIGRhdGU6IGV4YW1EYXRlLFxuICAgICAgc3RhdHVzOiAnc2NoZWR1bGVkJyxcbiAgICAgIGNyZWF0ZWRBdDogc2VydmVyVGltZXN0YW1wKClcbiAgICB9KTtcblxuICAgIC8vIENyZWF0ZSBleGFtIGRvY3VtZW50XG4gICAgY29uc3QgZXhhbVJlZiA9IGRvYyhleGFtc1JlZik7XG4gICAgXG4gICAgLy8gQ3JlYXRlIGFwcG9pbnRtZW50IHdpdGggY2xlYW5lZCBkYXRhXG4gICAgY29uc3QgYXBwb2ludG1lbnRSZWYgPSBkb2MoYXBwb2ludG1lbnRzUmVmKTtcbiAgICBjb25zdCBhcHBvaW50bWVudERhdGEgPSBjbGVhbkZpcmVzdG9yZURhdGEoe1xuICAgICAgdHlwZTogJ2V4YW0nLFxuICAgICAgZXhhbUlkOiBleGFtUmVmLmlkLFxuICAgICAgY2xpbmljSWQ6IGV4YW1EYXRhLmNsaW5pY0lkLFxuICAgICAgZG9jdG9ySWQ6IG51bGwsIC8vIERlZmluZSBleHBsaWNpdGFtZW50ZSBjb21vIG51bGxcbiAgICAgIHBhdGllbnROYW1lOiBleGFtRGF0YS5wYXRpZW50TmFtZSxcbiAgICAgIGRhdGU6IGV4YW1EYXRlLFxuICAgICAgZHVyYXRpb246IDMwLFxuICAgICAgc3RhdHVzOiAnc2NoZWR1bGVkJyxcbiAgICAgIGNyZWF0ZWRBdDogc2VydmVyVGltZXN0YW1wKClcbiAgICB9KTtcblxuICAgIC8vIFNldCBib3RoIGRvY3VtZW50c1xuICAgIGJhdGNoLnNldChleGFtUmVmLCB7XG4gICAgICAuLi5jbGVhbmVkRXhhbURhdGEsXG4gICAgICBhcHBvaW50bWVudElkOiBhcHBvaW50bWVudFJlZi5pZFxuICAgIH0pO1xuXG4gICAgYmF0Y2guc2V0KGFwcG9pbnRtZW50UmVmLCBhcHBvaW50bWVudERhdGEpO1xuICAgIGF3YWl0IGJhdGNoLmNvbW1pdCgpO1xuXG4gICAgcmV0dXJuIHsgXG4gICAgICBleGFtSWQ6IGV4YW1SZWYuaWQsIFxuICAgICAgYXBwb2ludG1lbnRJZDogYXBwb2ludG1lbnRSZWYuaWQsXG4gICAgICBkYXRlOiBleGFtRGF0ZSBcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhZGRpbmcgZXhhbTpcIiwgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVFeGFtU3RhdHVzKGV4YW1JZDogc3RyaW5nLCBuZXdTdGF0dXM6IHN0cmluZykge1xuICBjb25zdCBleGFtUmVmID0gZG9jKGRiLCBcImV4YW1zXCIsIGV4YW1JZClcbiAgcmV0dXJuIHVwZGF0ZURvYyhleGFtUmVmLCB7IHN0YXR1czogbmV3U3RhdHVzIH0pXG59XG5cbi8vIEV4YW0gVHlwZXMgQ29sbGVjdGlvblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEV4YW1UeXBlcyhjbGluaWNJZDogc3RyaW5nKSB7XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZpY2FyIHNlIGEgY2zDrW5pY2EgZXhpc3RlXG4gICAgY29uc3QgY2xpbmljRG9jID0gYXdhaXQgZ2V0RG9jKGRvYyhkYiwgXCJjbGluaWNzXCIsIGNsaW5pY0lkKSlcblxuICAgIGlmICghY2xpbmljRG9jLmV4aXN0cygpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiQ2zDrW5pY2EgbsOjbyBlbmNvbnRyYWRhOlwiLCBjbGluaWNJZClcbiAgICAgIHJldHVybiBbXVxuICAgIH1cblxuICAgIC8vIE9idGVyIHRpcG9zIGRlIGV4YW1lIGRhIGNsw61uaWNhXG4gICAgY29uc3QgY2xpbmljRGF0YSA9IGNsaW5pY0RvYy5kYXRhKClcbiAgICBjb25zdCBleGFtVHlwZXMgPSBjbGluaWNEYXRhLmV4YW1UeXBlcyB8fCBbXG4gICAgICBcIlNhbmd1ZVwiLFxuICAgICAgXCJSYWlvIFhcIixcbiAgICAgIFwiVWx0cmFzc29tXCIsXG4gICAgICBcIlJlc3NvbsOibmNpYVwiLFxuICAgICAgXCJUb21vZ3JhZmlhXCIsXG4gICAgICBcIkVsZXRyb2NhcmRpb2dyYW1hXCIsXG4gICAgICBcIkVuZG9zY29waWFcIixcbiAgICBdXG5cbiAgICByZXR1cm4gZXhhbVR5cGVzXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm8gYW8gYnVzY2FyIHRpcG9zIGRlIGV4YW1lOlwiLCBlcnJvcilcbiAgICByZXR1cm4gW1wiU2FuZ3VlXCIsIFwiUmFpbyBYXCIsIFwiVWx0cmFzc29tXCIsIFwiUmVzc29uw6JuY2lhXCIsIFwiVG9tb2dyYWZpYVwiLCBcIkVsZXRyb2NhcmRpb2dyYW1hXCIsIFwiRW5kb3Njb3BpYVwiXVxuICB9XG59XG5cbi8vIEZ1bsOnw6NvIHBhcmEgYWRpY2lvbmFyIHRpcG8gZGUgZXhhbWVcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRFeGFtVHlwZShjbGluaWNJZDogc3RyaW5nLCBleGFtVHlwZURhdGE6IGFueSkge1xuICB0cnkge1xuICAgIC8vIFZlcmlmaWNhciBzZSBhIGNsw61uaWNhIGV4aXN0ZVxuICAgIGNvbnN0IGNsaW5pY1JlZiA9IGRvYyhkYiwgXCJjbGluaWNzXCIsIGNsaW5pY0lkKVxuICAgIGNvbnN0IGNsaW5pY1NuYXAgPSBhd2FpdCBnZXREb2MoY2xpbmljUmVmKVxuXG4gICAgaWYgKCFjbGluaWNTbmFwLmV4aXN0cygpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDbMOtbmljYSBuw6NvIGVuY29udHJhZGFcIilcbiAgICB9XG5cbiAgICAvLyBDcmlhciB1bWEgcmVmZXLDqm5jaWEgcGFyYSBhIGNvbGXDp8OjbyBkZSB0aXBvcyBkZSBleGFtZVxuICAgIGNvbnN0IGV4YW1UeXBlc1JlZiA9IGNvbGxlY3Rpb24oZGIsIFwiZXhhbVR5cGVzXCIpXG5cbiAgICAvLyBBZGljaW9uYXIgbWV0YWRhZG9zXG4gICAgY29uc3QgZXhhbVR5cGVXaXRoTWV0YWRhdGEgPSB7XG4gICAgICAuLi5leGFtVHlwZURhdGEsXG4gICAgICBjbGluaWNJZCxcbiAgICAgIGNyZWF0ZWRBdDogc2VydmVyVGltZXN0YW1wKCksXG4gICAgICB1cGRhdGVkQXQ6IHNlcnZlclRpbWVzdGFtcCgpLFxuICAgIH1cblxuICAgIC8vIEFkaWNpb25hciBvIHRpcG8gZGUgZXhhbWVcbiAgICBjb25zdCBkb2NSZWYgPSBhd2FpdCBhZGREb2MoZXhhbVR5cGVzUmVmLCBleGFtVHlwZVdpdGhNZXRhZGF0YSlcblxuICAgIC8vIEF0dWFsaXphciBhIGNsw61uaWNhIGNvbSBvIElEIGRvIHRpcG8gZGUgZXhhbWVcbiAgICBhd2FpdCB1cGRhdGVEb2MoY2xpbmljUmVmLCB7XG4gICAgICBleGFtVHlwZUlkczogYXJyYXlVbmlvbihkb2NSZWYuaWQpLFxuICAgIH0pXG5cbiAgICByZXR1cm4geyBpZDogZG9jUmVmLmlkLCAuLi5leGFtVHlwZVdpdGhNZXRhZGF0YSB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm8gYW8gYWRpY2lvbmFyIHRpcG8gZGUgZXhhbWU6XCIsIGVycm9yKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuLy8gRnVuw6fDo28gcGFyYSBvYnRlciB0aXBvcyBkZSBleGFtZSBkZSB1bWEgY2zDrW5pY2FcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRFeGFtVHlwZXNCeUNsaW5pYyhjbGluaWNJZDogc3RyaW5nKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZXhhbVR5cGVzUmVmID0gY29sbGVjdGlvbihkYiwgXCJleGFtVHlwZXNcIilcbiAgICBjb25zdCBxID0gcXVlcnkoZXhhbVR5cGVzUmVmLCB3aGVyZShcImNsaW5pY0lkXCIsIFwiPT1cIiwgY2xpbmljSWQpLCBvcmRlckJ5KFwiY3JlYXRlZEF0XCIsIFwiZGVzY1wiKSlcblxuICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhxKVxuICAgIHJldHVybiBzbmFwc2hvdC5kb2NzLm1hcCgoZG9jKSA9PiAoe1xuICAgICAgaWQ6IGRvYy5pZCxcbiAgICAgIC4uLmRvYy5kYXRhKCksXG4gICAgfSkpXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm8gYW8gYnVzY2FyIHRpcG9zIGRlIGV4YW1lOlwiLCBlcnJvcilcbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG5cbi8vIEZ1bsOnw6NvIHBhcmEgYXR1YWxpemFyIHRpcG8gZGUgZXhhbWVcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVFeGFtVHlwZShleGFtVHlwZUlkOiBzdHJpbmcsIGV4YW1UeXBlRGF0YTogYW55KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZXhhbVR5cGVSZWYgPSBkb2MoZGIsIFwiZXhhbVR5cGVzXCIsIGV4YW1UeXBlSWQpXG5cbiAgICAvLyBBZGljaW9uYXIgbWV0YWRhZG9zXG4gICAgY29uc3QgdXBkYXRlRGF0YSA9IHtcbiAgICAgIC4uLmV4YW1UeXBlRGF0YSxcbiAgICAgIHVwZGF0ZWRBdDogc2VydmVyVGltZXN0YW1wKCksXG4gICAgfVxuXG4gICAgYXdhaXQgdXBkYXRlRG9jKGV4YW1UeXBlUmVmLCB1cGRhdGVEYXRhKVxuICAgIHJldHVybiB7IGlkOiBleGFtVHlwZUlkLCAuLi51cGRhdGVEYXRhIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJybyBhbyBhdHVhbGl6YXIgdGlwbyBkZSBleGFtZTpcIiwgZXJyb3IpXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuXG4vLyBGdW7Dp8OjbyBwYXJhIGV4Y2x1aXIgdGlwbyBkZSBleGFtZVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUV4YW1UeXBlKGV4YW1UeXBlSWQ6IHN0cmluZywgY2xpbmljSWQ6IHN0cmluZykge1xuICB0cnkge1xuICAgIC8vIFZlcmlmaWNhciBzZSBvIHRpcG8gZGUgZXhhbWUgZXN0w6Egc2VuZG8gdXNhZG8gZW0gYWxndW0gZXhhbWVcbiAgICBjb25zdCBleGFtc1JlZiA9IGNvbGxlY3Rpb24oZGIsIFwiZXhhbXNcIilcbiAgICBjb25zdCBxID0gcXVlcnkoZXhhbXNSZWYsIHdoZXJlKFwiZXhhbVR5cGVJZFwiLCBcIj09XCIsIGV4YW1UeXBlSWQpKVxuICAgIGNvbnN0IGV4YW1zU25hcHNob3QgPSBhd2FpdCBnZXREb2NzKHEpXG5cbiAgICBpZiAoIWV4YW1zU25hcHNob3QuZW1wdHkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk7Do28gw6kgcG9zc8OtdmVsIGV4Y2x1aXIgZXN0ZSB0aXBvIGRlIGV4YW1lIHBvaXMgZWxlIGVzdMOhIHNlbmRvIHVzYWRvIGVtIGV4YW1lcy5cIilcbiAgICB9XG5cbiAgICAvLyBFeGNsdWlyIG8gdGlwbyBkZSBleGFtZVxuICAgIGNvbnN0IGV4YW1UeXBlUmVmID0gZG9jKGRiLCBcImV4YW1UeXBlc1wiLCBleGFtVHlwZUlkKVxuICAgIGF3YWl0IGRlbGV0ZURvYyhleGFtVHlwZVJlZilcblxuICAgIC8vIEF0dWFsaXphciBhIGNsw61uaWNhIHJlbW92ZW5kbyBvIElEIGRvIHRpcG8gZGUgZXhhbWVcbiAgICBjb25zdCBjbGluaWNSZWYgPSBkb2MoZGIsIFwiY2xpbmljc1wiLCBjbGluaWNJZClcbiAgICBhd2FpdCB1cGRhdGVEb2MoY2xpbmljUmVmLCB7XG4gICAgICBleGFtVHlwZUlkczogYXJyYXlSZW1vdmUoZXhhbVR5cGVJZCksXG4gICAgfSlcblxuICAgIHJldHVybiB0cnVlXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm8gYW8gZXhjbHVpciB0aXBvIGRlIGV4YW1lOlwiLCBlcnJvcilcbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW1vdmVFeGFtVHlwZShjbGluaWNJZDogc3RyaW5nLCBleGFtVHlwZTogc3RyaW5nKSB7XG4gIGNvbnN0IGNsaW5pY1JlZiA9IGRvYyhkYiwgXCJjbGluaWNzXCIsIGNsaW5pY0lkKVxuICByZXR1cm4gdXBkYXRlRG9jKGNsaW5pY1JlZiwge1xuICAgIGV4YW1UeXBlczogYXJyYXlSZW1vdmUoZXhhbVR5cGUpLFxuICB9KVxufVxuXG4vLyBGdW7Dp8OjbyBwYXJhIGFkaWNpb25hciBzZXJ2acOnbyBtw6lkaWNvXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkRG9jdG9yU2VydmljZShkb2N0b3JJZDogc3RyaW5nLCBzZXJ2aWNlRGF0YTogYW55KSB7XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZpY2FyIHNlIG8gbcOpZGljbyBleGlzdGVcbiAgICBjb25zdCBkb2N0b3JSZWYgPSBkb2MoZGIsIFwiZG9jdG9yc1wiLCBkb2N0b3JJZClcbiAgICBjb25zdCBkb2N0b3JTbmFwID0gYXdhaXQgZ2V0RG9jKGRvY3RvclJlZilcblxuICAgIGlmICghZG9jdG9yU25hcC5leGlzdHMoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTcOpZGljbyBuw6NvIGVuY29udHJhZG9cIilcbiAgICB9XG5cbiAgICAvLyBDcmlhciB1bWEgcmVmZXLDqm5jaWEgcGFyYSBhIGNvbGXDp8OjbyBkZSBzZXJ2acOnb3MgbcOpZGljb3NcbiAgICBjb25zdCBzZXJ2aWNlc1JlZiA9IGNvbGxlY3Rpb24oZGIsIFwibWVkaWNhbFNlcnZpY2VzXCIpXG5cbiAgICAvLyBBZGljaW9uYXIgbWV0YWRhZG9zXG4gICAgY29uc3Qgc2VydmljZVdpdGhNZXRhZGF0YSA9IHtcbiAgICAgIC4uLnNlcnZpY2VEYXRhLFxuICAgICAgZG9jdG9ySWQsXG4gICAgICBjcmVhdGVkQXQ6IHNlcnZlclRpbWVzdGFtcCgpLFxuICAgICAgdXBkYXRlZEF0OiBzZXJ2ZXJUaW1lc3RhbXAoKSxcbiAgICB9XG5cbiAgICAvLyBBZGljaW9uYXIgbyBzZXJ2acOnbyBtw6lkaWNvXG4gICAgY29uc3QgZG9jUmVmID0gYXdhaXQgYWRkRG9jKHNlcnZpY2VzUmVmLCBzZXJ2aWNlV2l0aE1ldGFkYXRhKVxuXG4gICAgLy8gQXR1YWxpemFyIG8gbcOpZGljbyBjb20gbyBJRCBkbyBzZXJ2acOnb1xuICAgIGF3YWl0IHVwZGF0ZURvYyhkb2N0b3JSZWYsIHtcbiAgICAgIHNlcnZpY2VJZHM6IGFycmF5VW5pb24oZG9jUmVmLmlkKSxcbiAgICB9KVxuXG4gICAgcmV0dXJuIHsgaWQ6IGRvY1JlZi5pZCwgLi4uc2VydmljZVdpdGhNZXRhZGF0YSB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm8gYW8gYWRpY2lvbmFyIHNlcnZpw6dvIG3DqWRpY286XCIsIGVycm9yKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuLy8gRnVuw6fDo28gcGFyYSBvYnRlciBzZXJ2acOnb3MgbcOpZGljb3MgZGUgdW0gbcOpZGljb1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldERvY3RvclNlcnZpY2VzQnlEb2N0b3IoZG9jdG9ySWQ6IHN0cmluZykge1xuICB0cnkge1xuICAgIGNvbnN0IHNlcnZpY2VzUmVmID0gY29sbGVjdGlvbihkYiwgXCJtZWRpY2FsU2VydmljZXNcIilcbiAgICBjb25zdCBxID0gcXVlcnkoc2VydmljZXNSZWYsIHdoZXJlKFwiZG9jdG9ySWRcIiwgXCI9PVwiLCBkb2N0b3JJZCksIG9yZGVyQnkoXCJjcmVhdGVkQXRcIiwgXCJkZXNjXCIpKVxuXG4gICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBnZXREb2NzKHEpXG4gICAgcmV0dXJuIHNuYXBzaG90LmRvY3MubWFwKChkb2MpID0+ICh7XG4gICAgICBpZDogZG9jLmlkLFxuICAgICAgLi4uZG9jLmRhdGEoKSxcbiAgICB9KSlcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJybyBhbyBidXNjYXIgc2VydmnDp29zIG3DqWRpY29zOlwiLCBlcnJvcilcbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG5cbi8vIEZ1bsOnw6NvIHBhcmEgYXR1YWxpemFyIHNlcnZpw6dvIG3DqWRpY29cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVEb2N0b3JTZXJ2aWNlKHNlcnZpY2VJZDogc3RyaW5nLCBzZXJ2aWNlRGF0YTogYW55KSB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc2VydmljZVJlZiA9IGRvYyhkYiwgXCJtZWRpY2FsU2VydmljZXNcIiwgc2VydmljZUlkKVxuXG4gICAgLy8gQWRpY2lvbmFyIG1ldGFkYWRvc1xuICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7XG4gICAgICAuLi5zZXJ2aWNlRGF0YSxcbiAgICAgIHVwZGF0ZWRBdDogc2VydmVyVGltZXN0YW1wKCksXG4gICAgfVxuXG4gICAgYXdhaXQgdXBkYXRlRG9jKHNlcnZpY2VSZWYsIHVwZGF0ZURhdGEpXG4gICAgcmV0dXJuIHsgaWQ6IHNlcnZpY2VJZCwgLi4udXBkYXRlRGF0YSB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm8gYW8gYXR1YWxpemFyIHNlcnZpw6dvIG3DqWRpY286XCIsIGVycm9yKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuLy8gRnVuw6fDo28gcGFyYSBleGNsdWlyIHNlcnZpw6dvIG3DqWRpY29cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVEb2N0b3JTZXJ2aWNlKHNlcnZpY2VJZDogc3RyaW5nLCBkb2N0b3JJZDogc3RyaW5nKSB7XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZpY2FyIHNlIG8gc2VydmnDp28gZXN0w6Egc2VuZG8gdXNhZG8gZW0gYWxndW1hIGNvbnN1bHRhXG4gICAgY29uc3QgY29uc3VsdGF0aW9uc1JlZiA9IGNvbGxlY3Rpb24oZGIsIFwiY29uc3VsdGF0aW9uc1wiKVxuICAgIGNvbnN0IHEgPSBxdWVyeShjb25zdWx0YXRpb25zUmVmLCB3aGVyZShcInNlcnZpY2VJZFwiLCBcIj09XCIsIHNlcnZpY2VJZCkpXG4gICAgY29uc3QgY29uc3VsdGF0aW9uc1NuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhxKVxuXG4gICAgaWYgKCFjb25zdWx0YXRpb25zU25hcHNob3QuZW1wdHkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk7Do28gw6kgcG9zc8OtdmVsIGV4Y2x1aXIgZXN0ZSBzZXJ2acOnbyBwb2lzIGVsZSBlc3TDoSBzZW5kbyB1c2FkbyBlbSBjb25zdWx0YXMuXCIpXG4gICAgfVxuXG4gICAgLy8gRXhjbHVpciBvIHNlcnZpw6dvIG3DqWRpY29cbiAgICBjb25zdCBzZXJ2aWNlUmVmID0gZG9jKGRiLCBcIm1lZGljYWxTZXJ2aWNlc1wiLCBzZXJ2aWNlSWQpXG4gICAgYXdhaXQgZGVsZXRlRG9jKHNlcnZpY2VSZWYpXG5cbiAgICAvLyBBdHVhbGl6YXIgbyBtw6lkaWNvIHJlbW92ZW5kbyBvIElEIGRvIHNlcnZpw6dvXG4gICAgY29uc3QgZG9jdG9yUmVmID0gZG9jKGRiLCBcImRvY3RvcnNcIiwgZG9jdG9ySWQpXG4gICAgYXdhaXQgdXBkYXRlRG9jKGRvY3RvclJlZiwge1xuICAgICAgc2VydmljZUlkczogYXJyYXlSZW1vdmUoc2VydmljZUlkKSxcbiAgICB9KVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJybyBhbyBleGNsdWlyIHNlcnZpw6dvIG3DqWRpY286XCIsIGVycm9yKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuLy8gRGFzaGJvYXJkIERhdGFcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXREYXNoYm9hcmREYXRhKGNsaW5pY0lkOiBzdHJpbmcpIHtcbiAgY29uc3QgW2NvbnN1bHRhdGlvbnNTbmFwc2hvdCwgZXhhbXNTbmFwc2hvdCwgZG9jdG9yc1NuYXBzaG90XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICBnZXREb2NzKHF1ZXJ5KGNvbnN1bHRhdGlvbnNSZWYsIHdoZXJlKFwiY2xpbmljSWRcIiwgXCI9PVwiLCBjbGluaWNJZCkpKSxcbiAgICBnZXREb2NzKHF1ZXJ5KGV4YW1zUmVmLCB3aGVyZShcImNsaW5pY0lkXCIsIFwiPT1cIiwgY2xpbmljSWQpKSksXG4gICAgZ2V0RG9jcyhxdWVyeShnZXREb2N0b3JzUmVmKGNsaW5pY0lkKSwgd2hlcmUoXCJjbGluaWNJZFwiLCBcIj09XCIsIGNsaW5pY0lkKSwgb3JkZXJCeShcImNyZWF0ZWRBdFwiLCBcImRlc2NcIiksIGxpbWl0KDUpKSksXG4gIF0pXG5cbiAgY29uc3QgY29uc3VsdGF0aW9ucyA9IGNvbnN1bHRhdGlvbnNTbmFwc2hvdC5kb2NzLm1hcCgoZG9jKSA9PiBkb2MuZGF0YSgpKVxuICBjb25zdCBleGFtcyA9IGV4YW1zU25hcHNob3QuZG9jcy5tYXAoKGRvYykgPT4gZG9jLmRhdGEoKSlcbiAgY29uc3QgZG9jdG9ycyA9IGRvY3RvcnNTbmFwc2hvdC5kb2NzLm1hcCgoZG9jKSA9PiAoeyBpZDogZG9jLmlkLCAuLi5kb2MuZGF0YSgpIH0pKVxuXG4gIC8vIENvbnRhZ2VtIGRlIHN0YXR1cyBkYXMgY29uc3VsdGFzXG4gIGNvbnN0IGNvbnN1bHRhdGlvblN0YXR1c2VzOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9ID0gY29uc3VsdGF0aW9ucy5yZWR1Y2UoKGFjYzogYW55LCBjb25zdWx0YXRpb246IGFueSkgPT4ge1xuICAgIGFjY1tjb25zdWx0YXRpb24uc3RhdHVzXSA9IChhY2NbY29uc3VsdGF0aW9uLnN0YXR1c10gfHwgMCkgKyAxXG4gICAgcmV0dXJuIGFjY1xuICB9LCB7fSlcblxuICAvLyBDb250YWdlbSBkZSBzdGF0dXMgZG9zIGV4YW1lc1xuICBjb25zdCBleGFtU3RhdHVzZXM6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gPSBleGFtcy5yZWR1Y2UoKGFjYzogYW55LCBleGFtOiBhbnkpID0+IHtcbiAgICBhY2NbZXhhbS5zdGF0dXNdID0gKGFjY1tleGFtLnN0YXR1c10gfHwgMCkgKyAxXG4gICAgcmV0dXJuIGFjY1xuICB9LCB7fSlcblxuICAvLyBBZ2VuZGFtZW50b3MgcGFyYSBob2plXG4gIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKVxuICB0b2RheS5zZXRIb3VycygwLCAwLCAwLCAwKVxuXG4gIGNvbnN0IHRvZGF5Q29uc3VsdGF0aW9ucyA9IGNvbnN1bHRhdGlvbnMuZmlsdGVyKChjb25zdWx0YXRpb246IGFueSkgPT4ge1xuICAgIGNvbnN0IGNvbnN1bHRhdGlvbkRhdGUgPSBuZXcgRGF0ZShjb25zdWx0YXRpb24uZGF0ZS5zZWNvbmRzICogMTAwMClcbiAgICBjb25zdWx0YXRpb25EYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApXG4gICAgcmV0dXJuIGNvbnN1bHRhdGlvbkRhdGUuZ2V0VGltZSgpID09PSB0b2RheS5nZXRUaW1lKClcbiAgfSlcblxuICBjb25zdCB0b2RheUV4YW1zID0gZXhhbXMuZmlsdGVyKChleGFtOiBhbnkpID0+IHtcbiAgICBjb25zdCBleGFtRGF0ZSA9IG5ldyBEYXRlKGV4YW0uZGF0ZS5zZWNvbmRzICogMTAwMClcbiAgICBleGFtRGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKVxuICAgIHJldHVybiBleGFtRGF0ZS5nZXRUaW1lKCkgPT09IHRvZGF5LmdldFRpbWUoKVxuICB9KVxuXG4gIHJldHVybiB7XG4gICAgdG90YWxEb2N0b3JzOiBkb2N0b3JzU25hcHNob3Quc2l6ZSxcbiAgICB0b3RhbENvbnN1bHRhdGlvbnM6IGNvbnN1bHRhdGlvbnNTbmFwc2hvdC5zaXplLFxuICAgIHRvdGFsRXhhbXM6IGV4YW1zU25hcHNob3Quc2l6ZSxcbiAgICBjb21wbGV0ZWRDb25zdWx0YXRpb25zOiBjb25zdWx0YXRpb25TdGF0dXNlcy5Db25jbHXDrWRhIHx8IDAsXG4gICAgY29tcGxldGVkRXhhbXM6IGV4YW1TdGF0dXNlcy5Db25jbHXDrWRvIHx8IDAsXG4gICAgY29uc3VsdGF0aW9uU3RhdHVzZXMsXG4gICAgZXhhbVN0YXR1c2VzLFxuICAgIHRvZGF5Q29uc3VsdGF0aW9ucyxcbiAgICB0b2RheUV4YW1zLFxuICAgIHJlY2VudERvY3RvcnM6IGRvY3RvcnMsXG4gIH1cbn1cblxuLy8gRmlsZSBVcGxvYWQgSGVscGVyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBsb2FkRmlsZShmaWxlOiBGaWxlLCBwYXRoOiBzdHJpbmcpIHtcbiAgY29uc3Qgc3RvcmFnZVJlZiA9IHJlZihzdG9yYWdlLCBwYXRoKVxuICBhd2FpdCB1cGxvYWRCeXRlcyhzdG9yYWdlUmVmLCBmaWxlKVxuICByZXR1cm4gZ2V0RG93bmxvYWRVUkwoc3RvcmFnZVJlZilcbn1cblxuLy8gQWRpY2lvbmUgZXN0YSBmdW7Dp8OjbyBhbyBhcnF1aXZvIGxpYi9maXJlYmFzZS50c1xuXG4vLyBQYXRpZW50cyBDb2xsZWN0aW9uXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkUGF0aWVudChwYXRpZW50RGF0YTogYW55KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlcnNSZWYgPSBjb2xsZWN0aW9uKGRiLCBcInVzZXJzXCIpXG5cbiAgICAvLyBBZGljaW9uYXIgbWV0YWRhZG9zXG4gICAgY29uc3QgcGF0aWVudFdpdGhNZXRhZGF0YSA9IHtcbiAgICAgIC4uLnBhdGllbnREYXRhLFxuICAgICAgdHlwZTogXCJwYXRpZW50XCIsIC8vIERlZmluaXIgbyB0aXBvIGNvbW8gXCJwYXRpZW50XCJcbiAgICAgIGNyZWF0ZWRBdDogc2VydmVyVGltZXN0YW1wKCksXG4gICAgICB1cGRhdGVkQXQ6IHNlcnZlclRpbWVzdGFtcCgpLFxuICAgIH1cblxuICAgIC8vIEFkaWNpb25hciBvIHBhY2llbnRlXG4gICAgY29uc3QgZG9jUmVmID0gYXdhaXQgYWRkRG9jKHVzZXJzUmVmLCBwYXRpZW50V2l0aE1ldGFkYXRhKVxuXG4gICAgcmV0dXJuIHsgaWQ6IGRvY1JlZi5pZCwgLi4ucGF0aWVudFdpdGhNZXRhZGF0YSB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm8gYW8gYWRpY2lvbmFyIHBhY2llbnRlOlwiLCBlcnJvcilcbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG5cbi8qKlxuICogQnVzY2EgdG9kb3Mgb3MgdXN1w6FyaW9zIGRvIHRpcG8gXCJwYXRpZW50XCIgZGUgdW0gcG9zdG8gZGUgc2HDumRlIGVzcGVjw61maWNvXG4gKiBAcGFyYW0gY2xpbmljSWQgSUQgZG8gcG9zdG8gZGUgc2HDumRlXG4gKiBAcmV0dXJucyBBcnJheSBkZSBwYWNpZW50ZXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFBhdGllbnRzQnlDbGluaWMoY2xpbmljSWQ6IHN0cmluZykge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXJzUmVmID0gY29sbGVjdGlvbihkYiwgXCJ1c2Vyc1wiKVxuICAgIGNvbnN0IHEgPSBxdWVyeSh1c2Vyc1JlZiwgd2hlcmUoXCJ0eXBlXCIsIFwiPT1cIiwgXCJwYXRpZW50XCIpLCB3aGVyZShcImNsaW5pY0lkXCIsIFwiPT1cIiwgY2xpbmljSWQpKVxuXG4gICAgY29uc3QgcXVlcnlTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSlcbiAgICBjb25zdCBwYXRpZW50cyA9IHF1ZXJ5U25hcHNob3QuZG9jcy5tYXAoKGRvYykgPT4gKHtcbiAgICAgIGlkOiBkb2MuaWQsXG4gICAgICAuLi5kb2MuZGF0YSgpLFxuICAgIH0pKVxuXG4gICAgcmV0dXJuIHBhdGllbnRzXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm8gYW8gYnVzY2FyIHBhY2llbnRlczpcIiwgZXJyb3IpXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuXG4vKipcbiAqIEJ1c2NhIHRvZG9zIG9zIHVzdcOhcmlvcyBkbyB0aXBvIFwicGF0aWVudFwiXG4gKiBAcmV0dXJucyBBcnJheSBkZSBwYWNpZW50ZXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFsbFBhdGllbnRzKCkge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXJzUmVmID0gY29sbGVjdGlvbihkYiwgXCJ1c2Vyc1wiKVxuICAgIGNvbnN0IHEgPSBxdWVyeSh1c2Vyc1JlZiwgd2hlcmUoXCJ0eXBlXCIsIFwiPT1cIiwgXCJwYXRpZW50XCIpKVxuXG4gICAgY29uc3QgcXVlcnlTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSlcbiAgICBjb25zdCBwYXRpZW50cyA9IHF1ZXJ5U25hcHNob3QuZG9jcy5tYXAoKGRvYykgPT4gKHtcbiAgICAgIGlkOiBkb2MuaWQsXG4gICAgICAuLi5kb2MuZGF0YSgpLFxuICAgIH0pKVxuXG4gICAgcmV0dXJuIHBhdGllbnRzXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm8gYW8gYnVzY2FyIHBhY2llbnRlczpcIiwgZXJyb3IpXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuXG4vKipcbiAqIEJ1c2NhIGFzIGNvbnN1bHRhcyBlIGV4YW1lcyBkZSB1bSBwYWNpZW50ZSBlc3BlY8OtZmljb1xuICogQHBhcmFtIHBhdGllbnRJZCBJRCBkbyBwYWNpZW50ZVxuICogQHJldHVybnMgT2JqZXRvIGNvbSBjb25zdWx0YXMgZSBleGFtZXMgZG8gcGFjaWVudGVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFBhdGllbnRBcHBvaW50bWVudHMocGF0aWVudElkOiBzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICAvLyBCdXNjYXIgY29uc3VsdGFzXG4gICAgY29uc3QgY29uc3VsdGF0aW9uc1JlZiA9IGNvbGxlY3Rpb24oZGIsIFwiY29uc3VsdGF0aW9uc1wiKVxuICAgIGNvbnN0IGNvbnN1bHRhdGlvbnNRdWVyeSA9IHF1ZXJ5KGNvbnN1bHRhdGlvbnNSZWYsIHdoZXJlKFwicGF0aWVudElkXCIsIFwiPT1cIiwgcGF0aWVudElkKSlcblxuICAgIC8vIEJ1c2NhciBleGFtZXNcbiAgICBjb25zdCBleGFtc1JlZiA9IGNvbGxlY3Rpb24oZGIsIFwiZXhhbXNcIilcbiAgICBjb25zdCBleGFtc1F1ZXJ5ID0gcXVlcnkoZXhhbXNSZWYsIHdoZXJlKFwicGF0aWVudElkXCIsIFwiPT1cIiwgcGF0aWVudElkKSlcblxuICAgIC8vIEV4ZWN1dGFyIGFzIGNvbnN1bHRhcyBlbSBwYXJhbGVsb1xuICAgIGNvbnN0IFtjb25zdWx0YXRpb25zU25hcHNob3QsIGV4YW1zU25hcHNob3RdID0gYXdhaXQgUHJvbWlzZS5hbGwoW2dldERvY3MoY29uc3VsdGF0aW9uc1F1ZXJ5KSwgZ2V0RG9jcyhleGFtc1F1ZXJ5KV0pXG5cbiAgICAvLyBQcm9jZXNzYXIgcmVzdWx0YWRvc1xuICAgIGNvbnN0IGNvbnN1bHRhdGlvbnMgPSBjb25zdWx0YXRpb25zU25hcHNob3QuZG9jcy5tYXAoKGRvYykgPT4gKHtcbiAgICAgIGlkOiBkb2MuaWQsXG4gICAgICAuLi5kb2MuZGF0YSgpLFxuICAgICAgZGF0ZTogZG9jLmRhdGEoKS5kYXRlPy50b0RhdGUoKSB8fCBuZXcgRGF0ZSgpLFxuICAgIH0pKVxuXG4gICAgY29uc3QgZXhhbXMgPSBleGFtc1NuYXBzaG90LmRvY3MubWFwKChkb2MpID0+ICh7XG4gICAgICBpZDogZG9jLmlkLFxuICAgICAgLi4uZG9jLmRhdGEoKSxcbiAgICAgIGRhdGU6IGRvYy5kYXRhKCkuZGF0ZT8udG9EYXRlKCkgfHwgbmV3IERhdGUoKSxcbiAgICB9KSlcblxuICAgIHJldHVybiB7IGNvbnN1bHRhdGlvbnMsIGV4YW1zIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJybyBhbyBidXNjYXIgYWdlbmRhbWVudG9zIGRvIHBhY2llbnRlOlwiLCBlcnJvcilcbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG5cbi8vIEZ1bsOnw7VlcyBwYXJhIGJ1c2NhciBkYWRvcyBlc3BlY8OtZmljb3MgZGUgdW0gcG9zdG9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXREb2N0b3JzQnlDbGluaWMoY2xpbmljSWQ6IHN0cmluZykge1xuICBjb25zdCBxID0gcXVlcnkoZ2V0RG9jdG9yc1JlZihjbGluaWNJZCksIHdoZXJlKFwiY2xpbmljSWRcIiwgXCI9PVwiLCBjbGluaWNJZCksIG9yZGVyQnkoXCJjcmVhdGVkQXRcIiwgXCJkZXNjXCIpKVxuICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSlcbiAgcmV0dXJuIHNuYXBzaG90LmRvY3MubWFwKChkb2MpID0+ICh7XG4gICAgaWQ6IGRvYy5pZCxcbiAgICAuLi5kb2MuZGF0YSgpLFxuICB9KSlcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENvbnN1bHRhdGlvbnNCeUNsaW5pYyhjbGluaWNJZDogc3RyaW5nLCBzdGFydERhdGU/OiBEYXRlLCBlbmREYXRlPzogRGF0ZSkge1xuICBsZXQgcSA9IHF1ZXJ5KGNvbnN1bHRhdGlvbnNSZWYsIHdoZXJlKFwiY2xpbmljSWRcIiwgXCI9PVwiLCBjbGluaWNJZCkpXG5cbiAgaWYgKHN0YXJ0RGF0ZSkge1xuICAgIGNvbnN0IHN0YXJ0VGltZXN0YW1wID0gVGltZXN0YW1wLmZyb21EYXRlKHN0YXJ0RGF0ZSlcbiAgICBxID0gcXVlcnkocSwgd2hlcmUoXCJkYXRlXCIsIFwiPj1cIiwgc3RhcnRUaW1lc3RhbXApKVxuICB9XG5cbiAgaWYgKGVuZERhdGUpIHtcbiAgICBjb25zdCBlbmRPZkRheSA9IG5ldyBEYXRlKGVuZERhdGUpXG4gICAgZW5kT2ZEYXkuc2V0SG91cnMoMjMsIDU5LCA1OSwgOTk5KVxuICAgIGNvbnN0IGVuZFRpbWVzdGFtcCA9IFRpbWVzdGFtcC5mcm9tRGF0ZShlbmRPZkRheSlcbiAgICBxID0gcXVlcnkocSwgd2hlcmUoXCJkYXRlXCIsIFwiPD1cIiwgZW5kVGltZXN0YW1wKSlcbiAgfVxuXG4gIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhxKVxuICByZXR1cm4gc25hcHNob3QuZG9jcy5tYXAoKGRvYykgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSBkb2MuZGF0YSgpXG4gICAgY29uc3QgZGF0ZSA9IGRhdGEuZGF0ZSBpbnN0YW5jZW9mIFRpbWVzdGFtcCA/IGRhdGEuZGF0ZS50b0RhdGUoKSA6IG5ldyBEYXRlKGRhdGEuZGF0ZSlcblxuICAgIHJldHVybiB7XG4gICAgICBpZDogZG9jLmlkLFxuICAgICAgLi4uZGF0YSxcbiAgICAgIGRhdGU6IGRhdGUsXG4gICAgfVxuICB9KVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RXhhbXNCeUNsaW5pYyhjbGluaWNJZDogc3RyaW5nLCBzdGFydERhdGU/OiBEYXRlLCBlbmREYXRlPzogRGF0ZSkge1xuICBsZXQgcSA9IHF1ZXJ5KGV4YW1zUmVmLCB3aGVyZShcImNsaW5pY0lkXCIsIFwiPT1cIiwgY2xpbmljSWQpKVxuXG4gIGlmIChzdGFydERhdGUpIHtcbiAgICBjb25zdCBzdGFydFRpbWVzdGFtcCA9IFRpbWVzdGFtcC5mcm9tRGF0ZShzdGFydERhdGUpXG4gICAgcSA9IHF1ZXJ5KHEsIHdoZXJlKFwiZGF0ZVwiLCBcIj49XCIsIHN0YXJ0VGltZXN0YW1wKSlcbiAgfVxuXG4gIGlmIChlbmREYXRlKSB7XG4gICAgY29uc3QgZW5kT2ZEYXkgPSBuZXcgRGF0ZShlbmREYXRlKVxuICAgIGVuZE9mRGF5LnNldEhvdXJzKDIzLCA1OSwgNTksIDk5OSlcbiAgICBjb25zdCBlbmRUaW1lc3RhbXAgPSBUaW1lc3RhbXAuZnJvbURhdGUoZW5kT2ZEYXkpXG4gICAgcSA9IHF1ZXJ5KHEsIHdoZXJlKFwiZGF0ZVwiLCBcIjw9XCIsIGVuZFRpbWVzdGFtcCkpXG4gIH1cblxuICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSlcbiAgcmV0dXJuIHNuYXBzaG90LmRvY3MubWFwKChkb2MpID0+IHtcbiAgICBjb25zdCBkYXRhID0gZG9jLmRhdGEoKVxuICAgIGNvbnN0IGRhdGUgPSBkYXRhLmRhdGUgaW5zdGFuY2VvZiBUaW1lc3RhbXAgPyBkYXRhLmRhdGUudG9EYXRlKCkgOiBuZXcgRGF0ZShkYXRhLmRhdGUpXG5cbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IGRvYy5pZCxcbiAgICAgIC4uLmRhdGEsXG4gICAgICBkYXRlOiBkYXRlLFxuICAgIH1cbiAgfSlcbn1cblxuLy8gQXR1YWxpemUgYSBmdW7Dp8OjbyBzZW5kTWFzc05vdGlmaWNhdGlvblxuXG4vLyBGdW7Dp8OjbyBwYXJhIGVudmlhciBub3RpZmljYcOnw6NvIGVtIG1hc3NhXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZE1hc3NOb3RpZmljYXRpb24obm90aWZpY2F0aW9uRGF0YToge1xuICB0aXRsZTogc3RyaW5nXG4gIG1lc3NhZ2U6IHN0cmluZ1xuICB0eXBlOiBzdHJpbmdcbiAgc2VuZFRvQWxsOiBib29sZWFuXG4gIGNsaW5pY0lkOiBzdHJpbmcgfCBudWxsXG59KSB7XG4gIHRyeSB7XG4gICAgLy8gVmFsaWRhciBkYWRvcyBkZSBlbnRyYWRhXG4gICAgaWYgKCFub3RpZmljYXRpb25EYXRhLnRpdGxlIHx8ICFub3RpZmljYXRpb25EYXRhLm1lc3NhZ2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlTDrXR1bG8gZSBtZW5zYWdlbSBzw6NvIG9icmlnYXTDs3Jpb3NcIilcbiAgICB9XG5cbiAgICAvLyBCdXNjYXIgb3MgZGVzdGluYXTDoXJpb3NcbiAgICBsZXQgcmVjaXBpZW50UXVlcnlcbiAgICBjb25zdCBjdXJyZW50VXNlciA9IGF1dGguY3VycmVudFVzZXJcblxuICAgIGlmICghY3VycmVudFVzZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVzdcOhcmlvIG7Do28gYXV0ZW50aWNhZG9cIilcbiAgICB9XG5cbiAgICAvLyBPYnRlciBpbmZvcm1hw6fDtWVzIGRvIHVzdcOhcmlvIGF0dWFsXG4gICAgY29uc3QgdXNlckRvYyA9IGF3YWl0IGdldERvYyhkb2MoZGIsIFwidXNlcnNcIiwgY3VycmVudFVzZXIudWlkKSlcbiAgICBpZiAoIXVzZXJEb2MuZXhpc3RzKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkRhZG9zIGRvIHVzdcOhcmlvIG7Do28gZW5jb250cmFkb3NcIilcbiAgICB9XG5cbiAgICBjb25zdCB1c2VyRGF0YSA9IHVzZXJEb2MuZGF0YSgpXG4gICAgY29uc3Qgc2VuZGVyQ2xpbmljSWQgPSB1c2VyRGF0YT8uY2xpbmljSWRcblxuICAgIGlmIChub3RpZmljYXRpb25EYXRhLnNlbmRUb0FsbCkge1xuICAgICAgLy8gU2UgZm9yIHBhcmEgdG9kb3MsIGJ1c2NhciB0b2RvcyBvcyBwYWNpZW50ZXNcbiAgICAgIHJlY2lwaWVudFF1ZXJ5ID0gcXVlcnkoY29sbGVjdGlvbihkYiwgXCJ1c2Vyc1wiKSwgd2hlcmUoXCJ0eXBlXCIsIFwiPT1cIiwgXCJwYXRpZW50XCIpKVxuICAgIH0gZWxzZSBpZiAobm90aWZpY2F0aW9uRGF0YS5jbGluaWNJZCkge1xuICAgICAgLy8gU2UgZm9yIHBhcmEgdW0gcG9zdG8gZXNwZWPDrWZpY28sIGJ1c2NhciBwYWNpZW50ZXMgZGVzc2UgcG9zdG9cbiAgICAgIHJlY2lwaWVudFF1ZXJ5ID0gcXVlcnkoXG4gICAgICAgIGNvbGxlY3Rpb24oZGIsIFwidXNlcnNcIiksXG4gICAgICAgIHdoZXJlKFwidHlwZVwiLCBcIj09XCIsIFwicGF0aWVudFwiKSxcbiAgICAgICAgd2hlcmUoXCJjbGluaWNJZFwiLCBcIj09XCIsIG5vdGlmaWNhdGlvbkRhdGEuY2xpbmljSWQpLFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoc2VuZGVyQ2xpbmljSWQpIHtcbiAgICAgIC8vIFNlIG7Do28gZXNwZWNpZmljb3UgY2xpbmljSWQgbWFzIG8gdXN1w6FyaW8gdGVtIHVtIHBvc3RvLCB1c2FyIG8gcG9zdG8gZG8gdXN1w6FyaW9cbiAgICAgIHJlY2lwaWVudFF1ZXJ5ID0gcXVlcnkoXG4gICAgICAgIGNvbGxlY3Rpb24oZGIsIFwidXNlcnNcIiksXG4gICAgICAgIHdoZXJlKFwidHlwZVwiLCBcIj09XCIsIFwicGF0aWVudFwiKSxcbiAgICAgICAgd2hlcmUoXCJjbGluaWNJZFwiLCBcIj09XCIsIHNlbmRlckNsaW5pY0lkKSxcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2UgbsOjbyB0aXZlciBjbGluaWNJZCBlIG7Do28gZm9yIHBhcmEgdG9kb3MsIG7Do28gZW52aWFyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCLDiSBuZWNlc3PDoXJpbyBlc3BlY2lmaWNhciB1bSBwb3N0byBkZSBzYcO6ZGUgb3Ugc2VsZWNpb25hciAnRW52aWFyIHBhcmEgdG9kb3MnXCIpXG4gICAgfVxuXG4gICAgY29uc3QgcmVjaXBpZW50c1NuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhyZWNpcGllbnRRdWVyeSlcbiAgICBjb25zdCByZWNpcGllbnRzID0gcmVjaXBpZW50c1NuYXBzaG90LmRvY3MubWFwKChkb2MpID0+ICh7XG4gICAgICBpZDogZG9jLmlkLFxuICAgICAgLi4uKGRvYy5kYXRhKCkgYXMgeyBlbWFpbD86IHN0cmluZyB9KSwgLy8gRW5zdXJlIHRoZSBlbWFpbCBwcm9wZXJ0eSBpcyBpbmNsdWRlZCBpZiBpdCBleGlzdHNcbiAgICB9KSlcblxuICAgIGlmIChyZWNpcGllbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTmVuaHVtIGRlc3RpbmF0w6FyaW8gZW5jb250cmFkbyBwYXJhIG9zIGNyaXTDqXJpb3Mgc2VsZWNpb25hZG9zXCIpXG4gICAgfVxuXG4gICAgLy8gQ3JpYXIgdW0gZG9jdW1lbnRvIG5hIGNvbGXDp8OjbyBkZSBub3RpZmljYcOnw7Vlc1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvblJlZiA9IGF3YWl0IGFkZERvYyhjb2xsZWN0aW9uKGRiLCBcIm5vdGlmaWNhdGlvbnNcIiksIHtcbiAgICAgIC4uLm5vdGlmaWNhdGlvbkRhdGEsXG4gICAgICBjcmVhdGVkQXQ6IFRpbWVzdGFtcC5ub3coKSxcbiAgICAgIHN0YXR1czogXCJzZW50XCIsXG4gICAgICByZWNpcGllbnRDb3VudDogcmVjaXBpZW50cy5sZW5ndGgsXG4gICAgICBzZW50Qnk6IGN1cnJlbnRVc2VyLnVpZCxcbiAgICAgIHNlbmRlck5hbWU6IGN1cnJlbnRVc2VyLmRpc3BsYXlOYW1lIHx8IFwiU2lzdGVtYVwiLFxuICAgICAgc2VuZGVyQ2xpbmljSWQ6IHNlbmRlckNsaW5pY0lkIHx8IG51bGwsXG4gICAgfSlcblxuICAgIC8vIENyaWFyIG5vdGlmaWNhw6fDtWVzIGluZGl2aWR1YWlzIHBhcmEgY2FkYSBkZXN0aW5hdMOhcmlvXG4gICAgY29uc3QgYmF0Y2ggPSB3cml0ZUJhdGNoKGRiKVxuXG4gICAgLy8gUHJlcGFyYXIgbyBlbnZpbyBkZSBlbWFpbHNcbiAgICBjb25zdCBlbWFpbFByb21pc2VzID0gW11cblxuICAgIGZvciAoY29uc3QgcmVjaXBpZW50IG9mIHJlY2lwaWVudHMpIHtcbiAgICAgIGlmICghcmVjaXBpZW50LmVtYWlsKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgUmVjaXBpZW50IHdpdGggSUQgJHtyZWNpcGllbnQuaWR9IGRvZXMgbm90IGhhdmUgYW4gZW1haWwgYWRkcmVzcy5gKVxuICAgICAgICBjb250aW51ZSAvLyBTa2lwIHJlY2lwaWVudHMgd2l0aG91dCBhbiBlbWFpbFxuICAgICAgfVxuXG4gICAgICAvLyBBZGljaW9uYXIgbm90aWZpY2HDp8OjbyBpbmRpdmlkdWFsXG4gICAgICBjb25zdCB1c2VyTm90aWZpY2F0aW9uUmVmID0gZG9jKGNvbGxlY3Rpb24oZGIsIFwidXNlck5vdGlmaWNhdGlvbnNcIikpXG4gICAgICBiYXRjaC5zZXQodXNlck5vdGlmaWNhdGlvblJlZiwge1xuICAgICAgICB1c2VySWQ6IHJlY2lwaWVudC5pZCxcbiAgICAgICAgbm90aWZpY2F0aW9uSWQ6IG5vdGlmaWNhdGlvblJlZi5pZCxcbiAgICAgICAgdGl0bGU6IG5vdGlmaWNhdGlvbkRhdGEudGl0bGUsXG4gICAgICAgIG1lc3NhZ2U6IG5vdGlmaWNhdGlvbkRhdGEubWVzc2FnZSxcbiAgICAgICAgdHlwZTogbm90aWZpY2F0aW9uRGF0YS50eXBlLFxuICAgICAgICBjcmVhdGVkQXQ6IFRpbWVzdGFtcC5ub3coKSxcbiAgICAgICAgcmVhZDogZmFsc2UsXG4gICAgICB9KVxuXG4gICAgICAvLyBTZSBvIGRlc3RpbmF0w6FyaW8gdGl2ZXIgZW1haWwsIGFnZW5kYXIgZW52aW8gZGUgZW1haWxcbiAgICAgIGVtYWlsUHJvbWlzZXMucHVzaChcbiAgICAgICAgc2VuZEVtYWlsKFxuICAgICAgICAgIHJlY2lwaWVudC5lbWFpbCxcbiAgICAgICAgICBgTm90aWZpY2HDp8OjbzogJHtub3RpZmljYXRpb25EYXRhLnRpdGxlfWAsXG4gICAgICAgICAgYCR7bm90aWZpY2F0aW9uRGF0YS5tZXNzYWdlfVxuXG5Fc3RhIMOpIHVtYSBtZW5zYWdlbSBhdXRvbcOhdGljYSBkbyBzaXN0ZW1hIGRlIHNhw7pkZS5gLFxuICAgICAgICApLFxuICAgICAgKVxuICAgIH1cblxuICAgIC8vIEV4ZWN1dGFyIG8gYmF0Y2ggZGUgbm90aWZpY2HDp8O1ZXNcbiAgICBhd2FpdCBiYXRjaC5jb21taXQoKVxuXG4gICAgLy8gQWd1YXJkYXIgbyBhZ2VuZGFtZW50byBkZSB0b2RvcyBvcyBlbWFpbHNcbiAgICBhd2FpdCBQcm9taXNlLmFsbChlbWFpbFByb21pc2VzKVxuXG4gICAgY29uc29sZS5sb2coYE5vdGlmaWNhdGlvbiBzZW50OiAke25vdGlmaWNhdGlvblJlZi5pZH0gdG8gJHtyZWNpcGllbnRzLmxlbmd0aH0gcmVjaXBpZW50c2ApXG5cbiAgICByZXR1cm4gbm90aWZpY2F0aW9uUmVmXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNlbmRpbmcgbm90aWZpY2F0aW9uOlwiLCBlcnJvcilcbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG5cbi8vIEFkaWNpb25lIGVzdGEgZnVuw6fDo28gcGFyYSBlbnZpYXIgZW1haWxcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kRW1haWwodG86IHN0cmluZywgc3ViamVjdDogc3RyaW5nLCBib2R5OiBzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICAvLyBDcmlhciB1bSBkb2N1bWVudG8gbmEgY29sZcOnw6NvIGRlIGVtYWlscyBwYXJhIHByb2Nlc3NhbWVudG8gcG9zdGVyaW9yXG4gICAgLy8gKFVtIENsb3VkIEZ1bmN0aW9uIHNlcmlhIHJlc3BvbnPDoXZlbCBwb3IgbW9uaXRvcmFyIGVzdGEgY29sZcOnw6NvIGUgZW52aWFyIG9zIGVtYWlscylcbiAgICBhd2FpdCBhZGREb2MoY29sbGVjdGlvbihkYiwgXCJlbWFpbHNcIiksIHtcbiAgICAgIHRvLFxuICAgICAgc3ViamVjdCxcbiAgICAgIGJvZHksXG4gICAgICBjcmVhdGVkQXQ6IFRpbWVzdGFtcC5ub3coKSxcbiAgICAgIHN0YXR1czogXCJwZW5kaW5nXCIsXG4gICAgfSlcblxuICAgIHJldHVybiB0cnVlXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm8gYW8gYWdlbmRhciBlbnZpbyBkZSBlbWFpbDpcIiwgZXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuLy8gRnVuw6fDo28gcGFyYSBvYnRlciB0b2RhcyBhcyBub3RpZmljYcOnw7Vlc1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE5vdGlmaWNhdGlvbnMoKSB7XG4gIGNvbnN0IG5vdGlmaWNhdGlvbnNSZWYgPSBjb2xsZWN0aW9uKGRiLCBcIm5vdGlmaWNhdGlvbnNcIilcbiAgY29uc3QgcSA9IHF1ZXJ5KG5vdGlmaWNhdGlvbnNSZWYsIG9yZGVyQnkoXCJjcmVhdGVkQXRcIiwgXCJkZXNjXCIpKVxuICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSlcblxuICByZXR1cm4gc25hcHNob3QuZG9jcy5tYXAoKGRvYykgPT4gKHtcbiAgICBpZDogZG9jLmlkLFxuICAgIC4uLmRvYy5kYXRhKCksXG4gICAgY3JlYXRlZEF0OlxuICAgICAgZG9jLmRhdGEoKS5jcmVhdGVkQXQgaW5zdGFuY2VvZiBUaW1lc3RhbXAgPyBkb2MuZGF0YSgpLmNyZWF0ZWRBdC50b0RhdGUoKSA6IG5ldyBEYXRlKGRvYy5kYXRhKCkuY3JlYXRlZEF0KSxcbiAgfSkpXG59XG5cbi8vIEZ1bsOnw6NvIHBhcmEgb2J0ZXIgb3MgdGlwb3MgZGUgbm90aWZpY2HDp8Ojb1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE5vdGlmaWNhdGlvblR5cGVzKCkge1xuICBjb25zdCB0eXBlc1JlZiA9IGNvbGxlY3Rpb24oZGIsIFwibm90aWZpY2F0aW9uVHlwZXNcIilcbiAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBnZXREb2NzKHR5cGVzUmVmKVxuXG4gIHJldHVybiBzbmFwc2hvdC5kb2NzLm1hcCgoZG9jKSA9PiAoe1xuICAgIGlkOiBkb2MuaWQsXG4gICAgLi4uZG9jLmRhdGEoKSxcbiAgfSkpXG59XG5cbi8vIEZ1bsOnw6NvIHBhcmEgYWRpY2lvbmFyIHVtIG5vdm8gdGlwbyBkZSBub3RpZmljYcOnw6NvXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkTm90aWZpY2F0aW9uVHlwZShkYXRhOiB7XG4gIG5hbWU6IHN0cmluZ1xuICBkZXNjcmlwdGlvbjogc3RyaW5nXG4gIHRlbXBsYXRlOiBzdHJpbmdcbn0pIHtcbiAgcmV0dXJuIGFkZERvYyhjb2xsZWN0aW9uKGRiLCBcIm5vdGlmaWNhdGlvblR5cGVzXCIpLCB7XG4gICAgLi4uZGF0YSxcbiAgICBjcmVhdGVkQXQ6IFRpbWVzdGFtcC5ub3coKSxcbiAgfSlcbn1cblxuLy8gRnVuw6fDo28gcGFyYSBleGNsdWlyIHVtIHRpcG8gZGUgbm90aWZpY2HDp8Ojb1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZU5vdGlmaWNhdGlvblR5cGUodHlwZUlkOiBzdHJpbmcpIHtcbiAgY29uc3QgdHlwZVJlZiA9IGRvYyhkYiwgXCJub3RpZmljYXRpb25UeXBlc1wiLCB0eXBlSWQpXG4gIHJldHVybiBkZWxldGVEb2ModHlwZVJlZilcbn1cblxuLy8gRnVuw6fDo28gcGFyYSBidXNjYXIgbm90aWZpY2HDp8O1ZXMgZG8gdXN1w6FyaW9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VyTm90aWZpY2F0aW9ucyh1c2VySWQ6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICB0cnkge1xuICAgIC8vIFZlcmlmaWNhciBzZSB1c2VySWQgw6kgdsOhbGlkb1xuICAgIGlmICghdXNlcklkKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJnZXRVc2VyTm90aWZpY2F0aW9ucyBjaGFtYWRhIGNvbSB1c2VySWQgaW5kZWZpbmlkb1wiKVxuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgY29uc3QgdXNlck5vdGlmaWNhdGlvbnNSZWYgPSBjb2xsZWN0aW9uKGRiLCBcInVzZXJOb3RpZmljYXRpb25zXCIpXG4gICAgY29uc3QgcSA9IHF1ZXJ5KFxuICAgICAgdXNlck5vdGlmaWNhdGlvbnNSZWYsXG4gICAgICB3aGVyZShcInVzZXJJZFwiLCBcIj09XCIsIHVzZXJJZCksXG4gICAgICBvcmRlckJ5KFwiY3JlYXRlZEF0XCIsIFwiZGVzY1wiKSxcbiAgICAgIGxpbWl0KDIwKSwgLy8gTGltaXRhciBhIDIwIG5vdGlmaWNhw6fDtWVzIG1haXMgcmVjZW50ZXNcbiAgICApXG5cbiAgICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSlcbiAgICByZXR1cm4gc25hcHNob3QuZG9jcy5tYXAoKGRvYykgPT4gKHtcbiAgICAgIGlkOiBkb2MuaWQsXG4gICAgICAuLi5kb2MuZGF0YSgpLFxuICAgICAgY3JlYXRlZEF0OlxuICAgICAgICBkb2MuZGF0YSgpLmNyZWF0ZWRBdCBpbnN0YW5jZW9mIFRpbWVzdGFtcCA/IGRvYy5kYXRhKCkuY3JlYXRlZEF0LnRvRGF0ZSgpIDogbmV3IERhdGUoZG9jLmRhdGEoKS5jcmVhdGVkQXQpLFxuICAgIH0pKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvIGFvIGJ1c2NhciBub3RpZmljYcOnw7VlcyBkbyB1c3XDoXJpbzpcIiwgZXJyb3IpXG4gICAgcmV0dXJuIFtdXG4gIH1cbn1cblxuLy8gRnVuw6fDo28gcGFyYSBtYXJjYXIgdW1hIG5vdGlmaWNhw6fDo28gY29tbyBsaWRhIC0gY29ycmlnaWRhIHBhcmEgdmFsaWRhciBvIElEXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFya05vdGlmaWNhdGlvbkFzUmVhZChub3RpZmljYXRpb25JZDogc3RyaW5nKSB7XG4gIHRyeSB7XG4gICAgaWYgKCFub3RpZmljYXRpb25JZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSUQgZGUgbm90aWZpY2HDp8OjbyBpbnbDoWxpZG9cIilcbiAgICB9XG5cbiAgICBjb25zdCBub3RpZmljYXRpb25SZWYgPSBkb2MoZGIsIFwidXNlck5vdGlmaWNhdGlvbnNcIiwgbm90aWZpY2F0aW9uSWQpXG4gICAgYXdhaXQgdXBkYXRlRG9jKG5vdGlmaWNhdGlvblJlZiwgeyByZWFkOiB0cnVlIH0pXG4gICAgcmV0dXJuIHRydWVcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJybyBhbyBtYXJjYXIgbm90aWZpY2HDp8OjbyBjb21vIGxpZGE6XCIsIGVycm9yKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuLy8gRnVuw6fDo28gcGFyYSBjb250YXIgbm90aWZpY2HDp8O1ZXMgbsOjbyBsaWRhcyAtIGNvcnJpZ2lkYSBwYXJhIGxpZGFyIGNvbSB1c2VySWQgdW5kZWZpbmVkXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY291bnRVbnJlYWROb3RpZmljYXRpb25zKHVzZXJJZDogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZpY2FyIHNlIHVzZXJJZCDDqSB2w6FsaWRvXG4gICAgaWYgKCF1c2VySWQpIHtcbiAgICAgIGNvbnNvbGUud2FybihcImNvdW50VW5yZWFkTm90aWZpY2F0aW9ucyBjaGFtYWRhIGNvbSB1c2VySWQgaW5kZWZpbmlkb1wiKVxuICAgICAgcmV0dXJuIDBcbiAgICB9XG5cbiAgICBjb25zdCB1c2VyTm90aWZpY2F0aW9uc1JlZiA9IGNvbGxlY3Rpb24oZGIsIFwidXNlck5vdGlmaWNhdGlvbnNcIilcbiAgICBjb25zdCBxID0gcXVlcnkodXNlck5vdGlmaWNhdGlvbnNSZWYsIHdoZXJlKFwidXNlcklkXCIsIFwiPT1cIiwgdXNlcklkKSwgd2hlcmUoXCJyZWFkXCIsIFwiPT1cIiwgZmFsc2UpKVxuXG4gICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBnZXREb2NzKHEpXG4gICAgcmV0dXJuIHNuYXBzaG90LnNpemVcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJybyBhbyBjb250YXIgbm90aWZpY2HDp8O1ZXMgbsOjbyBsaWRhczpcIiwgZXJyb3IpXG4gICAgcmV0dXJuIDBcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q2xpbmljQnlJZChjbGluaWNJZDogc3RyaW5nKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgY2xpbmljUmVmID0gZG9jKGRiLCBcImNsaW5pY3NcIiwgY2xpbmljSWQpXG4gICAgY29uc3QgY2xpbmljU25hcCA9IGF3YWl0IGdldERvYyhjbGluaWNSZWYpXG5cbiAgICBpZiAoY2xpbmljU25hcC5leGlzdHMoKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IGNsaW5pY1NuYXAuaWQsXG4gICAgICAgIC4uLmNsaW5pY1NuYXAuZGF0YSgpLFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJObyBzdWNoIGRvY3VtZW50IVwiKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdldHRpbmcgZG9jdW1lbnQ6XCIsIGVycm9yKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldERvY3RvckJ5SWQoZG9jdG9ySWQ6IHN0cmluZywgY2xpbmljSWQ6IHN0cmluZykge1xuICB0cnkge1xuICAgIGNvbnN0IGRvY3RvclJlZiA9IGRvYyhnZXREb2N0b3JzUmVmKGNsaW5pY0lkKSwgZG9jdG9ySWQpO1xuICAgIGNvbnN0IGRvY3RvclNuYXAgPSBhd2FpdCBnZXREb2MoZG9jdG9yUmVmKTtcblxuICAgIGlmIChkb2N0b3JTbmFwLmV4aXN0cygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogZG9jdG9yU25hcC5pZCxcbiAgICAgICAgY2xpbmljSWQsXG4gICAgICAgIC4uLmRvY3RvclNuYXAuZGF0YSgpLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKFwiTm8gc3VjaCBkb2N1bWVudCFcIik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdldHRpbmcgZG9jdW1lbnQ6XCIsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QXBwb2ludG1lbnRzKGNsaW5pY0lkOiBzdHJpbmcsIGRvY3RvcklkPzogc3RyaW5nLCBzdGFydERhdGU/OiBEYXRlLCBlbmREYXRlPzogRGF0ZSkge1xuICB0cnkge1xuICAgIGxldCBxID0gcXVlcnkoYXBwb2ludG1lbnRzUmVmLCB3aGVyZShcImNsaW5pY0lkXCIsIFwiPT1cIiwgY2xpbmljSWQpKTtcbiAgICBcbiAgICBpZiAoZG9jdG9ySWQpIHtcbiAgICAgIHEgPSBxdWVyeShxLCB3aGVyZShcImRvY3RvcklkXCIsIFwiPT1cIiwgZG9jdG9ySWQpKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKHN0YXJ0RGF0ZSkge1xuICAgICAgcSA9IHF1ZXJ5KHEsIHdoZXJlKFwiZGF0ZVwiLCBcIj49XCIsIHN0YXJ0RGF0ZSkpO1xuICAgIH1cbiAgICBcbiAgICBpZiAoZW5kRGF0ZSkge1xuICAgICAgcSA9IHF1ZXJ5KHEsIHdoZXJlKFwiZGF0ZVwiLCBcIjw9XCIsIGVuZERhdGUpKTtcbiAgICB9XG5cbiAgICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSk7XG4gICAgcmV0dXJuIHNuYXBzaG90LmRvY3MubWFwKGRvYyA9PiAoe1xuICAgICAgaWQ6IGRvYy5pZCxcbiAgICAgIC4uLmRvYy5kYXRhKCksXG4gICAgICBkYXRlOiBkb2MuZGF0YSgpLmRhdGUudG9EYXRlKClcbiAgICB9KSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdldHRpbmcgYXBwb2ludG1lbnRzOlwiLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmVBY3Rpdml0eShcbiAgdXNlcjogYW55LFxuICBhY3Rpdml0eURhdGE6IGFueVxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIHRyeSB7XG4gICAgaWYgKCF1c2VyIHx8ICF1c2VyLmNsaW5pY0lkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVc3XDoXJpbyBvdSBwb3N0byBkZSBzYcO6ZGUgbsOjbyBjb25maWd1cmFkbyBjb3JyZXRhbWVudGUuXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGNsaW5pY0FjdGl2aXRpZXNSZWYgPSBjb2xsZWN0aW9uKFxuICAgICAgZG9jKGRiLCBcImNsaW5pY3NcIiwgdXNlci5jbGluaWNJZCksXG4gICAgICBcImFjdGl2aXRpZXNcIlxuICAgICk7XG5cbiAgICAvLyBDYXNvIG8gdXN1w6FyaW8gc2VqYSBhZG1pbiBvdSByZWNlcHRpb25pc3RcbiAgICBpZiAodXNlci50eXBlID09PSBcImFkbWluXCIgfHwgdXNlci50eXBlID09PSBcInJlY2VwdGlvbmlzdFwiKSB7XG4gICAgICBhd2FpdCBhZGREb2MoY2xpbmljQWN0aXZpdGllc1JlZiwge1xuICAgICAgICAuLi5hY3Rpdml0eURhdGEsXG4gICAgICAgIGNyZWF0ZWRCeTogdXNlci51aWQsXG4gICAgICAgIGNyZWF0ZWRBdDogc2VydmVyVGltZXN0YW1wKCksXG4gICAgICB9KTtcbiAgICAgIGNvbnNvbGUubG9nKFwiQXRpdmlkYWRlIHNhbHZhIG5vIHBvc3RvIGRlIHNhw7pkZS5cIik7XG4gICAgfVxuICAgIC8vIENhc28gbyB1c3XDoXJpbyBzZWphIGRvY3RvciBvdSBudXJzZVxuICAgIGVsc2UgaWYgKHVzZXIudHlwZSA9PT0gXCJkb2N0b3JcIiB8fCB1c2VyLnR5cGUgPT09IFwibnVyc2VcIikge1xuICAgICAgY29uc3QgdXNlckFjdGl2aXRpZXNSZWYgPSBjb2xsZWN0aW9uKFxuICAgICAgICBkb2MoZGIsIFwidXNlcnNcIiwgdXNlci51aWQpLFxuICAgICAgICBcImFjdGl2aXRpZXNcIlxuICAgICAgKTtcblxuICAgICAgLy8gU2FsdmFyIG5vIHBvc3RvIGRlIHNhw7pkZVxuICAgICAgYXdhaXQgYWRkRG9jKGNsaW5pY0FjdGl2aXRpZXNSZWYsIHtcbiAgICAgICAgLi4uYWN0aXZpdHlEYXRhLFxuICAgICAgICBjcmVhdGVkQnk6IHVzZXIudWlkLFxuICAgICAgICBjcmVhdGVkQXQ6IHNlcnZlclRpbWVzdGFtcCgpLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFNhbHZhciBubyBwZXJmaWwgZG8gdXN1w6FyaW9cbiAgICAgIGF3YWl0IGFkZERvYyh1c2VyQWN0aXZpdGllc1JlZiwge1xuICAgICAgICAuLi5hY3Rpdml0eURhdGEsXG4gICAgICAgIGNyZWF0ZWRCeTogdXNlci51aWQsXG4gICAgICAgIGNyZWF0ZWRBdDogc2VydmVyVGltZXN0YW1wKCksXG4gICAgICB9KTtcblxuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgIFwiQXRpdmlkYWRlIHNhbHZhIG5vIHBvc3RvIGRlIHNhw7pkZSBlIG5vIHBlcmZpbCBkbyB1c3XDoXJpby5cIlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGlwbyBkZSB1c3XDoXJpbyBuw6NvIHN1cG9ydGFkbyBwYXJhIHNhbHZhciBhdGl2aWRhZGVzLlwiKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm8gYW8gc2FsdmFyIGF0aXZpZGFkZTpcIiwgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVVuZGVmaW5lZEZpZWxkcyhkYXRhOiBhbnkpIHtcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcbiAgICBPYmplY3QuZW50cmllcyhkYXRhKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICk7XG59XG5cbmludGVyZmFjZSBEb2N0b3JEYXRhIHtcbiAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gIGxhc3ROYW1lOiBzdHJpbmc7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIGNsaW5pY0lkOiBzdHJpbmc7XG4gIHdvcmtpbmdIb3Vycz86IHtcbiAgICBzdGFydDogc3RyaW5nO1xuICAgIGVuZDogc3RyaW5nO1xuICB9O1xuICBba2V5OiBzdHJpbmddOiBhbnk7IC8vIFBlcm1pdGUgcHJvcHJpZWRhZGVzIGFkaWNpb25haXMsIHNlIG5lY2Vzc8OhcmlvXG59XG5cbmludGVyZmFjZSBDbGluaWMge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGFkZHJlc3M6IHN0cmluZztcbiAgd29ya2luZ0hvdXJzPzoge1xuICAgIHN0YXJ0OiBzdHJpbmc7XG4gICAgZW5kOiBzdHJpbmc7XG4gIH07XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuaW50ZXJmYWNlIFdvcmtpbmdTY2hlZHVsZSB7XG4gIGNsaW5pY0lkOiBzdHJpbmc7XG4gIHdvcmtpbmdEYXlzOiBzdHJpbmdbXTtcbiAgd29ya2luZ0hvdXJzOiB7XG4gICAgc3RhcnQ6IHN0cmluZztcbiAgICBlbmQ6IHN0cmluZztcbiAgfTtcbn1cblxuY29uc3Qgc2NoZWR1bGVzUmVmID0gY29sbGVjdGlvbihkYiwgJ2Z1bmNpb25hbWVudG8nKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmVTY2hlZHVsZShjbGluaWNJZDogc3RyaW5nLCBzY2hlZHVsZTogT21pdDxXb3JraW5nU2NoZWR1bGUsICdjbGluaWNJZCc+KSB7XG4gIGF3YWl0IHNldERvYyhkb2Moc2NoZWR1bGVzUmVmLCBjbGluaWNJZCksIHtcbiAgICBjbGluaWNJZCxcbiAgICAuLi5zY2hlZHVsZSxcbiAgICB1cGRhdGVkQXQ6IHNlcnZlclRpbWVzdGFtcCgpLFxuICB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENsaW5pY1NjaGVkdWxlKGNsaW5pY0lkOiBzdHJpbmcpIHtcbiAgY29uc3Qgc2NoZWR1bGVEb2MgPSBhd2FpdCBnZXREb2MoZG9jKHNjaGVkdWxlc1JlZiwgY2xpbmljSWQpKTtcbiAgcmV0dXJuIHNjaGVkdWxlRG9jLmV4aXN0cygpID8gc2NoZWR1bGVEb2MuZGF0YSgpIGFzIFdvcmtpbmdTY2hlZHVsZSA6IG51bGw7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVFeGFtRGF0ZShleGFtSWQ6IHN0cmluZywgbmV3RGF0ZTogRGF0ZSkge1xuICB0cnkge1xuICAgIGNvbnN0IGV4YW1SZWYgPSBkb2MoZGIsICdleGFtcycsIGV4YW1JZCk7XG4gICAgYXdhaXQgdXBkYXRlRG9jKGV4YW1SZWYsIHtcbiAgICAgIGRhdGU6IFRpbWVzdGFtcC5mcm9tRGF0ZShuZXdEYXRlKSxcbiAgICAgIGZvcm1hdHRlZERhdGU6IGZvcm1hdChuZXdEYXRlLCBcImRkL01NL3l5eXkgSEg6bW1cIiwgeyBsb2NhbGU6IHB0QlIgfSlcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyBleGFtIGRhdGU6JywgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRFeGFtQXBwb2ludG1lbnQoY2xpbmljSWQ6IHN0cmluZywgZXhhbURhdGE6IGFueSkge1xuICB0cnkge1xuICAgIC8vIENyZWF0ZSByZWZlcmVuY2UgdG8gY2xpbmljJ3MgYXBwb2ludG1lbnRzIHN1YmNvbGxlY3Rpb25cbiAgICBjb25zdCBhcHBvaW50bWVudHNSZWYgPSBjb2xsZWN0aW9uKGRiLCBgY2xpbmljcy8ke2NsaW5pY0lkfS9hcHBvaW50bWVudHNgKTtcbiAgICBjb25zdCBhcHBvaW50bWVudERvYyA9IGRvYyhhcHBvaW50bWVudHNSZWYpO1xuXG4gICAgLy8gQWRkIGV4YW0gZGF0YSB0byBhcHBvaW50bWVudHMgc3ViY29sbGVjdGlvblxuICAgIGF3YWl0IHNldERvYyhhcHBvaW50bWVudERvYywge1xuICAgICAgLi4uZXhhbURhdGEsXG4gICAgICBpZDogYXBwb2ludG1lbnREb2MuaWQsXG4gICAgICBjcmVhdGVkQXQ6IFRpbWVzdGFtcC5ub3coKSxcbiAgICAgIHVwZGF0ZWRBdDogVGltZXN0YW1wLm5vdygpLFxuICAgICAgdHlwZTogJ2V4YW0nLFxuICAgICAgc3RhdHVzOiAnQWdlbmRhZG8nXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXBwb2ludG1lbnREb2MuaWQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgYWRkaW5nIGV4YW0gYXBwb2ludG1lbnQ6JywgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbmV4cG9ydCB7IGRiIH1cblxuIl0sIm5hbWVzIjpbImluaXRpYWxpemVBcHAiLCJnZXRBcHBzIiwiZ2V0RmlyZXN0b3JlIiwiY29sbGVjdGlvbiIsInF1ZXJ5Iiwid2hlcmUiLCJvcmRlckJ5IiwiZ2V0RG9jcyIsImRvYyIsInVwZGF0ZURvYyIsImFkZERvYyIsIlRpbWVzdGFtcCIsImdldERvYyIsInNldERvYyIsImxpbWl0IiwiYXJyYXlVbmlvbiIsImFycmF5UmVtb3ZlIiwiZGVsZXRlRG9jIiwid3JpdGVCYXRjaCIsInNlcnZlclRpbWVzdGFtcCIsImdldFN0b3JhZ2UiLCJyZWYiLCJ1cGxvYWRCeXRlcyIsImdldERvd25sb2FkVVJMIiwiZ2V0QXV0aCIsImNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCIsInNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkIiwidXBkYXRlUHJvZmlsZSIsInVwZGF0ZVBhc3N3b3JkIiwic2lnbk91dCIsImZvcm1hdCIsImFkZE1pbnV0ZXMiLCJzdGFydE9mRGF5IiwiZW5kT2ZEYXkiLCJwdEJSIiwiZmlyZWJhc2VDb25maWciLCJhcGlLZXkiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfRklSRUJBU0VfQVBJX0tFWSIsImF1dGhEb21haW4iLCJORVhUX1BVQkxJQ19GSVJFQkFTRV9BVVRIX0RPTUFJTiIsInByb2plY3RJZCIsIk5FWFRfUFVCTElDX0ZJUkVCQVNFX1BST0pFQ1RfSUQiLCJzdG9yYWdlQnVja2V0IiwiTkVYVF9QVUJMSUNfRklSRUJBU0VfU1RPUkFHRV9CVUNLRVQiLCJtZXNzYWdpbmdTZW5kZXJJZCIsIk5FWFRfUFVCTElDX0ZJUkVCQVNFX01FU1NBR0lOR19TRU5ERVJfSUQiLCJhcHBJZCIsIk5FWFRfUFVCTElDX0ZJUkVCQVNFX0FQUF9JRCIsIm1lYXN1cmVtZW50SWQiLCJORVhUX1BVQkxJQ19GSVJFQkFTRV9NRUFTVVJFTUVOVF9JRCIsImFwcCIsImxlbmd0aCIsImRiIiwic3RvcmFnZSIsImF1dGgiLCJjb25zdWx0YXRpb25zUmVmIiwiZXhhbXNSZWYiLCJjbGluaWNzUmVmIiwidXNlcnNSZWYiLCJhcHBvaW50bWVudHNSZWYiLCJnZXREb2N0b3JzUmVmIiwiY2xpbmljSWQiLCJnZXRDbGluaWNVc2Vyc1JlZiIsImdlbmVyYXRlU3Ryb25nUGFzc3dvcmQiLCJ1cHBlcmNhc2UiLCJsb3dlcmNhc2UiLCJudW1iZXJzIiwic3ltYm9scyIsImFsbENoYXJzIiwicGFzc3dvcmQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJpIiwic3BsaXQiLCJzb3J0Iiwiam9pbiIsImdlbmVyYXRlVW5pcXVlSWQiLCJjaGFycyIsInJlc3VsdCIsInJhbmRvbVZhbHVlcyIsIlVpbnQzMkFycmF5IiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiY2hhckF0IiwiZ2VuZXJhdGVUaW1lU2xvdHMiLCJzdGFydCIsImVuZCIsInNsb3RzIiwic3RhcnRIb3VyIiwic3RhcnRNaW51dGUiLCJtYXAiLCJOdW1iZXIiLCJlbmRIb3VyIiwiZW5kTWludXRlIiwic3RhcnREYXRlIiwiRGF0ZSIsInNldEhvdXJzIiwiZW5kRGF0ZSIsImN1cnJlbnRTbG90IiwicHVzaCIsImVycm9yIiwiY29uc29sZSIsImdlbmVyYXRlRGFpbHlUaW1lU2xvdHMiLCJ0aW1lIiwiaXNBdmFpbGFibGUiLCJnZXRDbGluaWNXb3JraW5nSG91cnMiLCJjbGluaWNSZWYiLCJjbGluaWNEb2MiLCJleGlzdHMiLCJFcnJvciIsImNsaW5pY0RhdGEiLCJkYXRhIiwid29ya2luZ0hvdXJzIiwid29ya2luZ0RheXMiLCJnZXRBdmFpbGFibGVUaW1lU2xvdHMiLCJzZWxlY3RlZERhdGUiLCJ0eXBlIiwiZG9jdG9ySWQiLCJzY2hlZHVsZSIsImRlZmF1bHRUaW1lU2xvdHMiLCJ3ZWVrRGF5IiwibG9jYWxlIiwidG9Mb3dlckNhc2UiLCJub3JtYWxpemUiLCJyZXBsYWNlIiwiaW5jbHVkZXMiLCJsb2ciLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwiYXBwb2ludG1lbnRzUXVlcnkiLCJhcHBvaW50bWVudHMiLCJib29rZWRTbG90cyIsIlNldCIsImRvY3MiLCJmaWx0ZXIiLCJhcHBvaW50bWVudERhdGUiLCJkYXRlIiwidG9EYXRlIiwiZGVmYXVsdFNsb3RzIiwic2xvdCIsImhhcyIsInJlZ2lzdGVyIiwibmFtZSIsInN1cyIsInN0cm9uZ1Bhc3N3b3JkIiwidXNlckNyZWRlbnRpYWwiLCJ1c2VyIiwiZGlzcGxheU5hbWUiLCJQcm9taXNlIiwiYWxsIiwidWlkIiwiZW1haWwiLCJjcmVhdGVkQXQiLCJ1cGRhdGVkQXQiLCJ0ZW1wb3JhcnlQYXNzd29yZCIsInVuZGVmaW5lZCIsImNyZWF0ZUFkbWluVXNlciIsImFkbWluRGF0YSIsInRvSVNPU3RyaW5nIiwiaWQiLCJsb2dpbiIsInJvb3RVc2VyRG9jIiwidXNlckRhdGEiLCJjbGluaWNOYW1lIiwiaXNBZG1pbiIsImxvZ291dCIsImxvY2FsU3RvcmFnZSIsImNsZWFyIiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRVc2VycyIsInNuYXBzaG90IiwiYWRkVXNlciIsInVwZGF0ZVVzZXIiLCJ1c2VySWQiLCJuZXdDbGluaWNJZCIsImdsb2JhbFVzZXJSZWYiLCJnbG9iYWxVc2VyRG9jIiwiY3VycmVudFVzZXJEYXRhIiwib2xkQ2xpbmljSWQiLCJiYXRjaCIsIm9sZENsaW5pY1VzZXJSZWYiLCJkZWxldGUiLCJuZXdDbGluaWNVc2VyUmVmIiwic2V0IiwidXBkYXRlIiwib2xkRG9jdG9yUmVmIiwib2xkRG9jdG9yRG9jIiwiZG9jdG9yRGF0YSIsIm5ld0RvY3RvclJlZiIsImNvbW1pdCIsImNsaW5pY1VzZXJSZWYiLCJ1cGRhdGVVc2VyUHJvZmlsZSIsInVzZXJSZWYiLCJ1c2VyRG9jIiwidXBkYXRlVXNlclBhc3N3b3JkIiwiY3VycmVudFBhc3N3b3JkIiwibmV3UGFzc3dvcmQiLCJjdXJyZW50VXNlciIsImRlbGV0ZVVzZXIiLCJjb25zdWx0YXRpb25zU25hcHNob3QiLCJleGFtc1NuYXBzaG90IiwiZW1wdHkiLCJnZXRVc2VyRGV0YWlscyIsImdldENvbnN1bHRhdGlvbnNCeVVzZXIiLCJxIiwiZ2V0RXhhbXNCeVVzZXIiLCJnZXRDbGluaWNzIiwiZ2V0Q2xpbmljIiwiY2xpbmljU25hcCIsIndhcm4iLCJhZGRDbGluaWMiLCJub3ciLCJzY2hlZHVsZVJlZiIsImlzMjRIb3VycyIsInVwZGF0ZUNsaW5pYyIsInVwZGF0ZURhdGEiLCJvcGVuaW5nSG91ciIsImZyb21EYXRlIiwiY2xvc2luZ0hvdXIiLCJkZWxldGVDbGluaWMiLCJkb2N0b3JzU25hcHNob3QiLCJmb3JFYWNoIiwiZ2V0RG9jdG9ycyIsImNsaW5pY3NTbmFwc2hvdCIsImRvY3RvcnNQcm9taXNlcyIsImFsbERvY3RvcnMiLCJmbGF0IiwiYWRkRG9jdG9yIiwiZG9jSWQiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsImRvY3RvcnNSZWYiLCJjbGVhbmVkRGF0YSIsInJlbW92ZVVuZGVmaW5lZEZpZWxkcyIsImdldERvY3RvclNlcnZpY2VzIiwiZG9jdG9yUmVmIiwiZG9jdG9yU25hcCIsInNlcnZpY2VzIiwiYWRkRG9jdG9yU2VydmljZXMiLCJtZXJnZSIsInJlbW92ZURvY3RvclNlcnZpY2UiLCJzZXJ2aWNlIiwiZ2V0Q29uc3VsdGF0aW9ucyIsImNvbnN1bHRhdGlvbklkIiwiZm9ybWF0dGVkRGF0ZSIsImEiLCJiIiwiZ2V0VGltZSIsImdldENvbnN1bHRhdGlvbnNCeURvY3RvciIsImNsZWFuRmlyZXN0b3JlRGF0YSIsImNsZWFuIiwiT2JqZWN0Iiwia2V5cyIsImtleSIsImFkZENvbnN1bHRhdGlvbiIsImNvbnN1bHRhdGlvbkRhdGEiLCJjb25zdWx0YXRpb25SZWYiLCJkYXRlVGltZSIsImFwcG9pbnRtZW50UmVmIiwiYXBwb2ludG1lbnREYXRhIiwicGF0aWVudE5hbWUiLCJkdXJhdGlvbiIsInN0YXR1cyIsImNsZWFuZWRDb25zdWx0YXRpb25EYXRhIiwiYXBwb2ludG1lbnRJZCIsInVwZGF0ZUNvbnN1bHRhdGlvblN0YXR1cyIsIm5ld1N0YXR1cyIsImdldEV4YW1zIiwiZXhhbUlkIiwiYWRkRXhhbSIsImV4YW1EYXRhIiwiaG91cnMiLCJtaW51dGVzIiwiZXhhbURhdGUiLCJjbGVhbmVkRXhhbURhdGEiLCJleGFtUmVmIiwidXBkYXRlRXhhbVN0YXR1cyIsImdldEV4YW1UeXBlcyIsImV4YW1UeXBlcyIsImFkZEV4YW1UeXBlIiwiZXhhbVR5cGVEYXRhIiwiZXhhbVR5cGVzUmVmIiwiZXhhbVR5cGVXaXRoTWV0YWRhdGEiLCJkb2NSZWYiLCJleGFtVHlwZUlkcyIsImdldEV4YW1UeXBlc0J5Q2xpbmljIiwidXBkYXRlRXhhbVR5cGUiLCJleGFtVHlwZUlkIiwiZXhhbVR5cGVSZWYiLCJkZWxldGVFeGFtVHlwZSIsInJlbW92ZUV4YW1UeXBlIiwiZXhhbVR5cGUiLCJhZGREb2N0b3JTZXJ2aWNlIiwic2VydmljZURhdGEiLCJzZXJ2aWNlc1JlZiIsInNlcnZpY2VXaXRoTWV0YWRhdGEiLCJzZXJ2aWNlSWRzIiwiZ2V0RG9jdG9yU2VydmljZXNCeURvY3RvciIsInVwZGF0ZURvY3RvclNlcnZpY2UiLCJzZXJ2aWNlSWQiLCJzZXJ2aWNlUmVmIiwiZGVsZXRlRG9jdG9yU2VydmljZSIsImdldERhc2hib2FyZERhdGEiLCJjb25zdWx0YXRpb25zIiwiZXhhbXMiLCJkb2N0b3JzIiwiY29uc3VsdGF0aW9uU3RhdHVzZXMiLCJyZWR1Y2UiLCJhY2MiLCJjb25zdWx0YXRpb24iLCJleGFtU3RhdHVzZXMiLCJleGFtIiwidG9kYXkiLCJ0b2RheUNvbnN1bHRhdGlvbnMiLCJjb25zdWx0YXRpb25EYXRlIiwic2Vjb25kcyIsInRvZGF5RXhhbXMiLCJ0b3RhbERvY3RvcnMiLCJzaXplIiwidG90YWxDb25zdWx0YXRpb25zIiwidG90YWxFeGFtcyIsImNvbXBsZXRlZENvbnN1bHRhdGlvbnMiLCJDb25jbHXDrWRhIiwiY29tcGxldGVkRXhhbXMiLCJDb25jbHXDrWRvIiwicmVjZW50RG9jdG9ycyIsInVwbG9hZEZpbGUiLCJmaWxlIiwicGF0aCIsInN0b3JhZ2VSZWYiLCJhZGRQYXRpZW50IiwicGF0aWVudERhdGEiLCJwYXRpZW50V2l0aE1ldGFkYXRhIiwiZ2V0UGF0aWVudHNCeUNsaW5pYyIsInF1ZXJ5U25hcHNob3QiLCJwYXRpZW50cyIsImdldEFsbFBhdGllbnRzIiwiZ2V0UGF0aWVudEFwcG9pbnRtZW50cyIsInBhdGllbnRJZCIsImNvbnN1bHRhdGlvbnNRdWVyeSIsImV4YW1zUXVlcnkiLCJnZXREb2N0b3JzQnlDbGluaWMiLCJnZXRDb25zdWx0YXRpb25zQnlDbGluaWMiLCJzdGFydFRpbWVzdGFtcCIsImVuZFRpbWVzdGFtcCIsImdldEV4YW1zQnlDbGluaWMiLCJzZW5kTWFzc05vdGlmaWNhdGlvbiIsIm5vdGlmaWNhdGlvbkRhdGEiLCJ0aXRsZSIsIm1lc3NhZ2UiLCJyZWNpcGllbnRRdWVyeSIsInNlbmRlckNsaW5pY0lkIiwic2VuZFRvQWxsIiwicmVjaXBpZW50c1NuYXBzaG90IiwicmVjaXBpZW50cyIsIm5vdGlmaWNhdGlvblJlZiIsInJlY2lwaWVudENvdW50Iiwic2VudEJ5Iiwic2VuZGVyTmFtZSIsImVtYWlsUHJvbWlzZXMiLCJyZWNpcGllbnQiLCJ1c2VyTm90aWZpY2F0aW9uUmVmIiwibm90aWZpY2F0aW9uSWQiLCJyZWFkIiwic2VuZEVtYWlsIiwidG8iLCJzdWJqZWN0IiwiYm9keSIsImdldE5vdGlmaWNhdGlvbnMiLCJub3RpZmljYXRpb25zUmVmIiwiZ2V0Tm90aWZpY2F0aW9uVHlwZXMiLCJ0eXBlc1JlZiIsImFkZE5vdGlmaWNhdGlvblR5cGUiLCJkZWxldGVOb3RpZmljYXRpb25UeXBlIiwidHlwZUlkIiwidHlwZVJlZiIsImdldFVzZXJOb3RpZmljYXRpb25zIiwidXNlck5vdGlmaWNhdGlvbnNSZWYiLCJtYXJrTm90aWZpY2F0aW9uQXNSZWFkIiwiY291bnRVbnJlYWROb3RpZmljYXRpb25zIiwiZ2V0Q2xpbmljQnlJZCIsImdldERvY3RvckJ5SWQiLCJnZXRBcHBvaW50bWVudHMiLCJzYXZlQWN0aXZpdHkiLCJhY3Rpdml0eURhdGEiLCJjbGluaWNBY3Rpdml0aWVzUmVmIiwiY3JlYXRlZEJ5IiwidXNlckFjdGl2aXRpZXNSZWYiLCJmcm9tRW50cmllcyIsImVudHJpZXMiLCJfIiwidmFsdWUiLCJzY2hlZHVsZXNSZWYiLCJzYXZlU2NoZWR1bGUiLCJnZXRDbGluaWNTY2hlZHVsZSIsInNjaGVkdWxlRG9jIiwidXBkYXRlRXhhbURhdGUiLCJuZXdEYXRlIiwiYWRkRXhhbUFwcG9pbnRtZW50IiwiYXBwb2ludG1lbnREb2MiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/firebase.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fappointments%2Froute&page=%2Fapi%2Fappointments%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fappointments%2Froute.ts&appDir=C%3A%5CUsers%5Czero%5CDownloads%5Chealthcare-dashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Czero%5CDownloads%5Chealthcare-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fappointments%2Froute&page=%2Fapi%2Fappointments%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fappointments%2Froute.ts&appDir=C%3A%5CUsers%5Czero%5CDownloads%5Chealthcare-dashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Czero%5CDownloads%5Chealthcare-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_zero_Downloads_healthcare_dashboard_app_api_appointments_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/appointments/route.ts */ \"(rsc)/./app/api/appointments/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/appointments/route\",\n        pathname: \"/api/appointments\",\n        filename: \"route\",\n        bundlePath: \"app/api/appointments/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\zero\\\\Downloads\\\\healthcare-dashboard\\\\app\\\\api\\\\appointments\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_zero_Downloads_healthcare_dashboard_app_api_appointments_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZhcHBvaW50bWVudHMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmFwcG9pbnRtZW50cyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmFwcG9pbnRtZW50cyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUN6ZXJvJTVDRG93bmxvYWRzJTVDaGVhbHRoY2FyZS1kYXNoYm9hcmQlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q3plcm8lNUNEb3dubG9hZHMlNUNoZWFsdGhjYXJlLWRhc2hib2FyZCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDcUI7QUFDa0M7QUFDL0c7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlHQUFtQjtBQUMzQztBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBc0Q7QUFDOUQ7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDMEY7O0FBRTFGIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXHplcm9cXFxcRG93bmxvYWRzXFxcXGhlYWx0aGNhcmUtZGFzaGJvYXJkXFxcXGFwcFxcXFxhcGlcXFxcYXBwb2ludG1lbnRzXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hcHBvaW50bWVudHMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hcHBvaW50bWVudHNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2FwcG9pbnRtZW50cy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXHplcm9cXFxcRG93bmxvYWRzXFxcXGhlYWx0aGNhcmUtZGFzaGJvYXJkXFxcXGFwcFxcXFxhcGlcXFxcYXBwb2ludG1lbnRzXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fappointments%2Froute&page=%2Fapi%2Fappointments%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fappointments%2Froute.ts&appDir=C%3A%5CUsers%5Czero%5CDownloads%5Chealthcare-dashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Czero%5CDownloads%5Chealthcare-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "dns":
/*!**********************!*\
  !*** external "dns" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("dns");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "http2":
/*!************************!*\
  !*** external "http2" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("http2");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("process");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@firebase","vendor-chunks/@grpc","vendor-chunks/protobufjs","vendor-chunks/date-fns","vendor-chunks/long","vendor-chunks/@protobufjs","vendor-chunks/lodash.camelcase","vendor-chunks/tslib","vendor-chunks/idb","vendor-chunks/firebase"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fappointments%2Froute&page=%2Fapi%2Fappointments%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fappointments%2Froute.ts&appDir=C%3A%5CUsers%5Czero%5CDownloads%5Chealthcare-dashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Czero%5CDownloads%5Chealthcare-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();