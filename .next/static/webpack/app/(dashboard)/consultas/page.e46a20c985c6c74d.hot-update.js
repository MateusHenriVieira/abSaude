"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(dashboard)/consultas/page",{

/***/ "(app-pages-browser)/./lib/doctor-scheduling.ts":
/*!**********************************!*\
  !*** ./lib/doctor-scheduling.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockTimeSlot: () => (/* binding */ blockTimeSlot),\n/* harmony export */   checkSlotsAvailability: () => (/* binding */ checkSlotsAvailability),\n/* harmony export */   cleanupExpiredBlocks: () => (/* binding */ cleanupExpiredBlocks),\n/* harmony export */   fetchDoctorWorkingHours: () => (/* binding */ fetchDoctorWorkingHours),\n/* harmony export */   generateAppointmentSlots: () => (/* binding */ generateAppointmentSlots),\n/* harmony export */   scheduleAppointment: () => (/* binding */ scheduleAppointment),\n/* harmony export */   unblockTimeSlot: () => (/* binding */ unblockTimeSlot)\n/* harmony export */ });\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/firebase */ \"(app-pages-browser)/./lib/firebase.ts\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=addMinutes,endOfDay,format,startOfDay!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/format.js\");\n/* harmony import */ var _barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=addMinutes,endOfDay,format,startOfDay!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/addMinutes.js\");\n/* harmony import */ var _barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=addMinutes,endOfDay,format,startOfDay!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/startOfDay.js\");\n/* harmony import */ var _barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=addMinutes,endOfDay,format,startOfDay!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/endOfDay.js\");\n/* harmony import */ var date_fns_locale__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! date-fns/locale */ \"(app-pages-browser)/./node_modules/date-fns/locale/pt-BR.js\");\n\n\n\n\n/**\r\n * Fetches doctor working hours from Firestore\r\n * @param clinicId - The clinic ID\r\n * @param doctorId - The doctor ID\r\n * @returns The doctor's schedule including working days and hours\r\n */ async function fetchDoctorWorkingHours(clinicId, doctorId) {\n    try {\n        var _doctorData_schedule, _doctorData_schedule1;\n        // Reference to the doctor document in the clinic's doctors subcollection\n        const doctorRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db, \"clinics\", clinicId, \"doctors\", doctorId);\n        const doctorDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(doctorRef);\n        if (!doctorDoc.exists()) {\n            throw new Error(\"Doctor with ID \".concat(doctorId, \" not found in clinic \").concat(clinicId));\n        }\n        const doctorData = doctorDoc.data();\n        // Extract schedule information\n        const workingDays = ((_doctorData_schedule = doctorData.schedule) === null || _doctorData_schedule === void 0 ? void 0 : _doctorData_schedule.workingDays) || [\n            \"segunda\",\n            \"terca\",\n            \"quarta\",\n            \"quinta\",\n            \"sexta\"\n        ];\n        const workingHours = ((_doctorData_schedule1 = doctorData.schedule) === null || _doctorData_schedule1 === void 0 ? void 0 : _doctorData_schedule1.workingHours) || {\n            start: \"08:00\",\n            end: \"18:00\"\n        };\n        const is24Hours = workingHours.start === \"00:00\" && workingHours.end === \"23:59\";\n        return {\n            workingDays,\n            workingHours,\n            is24Hours\n        };\n    } catch (error) {\n        console.error(\"Error fetching doctor working hours:\", error);\n        // Return default schedule if there's an error\n        return {\n            workingDays: [\n                \"segunda\",\n                \"terca\",\n                \"quarta\",\n                \"quinta\",\n                \"sexta\"\n            ],\n            workingHours: {\n                start: \"08:00\",\n                end: \"18:00\"\n            }\n        };\n    }\n}\n/**\r\n * Generates appointment slots based on doctor working hours\r\n * @param date - The date for which to generate slots\r\n * @param schedule - The doctor's schedule\r\n * @param slotDuration - Duration of each slot in minutes (default: 30)\r\n * @returns Array of appointment slots\r\n */ function generateAppointmentSlots(date, schedule) {\n    let slotDuration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 30;\n    try {\n        const slots = [];\n        // Check if the selected date is a working day\n        const weekDay = (0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_2__.format)(date, \"EEEE\", {\n            locale: date_fns_locale__WEBPACK_IMPORTED_MODULE_3__.ptBR\n        }).toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").replace(\"-feira\", \"\");\n        if (!schedule.workingDays.includes(weekDay)) {\n            return slots // Return empty array if not a working day\n            ;\n        }\n        // Parse working hours\n        const [startHour, startMinute] = schedule.workingHours.start.split(\":\").map(Number);\n        const [endHour, endMinute] = schedule.workingHours.end.split(\":\").map(Number);\n        // Create start and end date objects\n        const startDate = new Date(date);\n        startDate.setHours(startHour, startMinute, 0, 0);\n        const endDate = new Date(date);\n        endDate.setHours(endHour, endMinute, 0, 0);\n        // Generate slots\n        let currentSlot = startDate;\n        while(currentSlot < endDate){\n            slots.push({\n                time: (0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_2__.format)(currentSlot, \"HH:mm\"),\n                isAvailable: true\n            });\n            currentSlot = (0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__.addMinutes)(currentSlot, slotDuration);\n        }\n        return slots;\n    } catch (error) {\n        console.error(\"Error generating appointment slots:\", error);\n        return [];\n    }\n}\n/**\r\n * Checks availability of appointment slots in Firestore\r\n * @param clinicId - The clinic ID\r\n * @param date - The date to check\r\n * @param doctorId - The doctor ID (optional)\r\n * @returns Array of available time slots\r\n */ async function checkSlotsAvailability(clinicId, date, doctorId) {\n    try {\n        // Get reference to appointments collection\n        const appointmentsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db, \"appointments\");\n        // Create date range for the selected date\n        const dayStart = (0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_5__.startOfDay)(date);\n        const dayEnd = (0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_6__.endOfDay)(date);\n        // Build query based on parameters\n        let appointmentsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(appointmentsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"date\", \">=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(dayStart)), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"date\", \"<=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(dayEnd)));\n        // Add doctor filter if provided\n        if (doctorId) {\n            appointmentsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(appointmentsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"clinicId\", \"==\", clinicId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"doctorId\", \"==\", doctorId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"date\", \">=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(dayStart)), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"date\", \"<=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(dayEnd)));\n        }\n        // Execute query\n        const appointments = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(appointmentsQuery);\n        // Extract booked time slots\n        const bookedSlots = new Set(appointments.docs.map((doc)=>(0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_2__.format)(doc.data().date.toDate(), \"HH:mm\")));\n        // If doctor ID is provided, get their schedule\n        let doctorSchedule;\n        if (doctorId) {\n            doctorSchedule = await fetchDoctorWorkingHours(clinicId, doctorId);\n        } else {\n            // Default schedule if no doctor specified\n            doctorSchedule = {\n                workingDays: [\n                    \"segunda\",\n                    \"terca\",\n                    \"quarta\",\n                    \"quinta\",\n                    \"sexta\"\n                ],\n                workingHours: {\n                    start: \"08:00\",\n                    end: \"18:00\"\n                }\n            };\n        }\n        // Generate all possible slots for the day\n        const allSlots = generateAppointmentSlots(date, doctorSchedule);\n        // Filter out booked slots\n        return allSlots.filter((slot)=>!bookedSlots.has(slot.time)).map((slot)=>slot.time);\n    } catch (error) {\n        console.error(\"Error checking slots availability:\", error);\n        return [];\n    }\n}\n/**\r\n * Temporarily blocks a time slot to prevent double bookings\r\n * @param clinicId - The clinic ID\r\n * @param doctorId - The doctor ID\r\n * @param date - The appointment date\r\n * @param time - The appointment time\r\n * @param blockDuration - How long to block the slot in minutes (default: 10)\r\n * @returns ID of the temporary block document\r\n */ async function blockTimeSlot(clinicId, doctorId, date, time) {\n    let blockDuration = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 10;\n    try {\n        // Create a reference to the temporary blocks collection\n        const tempBlocksRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db, \"temporaryBlocks\");\n        // Parse time and create a Date object\n        const [hours, minutes] = time.split(\":\").map(Number);\n        const appointmentDate = new Date(date);\n        appointmentDate.setHours(hours, minutes, 0, 0);\n        // Calculate expiration time\n        const expirationTime = (0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__.addMinutes)(new Date(), blockDuration);\n        // Create a unique ID for the block\n        const blockId = \"\".concat(clinicId, \"_\").concat(doctorId, \"_\").concat((0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_2__.format)(appointmentDate, \"yyyy-MM-dd_HH-mm\"));\n        // Create the block document\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(tempBlocksRef, blockId), {\n            clinicId,\n            doctorId,\n            date: firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(appointmentDate),\n            time,\n            blockedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)(),\n            expiresAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(expirationTime),\n            status: \"blocked\"\n        });\n        return blockId;\n    } catch (error) {\n        console.error(\"Error blocking time slot:\", error);\n        throw error;\n    }\n}\n/**\r\n * Schedules an appointment in Firestore\r\n * @param appointmentData - The appointment data\r\n * @param blockId - ID of the temporary block (optional)\r\n * @returns Object with appointment and consultation IDs\r\n */ async function scheduleAppointment(appointmentData, blockId) {\n    try {\n        const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db);\n        // Create appointment document\n        const appointmentsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db, \"appointments\");\n        const appointmentRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(appointmentsRef);\n        // Create consultation document\n        const consultationsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db, \"consultations\");\n        const consultationRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(consultationsRef);\n        // Parse date and time\n        const dateTime = new Date(\"\".concat((0,_barrel_optimize_names_addMinutes_endOfDay_format_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_2__.format)(appointmentData.date, \"yyyy-MM-dd\"), \"T\").concat(appointmentData.time));\n        // Prepare appointment data\n        const appointmentDoc = {\n            id: appointmentRef.id,\n            type: \"consultation\",\n            consultationId: consultationRef.id,\n            clinicId: appointmentData.clinicId,\n            doctorId: appointmentData.doctorId,\n            patientName: appointmentData.patientName,\n            date: firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(dateTime),\n            duration: 30,\n            status: \"Agendado\",\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        };\n        // Prepare consultation data\n        const consultationDoc = {\n            id: consultationRef.id,\n            appointmentId: appointmentRef.id,\n            ...appointmentData,\n            date: firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(dateTime),\n            status: \"Agendado\",\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        };\n        // Add documents to batch\n        batch.set(appointmentRef, appointmentDoc);\n        batch.set(consultationRef, consultationDoc);\n        // If there's a block ID, update its status\n        if (blockId) {\n            const blockRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db, \"temporaryBlocks\", blockId);\n            batch.update(blockRef, {\n                status: \"confirmed\",\n                appointmentId: appointmentRef.id,\n                consultationId: consultationRef.id\n            });\n        }\n        // Commit the batch\n        await batch.commit();\n        return {\n            appointmentId: appointmentRef.id,\n            consultationId: consultationRef.id\n        };\n    } catch (error) {\n        console.error(\"Error scheduling appointment:\", error);\n        throw error;\n    }\n}\n/**\r\n * Unblocks a time slot after scheduling or cancellation\r\n * @param blockId - ID of the temporary block\r\n * @param status - New status for the block (confirmed, cancelled, expired)\r\n */ async function unblockTimeSlot(blockId, status) {\n    try {\n        const blockRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db, \"temporaryBlocks\", blockId);\n        const blockDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(blockRef);\n        // If block doesn't exist, it might have been already cleaned up or expired\n        if (!blockDoc.exists()) {\n            console.log(\"Block \".concat(blockId, \" not found - might have been already cleaned up or expired\"));\n            return;\n        }\n        if (status === \"confirmed\" || status === \"cancelled\") {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(blockRef, {\n                status,\n                updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n            });\n        } else if (status === \"expired\") {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.deleteDoc)(blockRef);\n        }\n    } catch (error) {\n        console.error(\"Error unblocking time slot:\", error);\n        // Don't throw error for non-critical operation\n        console.warn(\"Failed to unblock slot \".concat(blockId, \", but continuing operation\"));\n    }\n}\n/**\r\n * Cleans up expired temporary blocks\r\n * This function should be called periodically, e.g., by a scheduled function\r\n */ async function cleanupExpiredBlocks() {\n    try {\n        const tempBlocksRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db, \"temporaryBlocks\");\n        const now = new Date();\n        // Query for expired blocks\n        const expiredBlocksQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(tempBlocksRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"expiresAt\", \"<=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp.fromDate(now)), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"status\", \"==\", \"blocked\"));\n        const expiredBlocks = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(expiredBlocksQuery);\n        // Delete expired blocks\n        const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.db);\n        expiredBlocks.docs.forEach((doc)=>{\n            batch.delete(doc.ref);\n        });\n        if (expiredBlocks.docs.length > 0) {\n            await batch.commit();\n            console.log(\"Cleaned up \".concat(expiredBlocks.docs.length, \" expired blocks\"));\n        }\n    } catch (error) {\n        console.error(\"Error cleaning up expired blocks:\", error);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/doctor-scheduling.ts\n"));

/***/ })

});